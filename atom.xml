<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael&#39;s blog</title>
  
  <subtitle>Life-long Learning</subtitle>
  <link href="http://mikelhsia.github.io/atom.xml" rel="self"/>
  
  <link href="http://mikelhsia.github.io/"/>
  <updated>2021-02-27T04:33:39.079Z</updated>
  <id>http://mikelhsia.github.io/</id>
  
  <author>
    <name>Michael Hsia</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Factor analysis】 Vol. 4. Factor score</title>
    <link href="http://mikelhsia.github.io/2021/02/27/2021-02-27-factor-analysis-4/"/>
    <id>http://mikelhsia.github.io/2021/02/27/2021-02-27-factor-analysis-4/</id>
    <published>2021-02-27T09:18:39.000Z</published>
    <updated>2021-02-27T04:33:39.079Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2021/02/27/2021-02-27-factor-analysis-4/cover.jpg" class="" width="500"><p><em>Previous reading</em></p><ul><li><a href="https://mikelhsia.github.io/2021/01/31/2021-01-31-factor-analysis/"><em>【Factor analysis】 Vol. 1. Introduction the idea of factor analysis</em></a></li><li><a href="https://mikelhsia.github.io/2021/02/08/2021-02-03-factor-analysis-factors/"><em>【Factor analysis】 Vol. 2. Get ready - preparing and cleaning data</em></a></li><li><a href="https://mikelhsia.github.io/2021/02/23/2021-02-11-factor-analysis-3/">【Factor analysis】 Vol. 3. Construct your own factor</a></li></ul><p>After we have collected all the fundamental data and have produced the factor data we need, how we can utilize them to compete with the market and to beat the benchmark return?</p><p>One of the common methods would be <strong>factor score</strong>. In this post, we’re going to describe and implement this factor score method to see how we can rate the stocks that have more potential to rise than the others in the future.<br><a id="more"></a></p><h1 id="What-is-factor-score"><a href="#What-is-factor-score" class="headerlink" title="What is factor score?"></a>What is factor score?</h1><p>The <strong>factor score</strong> is also called the <em>component score</em>. This method essentially uses the factors we have produced to score the quality of the stocks, based on the correlation between the individual factors and the next day’s return. <code>The higher the sum of the correlations of factors, the higher the tendency of the next day&#39;s return</code> is the central idea of using the factor score method to predict the future trend. Therefore, once we have done that for all the stocks that we’re monitoring in our candidate portfolio, we’ll be able to rank the stocks and buy the top N stocks that we perceive will generate a higher return than the others.</p><p>There are two ways of achieving this goal:</p><ol><li>Using linear regression</li><li>Using <a href="https://www.investopedia.com/terms/i/information-coefficient.asp">IC (Information Coefficient)</a> &amp; <a href="https://www.investopedia.com/terms/i/informationratio.asp">IR (Information Ratio)</a></li></ol><p>Linear regression is the most common way to be used in the factor score. However, there are many ways and theories to implement linear regression. Here, let’s use a much easier and simpler way to demonstrate the idea of the factor analysis. We are going to adopt IC/IR method as an example throughout this tutorial.</p><h1 id="Strategy-and-details"><a href="#Strategy-and-details" class="headerlink" title="Strategy and details"></a>Strategy and details</h1><p>Let’s start with detailing our strategy guidelines and define our question here. Using the composition of the S&amp;P 500 index as our candidates, we would like to build a portfolio that tracks the trend of S&amp;P 500, but in the meantime performs better than the S&amp;P 500 index. Here’s how to do it:</p><ol><li>Get the S&amp;P 500 index composition over time.</li><li>Select what factors we’re trying to exam against the score</li><li>Process the factor data.</li><li>Calculate the IC and IR to find out the relationship between the factors and dependent variables.</li><li>Calculate the factor scores</li><li>Check the results</li></ol><h2 id="Get-S-amp-P-500-index-composition-over-time"><a href="#Get-S-amp-P-500-index-composition-over-time" class="headerlink" title="Get S&amp;P 500 index composition over time."></a>Get S&amp;P 500 index composition over time.</h2><p>This part we have covered in <a href="https://mikelhsia.github.io/2021/02/15/2021-02-15-how2-snp500-historic-composition/">【How 2】 Vol. 4. How to produce the S&amp;P 500 Historical Components &amp; Changes</a></p><h2 id="Select-what-factors-we’re-trying-to-exam-against-the-score"><a href="#Select-what-factors-we’re-trying-to-exam-against-the-score" class="headerlink" title="Select what factors we’re trying to exam against the score"></a>Select what factors we’re trying to exam against the score</h2><p>Even though we have tones of factors in our arsenal, we’re not going to use them all.</p><p>Factors are simply objective data and they could have little or even zero correlation with the next day’s return. Just like in the happiness survey in our <a href="https://mikelhsia.github.io/2021/01/31/2021-01-31-factor-analysis/">previous post</a>, that not every data in the survey would be highly related to the happiness of the people in the country. Probably the <code>Gender</code> column is meaningless as it’s not the major decisive factor whether people are happy or not. So selecting a defined factor set would be our fundamental assumption to interpret what factors really contribute to the next das return.</p><h2 id="Process-the-factor-data"><a href="#Process-the-factor-data" class="headerlink" title="Process the factor data"></a>Process the factor data</h2><p>Process the factor data to be used in the factor score. There are three steps to standardize our data:</p><h3 id="Winsorization-Removing-the-extreme-data"><a href="#Winsorization-Removing-the-extreme-data" class="headerlink" title="Winsorization (Removing the extreme data)"></a>Winsorization (Removing the extreme data)</h3><p>Winsorization would help us remove the extreme scenarios that affect our final ranking significantly. The blue dots over the line in the below diagram could be the results of unexpected incidents or news such as the <a href="https://smartasset.com/financial-advisor/gamestop-stock-price-wallstreetbets-reddit">GameStop short squeeze</a> incident not long ago. Therefore, we’d better remove them in order to better rank the stocks.<br><img data-src="/2021/02/27/2021-02-27-factor-analysis-4/ill1.png" class="" width="400"></p><h3 id="Industry-neutralization"><a href="#Industry-neutralization" class="headerlink" title="Industry neutralization"></a>Industry neutralization</h3><p>Industry neutralization removes the difference across industries. For example, the average market cap of the Technology industry in 2020 is around 1.24 billion, but the average market cap of the Energy industry is only 0.23 billion. Therefore, neutralize the industry impact would help us remove this inevitable biased data.</p><h3 id="Standardization"><a href="#Standardization" class="headerlink" title="Standardization"></a>Standardization</h3><p>When we investigate how does stock <code>abc</code> do on EPS 1.2 compares to the industry standard 0.8, which 0.4 difference. On the other hand, stock <code>xyz</code>‘s EPS 15.3 is 3.1 points away from its industry standard. Simply compare 0.4 with 3.1 will not be able to define how <code>abc</code> or <code>xyz</code> do in its own industry. So, Standardization meant to convert the raw data into standardized data.</p><div class="table-container"><table><thead><tr><th>-</th><th>abc</th><th>xyz</th></tr></thead><tbody><tr><td>EPS</td><td>1.2</td><td>15.3</td></tr><tr><td>Industry</td><td>Finance</td><td>Consumer goods</td></tr><tr><td>Industry EPS standard</td><td>0.8</td><td>12.2</td></tr><tr><td>Difference</td><td>+0.4</td><td>+3.1</td></tr><tr><td>Industry EPS standard deviation</td><td>0.2</td><td>2</td></tr><tr><td>Standardized score</td><td>0.4/0.2 = <strong>+2</strong></td><td>3.1/2 = <strong>+1.5</strong></td></tr></tbody></table></div><quote><center><i>So by looking at the standardized score, you can tell that actually stock `abc` does better than stock `xyz`</i></center></quote><h2 id="Calculate-the-IC-and-IR"><a href="#Calculate-the-IC-and-IR" class="headerlink" title="Calculate the IC and IR"></a>Calculate the IC and IR</h2><p><a href="https://www.investopedia.com/terms/i/information-coefficient.asp">Information coefficient</a> is to calculate the correlation between the factors and the next day’s return. Therefore, the higher the IC of the factor indicates that this factor would better help predict the next day’s return.</p><p><a href="https://www.investopedia.com/terms/i/informationratio.asp">Information Ratio</a> then stands for whether the IC is stable or not. If IR is high, then it means its IC is more stable and even better in terms of interpreting the change of the next day’s return.</p><script type="math/tex; mode=display">IR = \frac{IC}{standard\ deviation\ of\ IC}</script><p>The reason we calculating the IR is that we need to evaluate the impact on the factor to the next day’s price. So once we are able to get a series of IR, we calculate its weight among all IR in order to know whether this factor is strong and stable enough.</p><h2 id="Get-the-factor-scores"><a href="#Get-the-factor-scores" class="headerlink" title="Get the factor scores"></a>Get the factor scores</h2><p>By having the IR weight series, we can now multiply them with the factor itself, sum them up, and come out of a score to stand for the quality and traits of this stock.</p><h2 id="Check-the-results"><a href="#Check-the-results" class="headerlink" title="Check the results"></a>Check the results</h2><p>As our goal here in this post is to use the factor score to find out the profitable stocks among the S&amp;P 500 index composition stocks, we can examine how effective our factor score work by the following steps:</p><ol><li>Sort the stocks by factor score</li><li>Split the stocks into N groups that contain an equal number of stocks.</li><li>Add up the daily return in the same group and compare it to the other groups over time.</li></ol><p>If the factor set that we define is good, then we expect to see the trend of the accumulate daily return in each group diverge as much as possible as below line chart:<br></p><p>On the other hand, if our factor set is not good enough to interpret the next day’s return, we’ll see the cumulated daily return of each group tangled together. This means that our factor set would not be able to separate the good stocks from bad stocks.<br></p><p>Finally, we might need to go through a various combinations of factors to find out what factor set possesses the capability to rate the stocks, we need to execute the steps from 3~6 multiple times. The effectiveness of the factors would also be voided due to the macroeconomic changes over time. Once we are able to find that factor set, then we can proceed to the next step to get more detail by comparing our portfolio performance against the benchmark portfolio performance.</p><h1 id="Notebook-for-reference"><a href="#Notebook-for-reference" class="headerlink" title="Notebook for reference"></a>Notebook for reference</h1><iframe src="https://nbviewer.jupyter.org/github/mikelhsia/Python/blob/master/jupyter_notebook_for_blogs/vol_4_factor_score.ipynb" width="100%" height="1200" frameborder="0"></iframe>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2021/02/27/2021-02-27-factor-analysis-4/cover.jpg&quot; class=&quot;&quot; width=&quot;500&quot;&gt;
&lt;p&gt;&lt;em&gt;Previous reading&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mikelhsia.github.io/2021/01/31/2021-01-31-factor-analysis/&quot;&gt;&lt;em&gt;【Factor analysis】 Vol. 1. Introduction the idea of factor analysis&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mikelhsia.github.io/2021/02/08/2021-02-03-factor-analysis-factors/&quot;&gt;&lt;em&gt;【Factor analysis】 Vol. 2. Get ready - preparing and cleaning data&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mikelhsia.github.io/2021/02/23/2021-02-11-factor-analysis-3/&quot;&gt;【Factor analysis】 Vol. 3. Construct your own factor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After we have collected all the fundamental data and have produced the factor data we need, how we can utilize them to compete with the market and to beat the benchmark return?&lt;/p&gt;
&lt;p&gt;One of the common methods would be &lt;strong&gt;factor score&lt;/strong&gt;. In this post, we’re going to describe and implement this factor score method to see how we can rate the stocks that have more potential to rise than the others in the future.&lt;br&gt;</summary>
    
    
    
    <category term="Factor Analysis" scheme="http://mikelhsia.github.io/categories/Factor-Analysis/"/>
    
    
    <category term="Research" scheme="http://mikelhsia.github.io/tags/Research/"/>
    
  </entry>
  
  <entry>
    <title>【Factor analysis】 Vol. 3. Construct your own factor</title>
    <link href="http://mikelhsia.github.io/2021/02/23/2021-02-11-factor-analysis-3/"/>
    <id>http://mikelhsia.github.io/2021/02/23/2021-02-11-factor-analysis-3/</id>
    <published>2021-02-23T12:04:16.000Z</published>
    <updated>2021-02-23T14:54:08.855Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2021/02/23/2021-02-11-factor-analysis-3/cover.jpg" class="" width="500"><p><em>Previous reading</em></p><ul><li><a href="https://mikelhsia.github.io/2021/01/31/2021-01-31-factor-analysis/"><em>【Factor analysis】 Vol. 1. Introduction the idea of factor analysis</em></a></li><li><a href="https://mikelhsia.github.io/2021/02/08/2021-02-03-factor-analysis-factors/"><em>【Factor analysis】 Vol. 2. Get ready - preparing and cleaning data</em></a></li></ul><p>After we got the fundamental data we needed from any data source you preferred or paid as in the previous post, we’re now going to generate <strong>factors</strong> to be used in the factor analysis.</p><a id="more"></a><h1 id="What-is-factor"><a href="#What-is-factor" class="headerlink" title="What is factor?"></a>What is factor?</h1><p>Do you still remember the survey data that was collected by the Minister in the story mentioned in our first post in the series?</p><div class="table-container"><table><thead><tr><th><strong>Degree of Happiness (0~100)</strong></th><th>Gender</th><th>Age</th><th>Occupation</th><th>Location</th><th>Income</th><th>Marital Status</th><th>Number of social gathering per week</th></tr></thead><tbody><tr><td>60</td><td>male</td><td>28</td><td>miner</td><td>village A</td><td>$2,000</td><td>single</td><td>2</td></tr><tr><td>80</td><td>female</td><td>32</td><td>housewife</td><td>village B</td><td>$100</td><td>married</td><td>5</td></tr><tr><td>77</td><td>male</td><td>63</td><td>retired</td><td>village C</td><td>$500</td><td>divorced</td><td>12</td></tr><tr><td>58</td><td>female</td><td>22</td><td>OL</td><td>village A</td><td>$1,300</td><td>in a relationship</td><td>7</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table></div><p>The objective we’re trying to solve here is to understand how happy the people in the country are. Then the other data such as <em>gender, age, occupation, location, …</em> are what we called <strong>factors</strong>. Factors are quantified traits that we use to describe the objective. Take the survey data above as an example, you might come to the conclusion that the people from a certain location would be happier than the people from another location, or people whose income level is higher tend to be happier than people whose income level is lower. By combining all the influences of all factors, then we’ll get this final formula as below:</p><script type="math/tex; mode=display">Degree\ of\ happiness = b_1 * Gender + b_2 * Age + b_3 * Occupation ... + b_n * Number\ of\ social\ gathering\ per\ week  + \alpha</script><p><em>where</em></p><ul><li><em>$b_1, b_2, … b_n$ are coefficients, could be any natural number (positive/negative)</em></li><li>*$\alpha$ stands for the part of degree of happiness that cannot be explained by given factors</li></ul><h1 id="Common-factors-in-the-stock-market"><a href="#Common-factors-in-the-stock-market" class="headerlink" title="Common factors in the stock market"></a>Common factors in the stock market</h1><p>The application of factor analysis to the stock market would be similar, and we have explained this in the <a href="https://mikelhsia.github.io/2021/02/08/2021-02-03-factor-analysis-factors/">first post in this series</a>. The formula would look like this:</p><script type="math/tex; mode=display">today's price change(\%) = b_1 * yesterday\ close\ price + b_2 * yesterday\ trading\ volume + b_3 * yesterday\ ROE + ... + \alpha</script><p>The existing factors can be categorized but not limited to the below types:</p><ul><li>Fundamental factors<ul><li>Fundamental factors are extracted directly from the company report. They directly present how the company operates from the official accounting book.</li><li>Ex: <em>net working capital, total profit, EBIT, EBITDA, total asset, total debt, … etc.</em></li></ul></li><li>Quality factors<ul><li>Quality factors are derived from fundamental factors to represent the ability to make a profit for a company. The more profit a company can make, the better the quality of this company is the central assumption of this type of factors.</li><li>Ex: <em>net profit ratio, debt to equity ratio, net profit to operate revenue TTM, … etc.</em></li></ul></li><li>Momentum factors<ul><li>The momentum factors is a relatively new type of factor comparing to the rest. According to the explanation of financial behavior, the high and low of this factor are actually generated by the behavior of the majority of the investors at the moment. In other words, it implicitly explains the <strong>trend</strong> of the stock price.</li><li>Ex: <em>60-day price rate of change, turnover rate, … etc.</em></li></ul></li><li>Technical factors<ul><li>This type of factor is produced from technical analysis and theory from scholars. The <a href="https://mikelhsia.github.io/2020/10/10/2020-10-10-macd-strategy/#more">MACD indicator</a> that we introduced before is also one of the technical factors.</li><li>MACD indicator, Bollinger bands, EMAC indicator, KDJ indicator, … etc.</li></ul></li><li>Alternative factors<ul><li>As the realm of machine learning started to thrive these years, there are more and more alternative data that we can utilize and analyze. From the area of the oilfield captured by satellite to every single tweet that tweets about certain stock on Twitter, they can all be captured and processed to quantified indicators to represent the change of emotion/economy over time.</li><li>Ex: <em>Twitter sentiment data</em></li></ul></li></ul><h1 id="How-we-can-get-the-factors-above"><a href="#How-we-can-get-the-factors-above" class="headerlink" title="How we can get the factors above?"></a>How we can get the factors above?</h1><ul><li>Quantitative platforms would provide their proprietary tool or service for professional investors to access.<ul><li><a href="https://www.joinquant.com/default/index/sdk">JQData</a> is a China-based service that allows you to download the local python package for you to fetch data over the internet.</li></ul></li><li>Paid data sources are also accountable services that provide a wild range of alternative data as well.<ul><li><a href="https://www.quandl.com/">Quandl</a> is famous for aggregating APIs from various data brokers.</li><li><a href="https://www.factset.com/">Factset</a> is a traditional data broker since 1978, and big companies such as <strong><em>Barclay</em></strong> and <strong><em>J.P Morgan</em></strong> are also using their service.</li></ul></li><li>Build one yourself. You can download the raw financial data from anywhere and build the factors upon it.</li></ul><p>Below, I’m going to quickly demonstrate the third way and build the factor data with the data we downloaded in <a href="https://mikelhsia.github.io/2021/02/08/2021-02-03-factor-analysis-factors/">the previous post</a>.</p><h1 id="Notebook-Build-your-own-factors-from-the-downloaded-data"><a href="#Notebook-Build-your-own-factors-from-the-downloaded-data" class="headerlink" title="Notebook: Build your own factors from the downloaded data"></a>Notebook: Build your own factors from the downloaded data</h1><iframe src="https://nbviewer.jupyter.org/github/mikelhsia/Python/blob/master/jupyter_notebook_for_blogs/vol_3_construct_your_own_factors.ipynb" width="100%" height="1200" frameborder="0"></iframe>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2021/02/23/2021-02-11-factor-analysis-3/cover.jpg&quot; class=&quot;&quot; width=&quot;500&quot;&gt;
&lt;p&gt;&lt;em&gt;Previous reading&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mikelhsia.github.io/2021/01/31/2021-01-31-factor-analysis/&quot;&gt;&lt;em&gt;【Factor analysis】 Vol. 1. Introduction the idea of factor analysis&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mikelhsia.github.io/2021/02/08/2021-02-03-factor-analysis-factors/&quot;&gt;&lt;em&gt;【Factor analysis】 Vol. 2. Get ready - preparing and cleaning data&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After we got the fundamental data we needed from any data source you preferred or paid as in the previous post, we’re now going to generate &lt;strong&gt;factors&lt;/strong&gt; to be used in the factor analysis.&lt;/p&gt;</summary>
    
    
    
    <category term="Factor Analysis" scheme="http://mikelhsia.github.io/categories/Factor-Analysis/"/>
    
    
    <category term="Research" scheme="http://mikelhsia.github.io/tags/Research/"/>
    
  </entry>
  
  <entry>
    <title>【How 2】 Vol. 4. How to produce the S&amp;P 500 Historical Components &amp; Changes</title>
    <link href="http://mikelhsia.github.io/2021/02/15/2021-02-15-how2-snp500-historic-composition/"/>
    <id>http://mikelhsia.github.io/2021/02/15/2021-02-15-how2-snp500-historic-composition/</id>
    <published>2021-02-15T05:59:41.000Z</published>
    <updated>2021-02-23T14:52:30.531Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2021/02/15/2021-02-15-how2-snp500-historic-composition/cover.jpg" class="" width="250"><p>We’ve talked about the definition of <strong>survivor bias</strong> and the impact if we didn’t notice and resolve it in <a href="https://mikelhsia.github.io/2020/11/26/2020-11-28-how-to-produce-a-quality-tradable-stock-set-for-backtesting/">【How 2】 Vol. 3. How to produce a quality tradable securities for backtesting</a>. One of the most critical topics that we need to address is to get the accurate list of components of your target portfolio over time when developing your investing strategy. Therefore, I’m gonna use S&amp;P 500 Index as the example to go through this post, and we’re gonna use the result to the later series in <a href="https://mikelhsia.github.io/2021/01/31/2021-01-31-factor-analysis/">【Factor analysis】 Vol. 1. Introduction the idea of factor analysis</a>.</p><a id="more"></a><iframe src="https://nbviewer.jupyter.org/github/mikelhsia/Python/blob/master/jupyter_notebook_for_blogs/S%26P500_history.ipynb" width="100%" height="1200" frameborder="0"></iframe>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2021/02/15/2021-02-15-how2-snp500-historic-composition/cover.jpg&quot; class=&quot;&quot; width=&quot;250&quot;&gt;
&lt;p&gt;We’ve talked about the definition of &lt;strong&gt;survivor bias&lt;/strong&gt; and the impact if we didn’t notice and resolve it in &lt;a href=&quot;https://mikelhsia.github.io/2020/11/26/2020-11-28-how-to-produce-a-quality-tradable-stock-set-for-backtesting/&quot;&gt;【How 2】 Vol. 3. How to produce a quality tradable securities for backtesting&lt;/a&gt;. One of the most critical topics that we need to address is to get the accurate list of components of your target portfolio over time when developing your investing strategy. Therefore, I’m gonna use S&amp;amp;P 500 Index as the example to go through this post, and we’re gonna use the result to the later series in &lt;a href=&quot;https://mikelhsia.github.io/2021/01/31/2021-01-31-factor-analysis/&quot;&gt;【Factor analysis】 Vol. 1. Introduction the idea of factor analysis&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="how2" scheme="http://mikelhsia.github.io/categories/how2/"/>
    
    
    <category term="Backtesting" scheme="http://mikelhsia.github.io/tags/Backtesting/"/>
    
    <category term="how2" scheme="http://mikelhsia.github.io/tags/how2/"/>
    
  </entry>
  
  <entry>
    <title>【Factor analysis】 Vol. 2. Get ready - preparing and cleaning data</title>
    <link href="http://mikelhsia.github.io/2021/02/08/2021-02-03-factor-analysis-factors/"/>
    <id>http://mikelhsia.github.io/2021/02/08/2021-02-03-factor-analysis-factors/</id>
    <published>2021-02-08T12:04:16.000Z</published>
    <updated>2021-02-08T12:41:34.638Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2021/02/08/2021-02-03-factor-analysis-factors/cover.png" class="" width="400"><p>In the last post <a href="https://mikelhsia.github.io/2021/01/31/2021-01-31-factor-analysis/#more">Vol. 1. Introduction the idea of factor analysis</a>, we have introduced the concept of factor analysis. There are various ways to implement the factor analysis against the problem you’re trying to resolve or explain. However, any of them would require proper data to be provisioned.</p><p>Just like the cover image that I used in this post implies. All the top-tiered chefs know how to make good dishes as their skills are polished and proficient. In the end, the quality of the ingredients matter. That’s why it’s essential to acquire the right data in the right way, and then you’ll have the solid foundation to proceed with the analysis.</p><a id="more"></a><p>I’m putting together the functions and processes in the below notebook. Hope this would help you understand what kind of data we need and what we need to pay attention to while fetching the data we need.</p><iframe src="https://nbviewer.jupyter.org/github/mikelhsia/Python/blob/master/jupyter_notebook_for_blogs/vol_2_preparing_data.ipynb" width="100%" height="1200" frameborder="0"></iframe>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2021/02/08/2021-02-03-factor-analysis-factors/cover.png&quot; class=&quot;&quot; width=&quot;400&quot;&gt;
&lt;p&gt;In the last post &lt;a href=&quot;https://mikelhsia.github.io/2021/01/31/2021-01-31-factor-analysis/#more&quot;&gt;Vol. 1. Introduction the idea of factor analysis&lt;/a&gt;, we have introduced the concept of factor analysis. There are various ways to implement the factor analysis against the problem you’re trying to resolve or explain. However, any of them would require proper data to be provisioned.&lt;/p&gt;
&lt;p&gt;Just like the cover image that I used in this post implies. All the top-tiered chefs know how to make good dishes as their skills are polished and proficient. In the end, the quality of the ingredients matter. That’s why it’s essential to acquire the right data in the right way, and then you’ll have the solid foundation to proceed with the analysis.&lt;/p&gt;</summary>
    
    
    
    <category term="Factor Analysis" scheme="http://mikelhsia.github.io/categories/Factor-Analysis/"/>
    
    
    <category term="Research" scheme="http://mikelhsia.github.io/tags/Research/"/>
    
  </entry>
  
  <entry>
    <title>【Factor analysis】 Vol. 1. Introduction the idea of factor analysis</title>
    <link href="http://mikelhsia.github.io/2021/01/31/2021-01-31-factor-analysis/"/>
    <id>http://mikelhsia.github.io/2021/01/31/2021-01-31-factor-analysis/</id>
    <published>2021-01-31T02:04:16.000Z</published>
    <updated>2021-02-27T04:29:43.101Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2021/01/31/2021-01-31-factor-analysis/cover.jpeg" class="" width="400"><p>In previous posts, we’ve been talking about the <a href="https://www.investopedia.com/terms/m/momentum_investing.asp"><strong>momentum strategies</strong></a> like <a href="https://mikelhsia.github.io/2020/10/10/2020-10-10-macd-strategy/#more">MACD strategy</a> and <a href="https://mikelhsia.github.io/2020/12/26/20202-12-26-turtle-strategy/#more">turtle strategy</a>. These are the standard strategies based on the hypothesis that when the environmental variables, such as price moving average, technical indicators, and other subjective numbers, meet certain requirements, the stock price would follow the trends and continue to go up/down. The scholars believe that the momentum would continue pushing the stock price further if such investor confidence has been established.</p><p>Other than that, there is also another methodology out there, called <strong>factor analysis</strong>. To explain this in detail, I’m going to separate this huge topic into several parts: <a id="more"></a></p><ol><li>Introduction of the idea of factor analysis</li><li>Get ready: preparing and cleaning data</li><li>Construct your own factors</li><li>Factor scores</li><li>Performance analysis</li></ol><h1 id="What-is-factor-analysis"><a href="#What-is-factor-analysis" class="headerlink" title="What is factor analysis"></a>What is factor analysis</h1><p>I’m not going to intimidate you with lengthy and smart-ass sentences with tons of big words. Otherwise, I’m going to drive away the last group of the audience that I have left. Let me try to tell you a story then you’ll get to know the objective of factor analysis.</p><h1 id="Story-starts-here"><a href="#Story-starts-here" class="headerlink" title="Story starts here"></a>Story starts here</h1><h2 id="Long-long-time-ago…"><a href="#Long-long-time-ago…" class="headerlink" title="Long long time ago…"></a>Long long time ago…</h2><blockquote><img data-src="/2021/01/31/2021-01-31-factor-analysis/kingdom.png" class="" width="300"><p>In a small country somewhere on the earth, there’s a king who is the kindest and the most merciful one this country ever had. The kind king has ruled this country for decades.<br>One day, an idea struck the king: after all the hard work my team and I have done, are my people feel happy about our doings? And how are we going to keep or improve the level of happiness of our people? So the king has assigned this task to the Minister of the Realm.</p><p>Easy enough, the Minister has designed a survey to investigate the degree of happiness of the people. They have collected the following information of every individual in the realm: <strong>gender, age, occupation, location, income, marital status, and the number of social gatherings per week</strong>. At the bottom of the survey, the Minister also requests each individual to evaluate the degree of happiness of himself/herself. He used Excel to put together all the survey and would like to present this sheet to the king. Here’s how this excel sheet looks like:</p><div class="table-container"><table><thead><tr><th><strong>Degree of Happiness (0~100)</strong></th><th>Gender</th><th>Age</th><th>Occupation</th><th>Location</th><th>Income</th><th>Marital Status</th><th>Number of social gathering per week</th></tr></thead><tbody><tr><td>60</td><td>male</td><td>28</td><td>miner</td><td>village A</td><td>$2,000</td><td>single</td><td>2</td></tr><tr><td>80</td><td>female</td><td>32</td><td>housewife</td><td>village B</td><td>$100</td><td>married</td><td>5</td></tr><tr><td>77</td><td>male</td><td>63</td><td>retired</td><td>village C</td><td>$500</td><td>divorced</td><td>12</td></tr><tr><td>58</td><td>female</td><td>22</td><td>OL</td><td>village A</td><td>$1,300</td><td>in a relationship</td><td>7</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table></div><img data-src="/2021/01/31/2021-01-31-factor-analysis/queue.png" class="" width="500"></blockquote><p><br><br>This is what we called <strong>“data collection”</strong>. We collect abundant data regarding a question or a specific phenomenon that we’re trying to understand and explain. So here the question we’re trying to understand is that how happy the people in the country are, and how we can further increase the satisfaction of the people by increasing income level, promoting more social events among people, or even by adding a moat. All we need to do is to dig into the data and discover valuable and meaningful interpretation.<br><br></p><h2 id="The-next-step…"><a href="#The-next-step…" class="headerlink" title="The next step…"></a>The next step…</h2><blockquote><p><em>At the home of the Minister…</em></p><p>Minister: Ummmm….<br><img data-src="/2021/01/31/2021-01-31-factor-analysis/thinker.jpg" class="" width="250"></p><p>The Minister was contemplating how to put together an actionable plan and to present this to the king. He can calculate the average degree of happiness of everyone and tell the king how happy his people are? That probably gonna cost him his job if he presents this sloppy report. But what else could he get from this sheet full of numbers?</p><p>The son of the Minister, who majored in statistics in college, happened to hear his father’s moaning. He patted on his father’s shoulder and told his father that two magic words would save his brain juice: <strong>“Factor Analysis”</strong></p></blockquote><p>The foundation of the factor analysis is simple and can be summarized into this one-line formula:</p><script type="math/tex; mode=display">y = b_1x_1 + b_2x_2 + ... + b_nx_n + \alpha</script><p>This is the formula that we all are acquainted with when we’re in junior and senior high. But now we’re giving the actual meaning to this formula. The degree of happiness is the <strong>dependent variable</strong>, and the rest are <strong>independent variables</strong> or <strong>“factors”</strong>. After mapping the terminology, it would make this formula more sense to you:</p><script type="math/tex; mode=display">Degree\ of\ happiness = b_1 * Gender + b_2 * Age + b_3 * Occupation ... + b_n * Number\ of\ social\ gathering\ per\ week  + \alpha</script><p><em>where</em></p><ul><li><em>$b_1, b_2, … b_n$ are coefficients, could be any natural number (positive/negative)</em></li><li><em>$\alpha$ stands for the part of degree of happiness that cannot be explained by given factors</em></li></ul><p>Therefore, if we can decipher these coefficients in the formula, we’re able to find out which factor contributes the most to the level of happiness of the people in this country. For example, let’s assume the coefficient of income level is 0.008. This indicating that for every $1,000 extra income you gain, your degree of happiness gain 8 points.<br><br></p><h2 id="More-work-to-do-then-the-happy-ending"><a href="#More-work-to-do-then-the-happy-ending" class="headerlink" title="More work to do, then the happy ending"></a>More work to do, then the happy ending</h2><blockquote><p>Minister: Cool! Finally, my money paid off….., I mean, finally you’ve learned something useful. But here comes the question, how can we get those coefficients from the data we have collected from the survey?<br><img data-src="/2021/01/31/2021-01-31-factor-analysis/edu.jpg" class="" width="350"></p><p>The son of the Minister showed him several matured tools existing in the market. They fed the data into the program and get the approximated numbers of those coefficients. The Minister is very happy to present this new finding to the king…</p></blockquote><p>That’s the end of the story. After all, we’re not writing a novel here. At least we get the general idea of what factor analysis and usage from the story, hopefully.</p><h1 id="Factor-analysis-application-of-stock-market"><a href="#Factor-analysis-application-of-stock-market" class="headerlink" title="Factor analysis application of stock market"></a>Factor analysis application of stock market</h1><p>Factor analysis not only can be applied to survey analysis, but also to the post-marketing campaign, financial model, business plan, online ads traffic, and even the mobile app traffic analysis. As these events and incidents have the tendency of having one major objective and collecting lots of data according to the inputs and outputs, they would be the perfect subjects to apply factor analysis and understand what happened after the program launched. Once we would be able to condense into the formula as we described above, it would give us the knowledge to interpret the collected data and probability to predict the future.</p><p>Let’s step back and take a look at what would happen if we apply factor analysis to the stock market. We now use daily return as our dependent variable, and we get to choose any indicator that could potentially contribute to the stock growth or decline of the stock price. In a nutshell, we’re trying to understand how much of the price change of today can be explained by the picked factors yesterday(stock price, trading volume, or company-wise fundamental…). So in the end, the formula would look like this:</p><script type="math/tex; mode=display">today's price change(in\ \%) = b_1 * yesterday\ close\ price + b_2 * yesterday\ trading\ volume + b_3 * yesterday\ ROE + \alpha</script><p>By having this formula as the result of you performing factor analysis, you’ll be able to:</p><ul><li>explain the historic price movement of the stock market and become a famous scholar.</li><li>or predict tomorrow’s stock price using historic data and make a profit out of it.</li></ul><p>How exciting this could be!! But be aware, that factor analysis itself is merely deducting and extrapolating the coefficients through the data we’ve been given. There are pitfalls we need to pay attention to, such as</p><ol><li>biased data were provided</li><li>duplicated data or missing data</li><li>false assumption</li><li>overfitting to an optimal situation to maximize the return</li><li>simply luck</li></ol><p>So don’t get too excited when you achieved a good result after performing factor analysis. You need to further exam each step over and over again until you inspect this model from all angles.</p><hr><h1 id="That’s-all"><a href="#That’s-all" class="headerlink" title="That’s all"></a>That’s all</h1><p>That’s pretty much about the introduction of what factor analysis. I hope I make it clear enough, and we’ll start walking through the implementation step-by-step starting the next series.</p>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2021/01/31/2021-01-31-factor-analysis/cover.jpeg&quot; class=&quot;&quot; width=&quot;400&quot;&gt;
&lt;p&gt;In previous posts, we’ve been talking about the &lt;a href=&quot;https://www.investopedia.com/terms/m/momentum_investing.asp&quot;&gt;&lt;strong&gt;momentum strategies&lt;/strong&gt;&lt;/a&gt; like &lt;a href=&quot;https://mikelhsia.github.io/2020/10/10/2020-10-10-macd-strategy/#more&quot;&gt;MACD strategy&lt;/a&gt; and &lt;a href=&quot;https://mikelhsia.github.io/2020/12/26/20202-12-26-turtle-strategy/#more&quot;&gt;turtle strategy&lt;/a&gt;. These are the standard strategies based on the hypothesis that when the environmental variables, such as price moving average, technical indicators, and other subjective numbers, meet certain requirements, the stock price would follow the trends and continue to go up/down. The scholars believe that the momentum would continue pushing the stock price further if such investor confidence has been established.&lt;/p&gt;
&lt;p&gt;Other than that, there is also another methodology out there, called &lt;strong&gt;factor analysis&lt;/strong&gt;. To explain this in detail, I’m going to separate this huge topic into several parts:</summary>
    
    
    
    <category term="Factor Analysis" scheme="http://mikelhsia.github.io/categories/Factor-Analysis/"/>
    
    
    <category term="Research" scheme="http://mikelhsia.github.io/tags/Research/"/>
    
  </entry>
  
  <entry>
    <title>Experiment of Turtle trading strategy</title>
    <link href="http://mikelhsia.github.io/2020/12/26/2020-12-26-turtle-strategy/"/>
    <id>http://mikelhsia.github.io/2020/12/26/2020-12-26-turtle-strategy/</id>
    <published>2020-12-26T05:11:59.000Z</published>
    <updated>2021-02-02T09:14:17.254Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Last post in 2020. See you, 2020. See you, in 2021.</p></blockquote><img data-src="/2020/12/26/2020-12-26-turtle-strategy/cover.jpg" class="" width="400"><p>The Turtle Traders experiment was conducted in the early 1980s by <strong>Richard Dennis</strong> and <strong>William Eckhardt</strong> to see whether anyone could be taught how to make money in trading. Therefore, the trading strategy that has been taught to these apprentices is named after this experiment as “<strong>Turtle Strategy</strong>“.</p><p>In this post, we’re going to quickly go through the turtle strategy itself, and I’m going to experiment with a few things against the backtesting platform that I’m checking out recently: <a href="https://joinquant.com"><strong>JoinQuant</strong></a>.</p><a id="more"></a><p>This post will be split into below sections:</p><ul><li>Quick intro</li><li>Objectives</li><li>Backtesting</li><li>Summary</li><li>Reference</li><li>Code Reference</li></ul><p>Here is the Chinese version of this post in case anyone is interested: <a href="https://www.joinquant.com/view/community/detail/30796">经典海龟策略-股票多标的-短线趋势长线追击双系统</a>.</p><h1 id="Quick-intro"><a href="#Quick-intro" class="headerlink" title="Quick intro"></a>Quick intro</h1><p>I’m going to piggyback the existing posts so I don’t have to repeat the lengthy history of turtle experiment here. You can quickly read through the below posts to get an idea of what turtle strategy is about:</p><ul><li><a href="https://analyzingalpha.com/turtle-trading">Analyzing alpha - turtle trading</a></li><li><a href="https://medium.com/datadriveninvestor/making-money-with-algo-trading-for-dummies-the-turtle-trading-agent-3b1febe685df">Medium reading - turtle trading</a></li></ul><p>In short, the turtle strategy is a momentum strategy that uses the <a href="https://www.investopedia.com/terms/d/donchianchannels.asp"><strong>Donchian channel</strong></a> as the indicator to buy when we spotted the bullish trend and to sell when the trend goes bearish. Turtle strategy also builds two similar systems to capture both strong and weak movements, along with an internal mechanism to manage the risk of loss of capital to 2% in one trading day.</p><h1 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h1><p>Implementing the turtle strategy is not a new thing to the quant industry. Therefore, I would like to instead experiment with a few additional things that might benefit the process of the quant research:</p><ul><li>Most of the quant strategies that you can see in the quant-trading backtest platforms scattered their function definitions and variables all over the places. I’m gonna adopt the <code>object-oriented programming</code> concept in this implementation to increase the reusability and readability of the code.</li><li>By instantiating the instance of <code>class TurtleSystemManager()</code>, we persist the data in this instance across the entire backtesting time span.</li><li>To decrease the complexity of the positions, capital, and available cash of these two systems in one algorithm trading script, we use <code>context.subportfolios</code> in JoinQuant to simplify the logic and codes.</li></ul><h1 id="Backtesting"><a href="#Backtesting" class="headerlink" title="Backtesting"></a>Backtesting</h1><p>The setup in my version of implementation are:</p><ul><li>Run every 15 minutes to calculate and inspect the trading signals</li><li>The stock pool updates each month with the latest fundamental data</li><li>The trading target in the original turtle strategy is the stock futures, but we’re looking at the stocks in China stock market. So we need to make several adjustments accordingly:<ul><li><strong>risk_ratio</strong><ul><li>The leverage_ratio in original turtle strategy is 10 while trading stock futures. Here we make it <strong>0.1</strong> so that our greatest loss per day is limited to 0.1%, and also we’re able to buy more stocks.</li></ul></li><li><strong>capacity_per_system</strong><ul><li>The stock pool that we update each month contains more than 20 stocks. As turtle strategy is about buying positions at several prices along with the price soar (vise versa in the sell/short side), we place a limit of maximum of 8 stocks per system to make sure we place our capital in the stocks we preferred other than spreading the capital in dozens of stocks.</li></ul></li></ul></li><li>We use <code>40-day moving average &gt; 200-day moving average</code> as the secondary trading signal to confirm the bullish trend.</li><li>Apply <a href="https://medium.com/@Weeknight_BTC/donchian-channels-catching-the-trend-with-the-four-week-rule-77032c6a2155">Donchian middle line</a> to replace the Donchian low watermark as the new exit signal.</li><li>As the China stock market policy prevents us from selling the positions that we buy on the same day, we apply another rule in our strategy that we need to hold the stock at least till the next available bar (which is the next day). See detail in <a href="https://www.joinquant.com/view/community/detail/b4843ea0026a466190f6f58b50eae50c">海龟策略应用在中国A股（股票）里的缺陷讨论（按分钟回测）</a>.</li></ul><p>And here are the results of the backtesting of the turtle strategy:</p><h2 id="Backtest-1"><a href="#Backtest-1" class="headerlink" title="Backtest 1"></a>Backtest 1</h2><p><strong>Setup:</strong><br>Run the strategy once per day, and no specific sorting rules in the stock pool.</p><p><strong>Result:</strong><br><img data-src="/2020/12/26/2020-12-26-turtle-strategy/daily.png" class="" width="600"></p><p><strong>Comment:</strong><br>Ummm… The performance is fairly poor but expected. We trade only once per day on the signal without monitoring the price movement for the rest of the day. It is pretty much like you buy a stock when you see the right price on the TV, and then you go play with your cats and dogs until the next day. If any trader can make money like this, anyone on earth can be a trader and no one lose money in the market.</p><h2 id="Backtest-2"><a href="#Backtest-2" class="headerlink" title="Backtest 2"></a>Backtest 2</h2><p><strong>Setup:</strong><br>Run every 15 minutes, no specific sorting rules in the stock pool, and use <code>daily</code> close price to build the 40-day and 200-day moving average.</p><p><strong>Result:</strong><br><img data-src="/2020/12/26/2020-12-26-turtle-strategy/15m+40MA&200MA(daily).png" class="" width="600"></p><p><strong>Comment:</strong><br>The risk control is stronger when you monitor the stock movements every 15 minutes, and you’ll be able to control the daily loss within <code>2N</code> as instructed in the turtle experiment. As for the upward trend, the 15-minute interval also helps the program more accurately capture the entry signal to gain profit. However, the log messages also reveal that there are several times that you won’t be able to close your positions on the day. This represents that your position is exposed outside the risk control management system, causing a tremendous loss when the stock price dropping.</p><h2 id="Backtest-3"><a href="#Backtest-3" class="headerlink" title="Backtest 3"></a>Backtest 3</h2><p><strong>Setup:</strong><br>Run every 15 minutes, no specific sorting rules in the stock pool, and use <code>15-minute</code> close price to build the 40-day and 200-day moving average.</p><p><strong>Result:</strong><br></p><p><strong>Comment:</strong><br>Urgh….. I thought if I increase the granularity of the secondary indicator (40MA &gt; 200MA) from 1 day to 15 minutes, the more accurate entry signals and more profit would be generated. By looking at the diagrams below, more signals do generate as the available cash is lower in the 15-minute scenario.<br><img data-src="/2020/12/26/2020-12-26-turtle-strategy/day_and_min_compare.png" class="" width="600"><br>However, from the log messages you’ll notice that due to the limitation of the China stock market mentioned above, that there are risks that you buy the stock in the morning but things turned sour in the afternoon. Then all you can do is to look at the price go south and sweating all over your face. So we can kind of concluding that using <code>daily</code> close price would be a mean of <strong>smoothing</strong> the data to avoid the zig-zag on price movement.</p><h2 id="Backtest-4"><a href="#Backtest-4" class="headerlink" title="Backtest 4"></a>Backtest 4</h2><p><strong>Setup:</strong><br>Run every 15 minutes, sort and rank the stock pool monthly, and use <code>daily</code> close price to build the 40-day and 200-day moving average.</p><p><strong>Result:</strong><br><img data-src="/2020/12/26/2020-12-26-turtle-strategy/15m+40MA&200MA(daily)+stockpicking.png" class="" width="600"></p><p><strong>Comment:</strong><br>According to what has been described in the book of turtle strategy and the characteristics of volatility of future itself, I sorted and ranked the stocks in Shanghai Shenzhen 300 index in order to identify the stocks that have higher profitability than the others. The rules and the factors that I used are as follow:</p><ul><li><strong>goods_sale_and_service_to_revenue</strong>: Of course the sales revenue should represent a higher percentage in the total revenue income, indicating the major business is doing great.</li><li><strong>peg_ratio</strong>: A ratio to replace the traditional pe_ratio as Peter Lynch suggested. We’re looking at under-estimated stocks(omitting the stocks that peg_ratio is negative).</li><li><strong>debt_to_equity_ratio</strong>: The less debt the better.</li><li><strong>FCF (Free Cash Flow)</strong>: The more free cash flow the better.</li><li><strong>turnover_ratio</strong>: Turtle strategy suggests us to target the markets that have a higher turnover ratio as in essence, turtle strategy is still a momentum strategy that looks for stocks that have high liquidity.</li><li><strong>pb_ratio</strong>: Also, we need to find stocks that are underestimated.</li></ul><p>I was hoping that my petty trick would work and make the portfolio return better off. Sadly, it didn’t.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Even though the backtesting results above are not promising nor profitable for us to proceed to live trading, the objectives of this experiment have been achieved. We can use an object-oriented programming way of coding style inside these backtesting platforms. By doing so, the code can be reused when we implement our own automatic trading script later, reducing the time to rewrite everything the second time.</p><p>Other than that, we have also identified some limitations of running turtle strategy in the China stock market:</p><ol><li>The China stock market has the policy that restricts day-trading (selling the stocks that you purchased that day), leaving the risk of our positions uncontrolled.</li><li>One lot in China stock market represents 100 shares. Any number of shares that are under 100 are not able to be purchased. This would raise the bar of purchasing stocks whose price are higher as we need to relocate our capital to several stocks in the strategy.</li><li>Monitoring and trading several stocks in one turtle strategy is not preferable since it increases the complexity of managing positions during both bullish and bearish trend.</li></ol><p>But there are other thoughts that we still can extend and develop upon the turtle strategy we built:</p><ol><li>We can see that the Donchian channel in turtle strategy is a lag indicator, meaning the momentum might have already passed when our indicators tell us to buy or sell. Therefore we might be able to switch to another indicator such as MACD or RSI so that we can spot the buy/sell opportunities in a quicker fashion.</li><li>We can also reverse the signals to buy when we see sell signals and to sell when we see buy signals. This means that we’re going to use the turtle strategy as a <code>mean reversion strategy</code> instead of the original <code>momentum strategy</code>.</li></ol><p>To summarize, this strategy is not going toward the live trading stage in the short run. The code can only be used as a template or reference for anyone here to implement their version of the turtle system by overwriting the detail in each class function.</p><p>Enjoy! Cheers!</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://www.joinquant.com/post/1401">【量化课堂】海龟策略</a></li><li><a href="https://www.joinquant.com/view/community/detail/284a9688a58e0112b3bad8c1283548bc">海龟策略精讲</a></li><li><a href="https://github.com/mikelhsia/quantitative-research/files/5650936/the_original_turtle_trading_rules.pdf">The Original Turtle Trading Rules</a></li><li><a href="https://www.businessinsider.com/turtle-trading-rules-trend-following-investing-based-on-20-amp-55-day-highs-2011-8">Turtle trading rules trend-following investing based on 20 amp 55-day highs</a></li><li><a href="https://baijiahao.baidu.com/s?id=1672154028841339288&amp;wfr=spider&amp;for=pc">唐奇安通道</a></li><li><a href="https://zhuanlan.zhihu.com/p/99266983">增强版唐奇安通道策略</a></li></ul><h1 id="Code-Reference"><a href="#Code-Reference" class="headerlink" title="Code Reference"></a>Code Reference</h1><details>    <summary>Click here if you want to checkout the source code</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inspired from: https://www.joinquant.com/post/1401</span></span><br><span class="line"><span class="comment">#                and https://www.joinquant.com/view/community/detail/284a9688a58e0112b3bad8c1283548bc</span></span><br><span class="line"><span class="comment"># 标题：Turtle Strategy that monitors multiple stocks</span></span><br><span class="line"><span class="comment"># 作者：Michael Hsia</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> talib</span><br><span class="line"><span class="keyword">from</span> prettytable <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line">enable_profile()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChinaMarketHelper</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">normalize_position</span>(<span class="params">self, position</span>):</span></span><br><span class="line">        <span class="keyword">return</span> int(position / <span class="number">100</span>) * <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurtleSystemManager</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, short_in_date=<span class="number">20</span>, short_out_date=<span class="number">10</span>, long_in_date=<span class="number">55</span>, long_out_date=<span class="number">20</span></span>):</span></span><br><span class="line">        self.system = [</span><br><span class="line">            TurtleSystem(short_in_date, short_out_date, <span class="literal">True</span>),</span><br><span class="line">            TurtleSystem(long_in_date, long_out_date, <span class="literal">False</span>)</span><br><span class="line">        ]</span><br><span class="line">        <span class="comment"># Capacity in portfolio</span></span><br><span class="line">        self.capacity_per_system = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_turtle_params</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        <span class="keyword">for</span> pindex <span class="keyword">in</span> range(len(context.subportfolios)):</span><br><span class="line">            total_value = context.subportfolios[pindex].total_value</span><br><span class="line">            <span class="keyword">for</span> symbol <span class="keyword">in</span> context.subportfolios[pindex].long_positions.keys():</span><br><span class="line">                self.system[pindex].update_turtle_params_by_symbol(symbol, total_value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_running</span>(<span class="params">self, context, symbol, current_price</span>):</span></span><br><span class="line">        <span class="keyword">for</span> pindex <span class="keyword">in</span> range(len(context.subportfolios)):</span><br><span class="line">            total_value = context.subportfolios[pindex].total_value</span><br><span class="line">            donchian_high_price = max(attribute_history(symbol, self.system[pindex].in_date, <span class="string">&#x27;1d&#x27;</span>, (<span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;close&#x27;</span>))[<span class="string">&#x27;close&#x27;</span>])</span><br><span class="line">            donchian_low_price = min(attribute_history(symbol, self.system[pindex].out_date, <span class="string">&#x27;1d&#x27;</span>, (<span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;close&#x27;</span>))[<span class="string">&#x27;close&#x27;</span>])</span><br><span class="line">            donchian_mid_price = (donchian_high_price + donchian_low_price) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> symbol <span class="keyword">not</span> <span class="keyword">in</span> context.subportfolios[pindex].long_positions.keys():</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Limit the number of assets in our portfolio to make sure we&#x27;re able to invest enough money to complete one turtle strategy cycle</span></span><br><span class="line">                <span class="keyword">if</span> len(context.subportfolios[pindex].long_positions) &gt;= self.capacity_per_system:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                ma_40 = mean(attribute_history(symbol, <span class="number">40</span>, <span class="string">&#x27;1d&#x27;</span>, (<span class="string">&#x27;close&#x27;</span>))[<span class="string">&#x27;close&#x27;</span>])</span><br><span class="line">                ma_200 = mean(attribute_history(symbol, <span class="number">200</span>, <span class="string">&#x27;1d&#x27;</span>, (<span class="string">&#x27;close&#x27;</span>))[<span class="string">&#x27;close&#x27;</span>])</span><br><span class="line"></span><br><span class="line">                self.system[pindex].update_turtle_params_by_symbol(symbol, total_value)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (current_price &gt; donchian_high_price) <span class="keyword">and</span> (ma_40 &gt; ma_200):</span><br><span class="line">                    <span class="keyword">if</span> pindex == <span class="number">1</span>:</span><br><span class="line">                        <span class="comment"># Reset previous_state_winning status</span></span><br><span class="line">                        self.system[<span class="number">0</span>].previous_state_winning.discard(symbol)</span><br><span class="line"></span><br><span class="line">                    self.system[pindex].market_in(</span><br><span class="line">                        symbol,</span><br><span class="line">                        pindex</span><br><span class="line">                    )</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                avg_cost = context.subportfolios[pindex].long_positions[symbol].acc_avg_cost</span><br><span class="line">                previous_purchased_price = self.system[pindex].get_previous_purchased_price_by_symbol(symbol)</span><br><span class="line">                system_N = self.system[pindex].get_N_from_turtle_params_by_symbol(symbol)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># The reason to add this block has been described in this article</span></span><br><span class="line">                <span class="comment"># https://www.joinquant.com/view/community/detail/30694</span></span><br><span class="line">                <span class="comment"># Clean up the remaining position in the next possible bar</span></span><br><span class="line">                current_position = context.subportfolios[pindex].long_positions[symbol].total_amount + context.subportfolios[pindex].long_positions[symbol].locked_amount</span><br><span class="line">                <span class="keyword">if</span> (current_position != <span class="number">0</span>) <span class="keyword">and</span> (self.system[pindex].system_positions[symbol][<span class="string">&#x27;unit&#x27;</span>] == <span class="number">0</span>):</span><br><span class="line">                    order_target(symbol, <span class="number">0</span>, style=MarketOrderStyle(), pindex=pindex)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 每上涨0.5N，加仓一个单元</span></span><br><span class="line">                <span class="keyword">if</span> current_price &gt;= (previous_purchased_price + <span class="number">0.5</span> * system_N):</span><br><span class="line">                    <span class="keyword">if</span> pindex == <span class="number">1</span>:</span><br><span class="line">                        <span class="comment"># Reset previous_state_winning status if system 2 market in or market add</span></span><br><span class="line">                        self.system[<span class="number">0</span>].previous_state_winning.discard(symbol)</span><br><span class="line"></span><br><span class="line">                    self.system[pindex].market_add(</span><br><span class="line">                        symbol,</span><br><span class="line">                        pindex</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 若当前价格低于前out_date天的收盘价的最小值, 则卖掉所有持仓</span></span><br><span class="line">                <span class="keyword">if</span> current_price &lt; donchian_mid_price:</span><br><span class="line">                    ret = self.system[pindex].market_out(</span><br><span class="line">                        symbol,</span><br><span class="line">                        pindex</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> ret == <span class="literal">True</span>:</span><br><span class="line">                        <span class="keyword">if</span> current_price &gt;= avg_cost:</span><br><span class="line">                            self.system[pindex].previous_state_winning.add(symbol)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            self.system[pindex].previous_state_winning.discard(symbol)</span><br><span class="line">                        <span class="comment"># Don&#x27;t need to run stop loss as this position has already been removed</span></span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 若当前价格低于 2N，则开始止损</span></span><br><span class="line">                <span class="keyword">if</span> (current_price - previous_purchased_price) &lt; (<span class="number">-2</span> * system_N):</span><br><span class="line">                    ret = self.system[pindex].market_stop_loss(</span><br><span class="line">                        symbol,</span><br><span class="line">                        pindex</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> ret == <span class="literal">True</span>:</span><br><span class="line">                        self.system[pindex].previous_state_winning.discard(symbol)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TurtleSystem</span>():</span></span><br><span class="line">    TURTLE_N = <span class="string">&#x27;N&#x27;</span></span><br><span class="line">    TURTLE_DOLLAR_VOLATILITY = <span class="string">&#x27;DOLLAR_VOLATILITY&#x27;</span></span><br><span class="line">    TURTLE_UNIT = <span class="string">&#x27;UNIT&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, in_date, out_date, ignore_state=False</span>):</span></span><br><span class="line">        self.in_date = in_date</span><br><span class="line">        self.out_date = out_date</span><br><span class="line">        self.ignore_state = ignore_state</span><br><span class="line">        self.system_positions = &#123;&#125;</span><br><span class="line">        self.turtle_params = &#123;&#125;</span><br><span class="line">        self.previous_state_winning = set()</span><br><span class="line">        self.ignore_state = <span class="literal">True</span></span><br><span class="line">        self.dollars_per_share = <span class="number">1</span>          <span class="comment"># dollars_per_share是标的股票每波动一个最小单位，1手股票的总价格变化量。</span></span><br><span class="line">                                            <span class="comment"># 在国内最小变化量是0.01元，所以就是0.01 × 100=1</span></span><br><span class="line">        self.number_days = <span class="number">20</span>               <span class="comment"># 计算N值的天数</span></span><br><span class="line">        self.unit_limit = <span class="number">4</span>                 <span class="comment"># 4 for the lnog direction</span></span><br><span class="line">        self.risk_ratio = <span class="number">0.1</span>               <span class="comment"># 为了尽量买到更多股票，我把风险比率设为了0.1（因为海龟原</span></span><br><span class="line">                                            <span class="comment"># 来是应用在美国的期货上的，10倍杠杆，A股没杠杆，所以把风</span></span><br><span class="line">                                            <span class="comment"># 险比率设为0.1，这样用于单个品种的买卖资金就和期货一样了），</span></span><br><span class="line">                                            <span class="comment"># 也就是说，按照平均波动幅度的每天最大亏损是0.1%</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">market_in</span>(<span class="params">self, symbol, pindex</span>):</span></span><br><span class="line">        <span class="comment"># System 1 breakout entry signals would be ignored if the last breakout would have resulted in a winning trade</span></span><br><span class="line">        <span class="comment"># All breakouts for System 2 would be taken whether the previous breakout had been a winner or not.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> self.ignore_state) <span class="keyword">and</span> (symbol <span class="keyword">in</span> self.previous_state_winning):</span><br><span class="line">            <span class="comment"># 假如是系统1，就要看之前的trade是win的话，本次就不进入市场了</span></span><br><span class="line">            self.remove_turtle_params_by_symbol(symbol)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;[System &#123;&#125;] - [&#123;&#125;] - 入仓&quot;</span>.format(pindex, symbol))</span><br><span class="line">        self.add_position_by_symbol(</span><br><span class="line">            symbol,</span><br><span class="line">            pindex</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">market_add</span>(<span class="params">self, symbol, pindex</span>):</span></span><br><span class="line">        log.info(<span class="string">&quot;[System &#123;&#125;] - [&#123;&#125;] - 加仓&quot;</span>.format(pindex, symbol))</span><br><span class="line">        self.add_position_by_symbol(symbol, pindex)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">market_out</span>(<span class="params">self, symbol, pindex</span>):</span></span><br><span class="line">        log.info(<span class="string">&quot;[System &#123;&#125;] - [&#123;&#125;] - 减仓&quot;</span>.format(pindex, symbol))</span><br><span class="line">        <span class="keyword">return</span> self.reduce_position_by_symbol(</span><br><span class="line">            symbol,</span><br><span class="line">            pindex</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">market_stop_loss</span>(<span class="params">self, symbol, pindex</span>):</span></span><br><span class="line">        log.debug(<span class="string">&#x27;[System &#123;&#125;] - [&#123;&#125;] 开始止损&#x27;</span>.format(pindex, symbol))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.reduce_position_by_symbol(</span><br><span class="line">            symbol,</span><br><span class="line">            pindex</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_position_by_symbol</span>(<span class="params">self, symbol, pindex</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.system_positions.get(symbol, <span class="literal">None</span>) == <span class="literal">None</span>:</span><br><span class="line">            self.system_positions[symbol] = &#123;&#125;</span><br><span class="line">            self.system_positions[symbol][<span class="string">&#x27;unit&#x27;</span>] = <span class="number">0</span></span><br><span class="line">            self.system_positions[symbol][<span class="string">&#x27;previous_purchased_price&#x27;</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.system_positions[symbol][<span class="string">&#x27;unit&#x27;</span>] &gt;= self.unit_limit:</span><br><span class="line">            <span class="comment"># Reaching unit limit</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        position = self.get_unit_from_turtle_params_by_symbol(symbol)</span><br><span class="line">        position = ChinaMarketHelper.normalize_position(position * self.risk_ratio)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> position &lt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        res = order(symbol, position, style=MarketOrderStyle(), pindex=pindex)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> res.status <span class="keyword">not</span> <span class="keyword">in</span> [OrderStatus.canceled, OrderStatus.rejected]:</span><br><span class="line">                self.system_positions[symbol][<span class="string">&#x27;unit&#x27;</span>] += <span class="number">1</span></span><br><span class="line">                self.system_positions[symbol][<span class="string">&#x27;previous_purchased_price&#x27;</span>] = res.price</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                log.warning(<span class="string">&#x27;[System &#123;&#125;] - [&#123;&#125;] order failed: &#123;&#125;.&#x27;</span>.format(pindex, symbol, res))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reduce_position_by_symbol</span>(<span class="params">self, symbol, pindex</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.system_positions.get(symbol, <span class="literal">None</span>) == <span class="literal">None</span>:</span><br><span class="line">            log.warning(<span class="string">&#x27;Reduce position failed. It does not exist&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        res = order_target(symbol, <span class="number">0</span>, style=MarketOrderStyle(), pindex=pindex)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> res.status <span class="keyword">not</span> <span class="keyword">in</span> [OrderStatus.canceled, OrderStatus.rejected]:</span><br><span class="line">                self.system_positions[symbol][<span class="string">&#x27;unit&#x27;</span>] = <span class="number">0</span></span><br><span class="line">                <span class="comment"># https://www.joinquant.com/view/community/detail/30694</span></span><br><span class="line">                <span class="comment"># self.remove_position_by_symbol_if_empty(symbol)</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                log.warning(<span class="string">&#x27;[System &#123;&#125;] - [&#123;&#125;] order failed: &#123;&#125;.&#x27;</span>.format(pindex, symbol, res))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_position_by_symbol_if_empty</span>(<span class="params">self, symbol</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.system_positions.get(symbol, <span class="literal">None</span>) == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.system_positions[symbol][<span class="string">&#x27;unit&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">            self.system_positions.pop(symbol)</span><br><span class="line">            self.remove_turtle_params_by_symbol(symbol)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        log.warning(<span class="string">&#x27;Unit of [&#123;&#125;] is not empty&#x27;</span>.format(symbol))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_previous_purchased_price_by_symbol</span>(<span class="params">self, symbol</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.system_positions.get(symbol, <span class="literal">None</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27; [&#123;&#125;] - System position param does not exist&#x27;</span>.format(symbol))</span><br><span class="line">        <span class="keyword">if</span> self.system_positions[symbol].get(<span class="string">&#x27;previous_purchased_price&#x27;</span>, <span class="literal">None</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;[&#123;&#125;] - N does not exist&#x27;</span>.format(symbol))</span><br><span class="line">        <span class="keyword">return</span> self.system_positions[symbol][<span class="string">&#x27;previous_purchased_price&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_turtle_params_by_symbol</span>(<span class="params">self, symbol, account_value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_turtle_params_existed_by_symbol(symbol):</span><br><span class="line">            self.turtle_params[symbol] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        df = attribute_history(</span><br><span class="line">            count=self.number_days + <span class="number">1</span>,</span><br><span class="line">            unit=<span class="string">&#x27;1d&#x27;</span>,</span><br><span class="line">            fields=[<span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;high&#x27;</span>],</span><br><span class="line">            security=symbol,</span><br><span class="line">            df=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        df[<span class="string">&#x27;pdc&#x27;</span>] = df[<span class="string">&#x27;close&#x27;</span>].shift(<span class="number">1</span>)</span><br><span class="line">        df[<span class="string">&#x27;h_l&#x27;</span>] = (df[<span class="string">&#x27;high&#x27;</span>] - df[<span class="string">&#x27;low&#x27;</span>]).abs()</span><br><span class="line">        df[<span class="string">&#x27;h_pdc&#x27;</span>] = (df[<span class="string">&#x27;high&#x27;</span>] - df[<span class="string">&#x27;pdc&#x27;</span>]).abs()</span><br><span class="line">        df[<span class="string">&#x27;pdc_l&#x27;</span>] = (df[<span class="string">&#x27;pdc&#x27;</span>] - df[<span class="string">&#x27;low&#x27;</span>]).abs()</span><br><span class="line">        N = df[[<span class="string">&#x27;h_l&#x27;</span>, <span class="string">&#x27;h_pdc&#x27;</span>, <span class="string">&#x27;pdc_l&#x27;</span>]].max(axis=<span class="number">1</span>)[<span class="number">1</span>:].mean()</span><br><span class="line"></span><br><span class="line">        high = df[<span class="string">&#x27;high&#x27;</span>]</span><br><span class="line">        low = df[<span class="string">&#x27;low&#x27;</span>]</span><br><span class="line">        pdc = df[<span class="string">&#x27;close&#x27;</span>]</span><br><span class="line">        <span class="keyword">del</span> df</span><br><span class="line"></span><br><span class="line">        self.turtle_params[symbol][self.TURTLE_N] = talib.ATR(high, low, pdc, timeperiod=self.number_days)[<span class="number">-1</span>]</span><br><span class="line">        self.turtle_params[symbol][self.TURTLE_DOLLAR_VOLATILITY] = self.dollars_per_share * self.turtle_params[symbol][self.TURTLE_N]</span><br><span class="line">        self.turtle_params[symbol][self.TURTLE_UNIT] = (account_value * <span class="number">0.01</span>) / self.turtle_params[symbol][self.TURTLE_DOLLAR_VOLATILITY]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_N_from_turtle_params_by_symbol</span>(<span class="params">self, symbol</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_turtle_params_existed_by_symbol(symbol):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;N of [&#123;&#125;] does not exist&#x27;</span>.format(symbol))</span><br><span class="line">        <span class="keyword">if</span> self.turtle_params[symbol].get(self.TURTLE_N, <span class="literal">None</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;N of [&#123;&#125;] does not exist&#x27;</span>.format(symbol))</span><br><span class="line">        <span class="keyword">return</span> self.turtle_params[symbol][self.TURTLE_N]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_unit_from_turtle_params_by_symbol</span>(<span class="params">self, symbol</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_turtle_params_existed_by_symbol(symbol):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;N of [&#123;&#125;] does not exist&#x27;</span>.format(symbol))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.turtle_params[symbol][self.TURTLE_UNIT]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_turtle_params_existed_by_symbol</span>(<span class="params">self, symbol</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.turtle_params.get(symbol, <span class="literal">None</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_turtle_params_by_symbol</span>(<span class="params">self, symbol</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.is_turtle_params_existed_by_symbol(symbol):</span><br><span class="line">            self.turtle_params.pop(symbol)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">================================================================================</span></span><br><span class="line"><span class="string">总体回测前</span></span><br><span class="line"><span class="string">================================================================================</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">context</span>):</span></span><br><span class="line">    g.security = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    set_option(<span class="string">&#x27;use_real_price&#x27;</span>,<span class="literal">True</span>) <span class="comment">#用真实价格交易</span></span><br><span class="line">    set_option(<span class="string">&quot;avoid_future_data&quot;</span>, <span class="literal">True</span>) <span class="comment">#避免使用未来数据</span></span><br><span class="line">    log.set_level(<span class="string">&#x27;order&#x27;</span>,<span class="string">&#x27;error&#x27;</span>) <span class="comment"># 设置报错等级</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># System 1 cash</span></span><br><span class="line">    ratio_system1 = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set up two separate systems:</span></span><br><span class="line">    <span class="comment"># subportfolios[0] is system 1 in the turtle strategy</span></span><br><span class="line">    <span class="comment"># and subportfolios[1] is the system 2</span></span><br><span class="line">    set_subportfolios(</span><br><span class="line">        [SubPortfolioConfig(cash=context.portfolio.starting_cash * ratio_system1, type=<span class="string">&#x27;stock&#x27;</span>),</span><br><span class="line">        SubPortfolioConfig(cash=context.portfolio.starting_cash * (<span class="number">1</span> - ratio_system1), type=<span class="string">&#x27;stock&#x27;</span>)]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    SHORT_IN_DATE = <span class="number">20</span></span><br><span class="line">    SHORT_OUT_DATE = <span class="number">10</span></span><br><span class="line">    LONG_IN_DATE = <span class="number">55</span></span><br><span class="line">    LONG_OUT_DATE = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    g.turtle = TurtleSystemManager(</span><br><span class="line">        SHORT_IN_DATE,</span><br><span class="line">        SHORT_OUT_DATE,</span><br><span class="line">        LONG_IN_DATE,</span><br><span class="line">        LONG_OUT_DATE,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">================================================================================</span></span><br><span class="line"><span class="string">每天开盘前</span></span><br><span class="line"><span class="string">================================================================================</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_trading_start</span>(<span class="params">context</span>):</span></span><br><span class="line">    set_slip_fee(context)</span><br><span class="line">    set_tradable_stocks(context)</span><br><span class="line">    g.turtle.update_turtle_params(context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_slip_fee</span>(<span class="params">context</span>):</span></span><br><span class="line">    set_slippage(FixedSlippage(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    set_order_cost(OrderCost(open_tax=<span class="number">0</span>, close_tax=<span class="number">0.001</span>, open_commission=<span class="number">0.0003</span>, close_commission=<span class="number">0.0003</span>, close_today_commission=<span class="number">0</span>, min_commission=<span class="number">5</span>), type=<span class="string">&#x27;stock&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_tradable_stocks</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="comment"># Run every month</span></span><br><span class="line">    <span class="keyword">if</span> context.current_dt.day == <span class="number">1</span> <span class="keyword">or</span> g.security <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Test one scenario</span></span><br><span class="line">        test = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> test:</span><br><span class="line">            <span class="comment"># 上证50</span></span><br><span class="line">            g.security = get_index_stocks(<span class="string">&#x27;000016.XSHG&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># Get yesterday&#x27;s datetime string</span></span><br><span class="line">            date = (context.current_dt - timedelta(days=<span class="number">1</span>)).strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            sh300 = get_index_stocks(normalize_code(<span class="string">&#x27;000300.sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">            sh300_df = get_fundamentals(</span><br><span class="line">                query(</span><br><span class="line">                    valuation.code,</span><br><span class="line">                    valuation.pe_ratio,</span><br><span class="line">                    valuation.turnover_ratio,</span><br><span class="line">                    balance.total_owner_equities,</span><br><span class="line">                    balance.total_sheet_owner_equities,</span><br><span class="line">                    cash_flow.cash_equivalent_increase,</span><br><span class="line">                    cash_flow.cash_equivalents_at_beginning,</span><br><span class="line">                    cash_flow.cash_and_equivalents_at_end,</span><br><span class="line">                    indicator.goods_sale_and_service_to_revenue,</span><br><span class="line">                    indicator.inc_net_profit_year_on_year,</span><br><span class="line">                    valuation.pb_ratio,</span><br><span class="line">                ).filter(</span><br><span class="line">                    valuation.code.in_(sh300),</span><br><span class="line">                    valuation.pe_ratio &gt; <span class="number">0</span>,</span><br><span class="line">                    indicator.inc_net_profit_year_on_year &gt; <span class="number">0</span></span><br><span class="line">                ),</span><br><span class="line">                date=date</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            sh300_df = sh300_df.dropna()</span><br><span class="line">            sh300_df[<span class="string">&#x27;peg_ratio&#x27;</span>] = sh300_df.pe_ratio / sh300_df.inc_net_profit_year_on_year</span><br><span class="line">            sh300_df[<span class="string">&#x27;debt_to_equity_ratio&#x27;</span>] = ((sh300_df.total_sheet_owner_equities - sh300_df.total_owner_equities)/sh300_df.total_owner_equities)</span><br><span class="line">            sh300_df[<span class="string">&#x27;FCF&#x27;</span>] = (sh300_df.cash_and_equivalents_at_end - sh300_df.cash_equivalents_at_beginning)</span><br><span class="line"></span><br><span class="line">            cols = [<span class="string">&#x27;goods_sale_and_service_to_revenue&#x27;</span>, <span class="string">&#x27;peg_ratio&#x27;</span>, <span class="string">&#x27;debt_to_equity_ratio&#x27;</span>, <span class="string">&#x27;FCF&#x27;</span>, <span class="string">&#x27;turnover_ratio&#x27;</span>, <span class="string">&#x27;pb_ratio&#x27;</span>]</span><br><span class="line">            sh300_df.index = sh300_df.code</span><br><span class="line">            sh300_df.index.name = <span class="string">&#x27;Symbol&#x27;</span></span><br><span class="line">            sh300_df = sh300_df[cols]</span><br><span class="line"></span><br><span class="line">            sh300_df[<span class="string">&#x27;goods_sale_and_service_to_revenue&#x27;</span>] = sh300_df[<span class="string">&#x27;goods_sale_and_service_to_revenue&#x27;</span>].rank(ascending=<span class="literal">False</span>)</span><br><span class="line">            sh300_df[<span class="string">&#x27;peg_ratio&#x27;</span>] = sh300_df[<span class="string">&#x27;peg_ratio&#x27;</span>].rank(ascending=<span class="literal">True</span>)</span><br><span class="line">            sh300_df[<span class="string">&#x27;debt_to_equity_ratio&#x27;</span>] = sh300_df[<span class="string">&#x27;debt_to_equity_ratio&#x27;</span>].rank(ascending=<span class="literal">True</span>)</span><br><span class="line">            sh300_df[<span class="string">&#x27;FCF&#x27;</span>] = sh300_df[<span class="string">&#x27;FCF&#x27;</span>].rank(ascending=<span class="literal">False</span>)</span><br><span class="line">            sh300_df[<span class="string">&#x27;turnover_ratio&#x27;</span>] = sh300_df[<span class="string">&#x27;turnover_ratio&#x27;</span>].rank(ascending=<span class="literal">False</span>)</span><br><span class="line">            sh300_df[<span class="string">&#x27;pb_ratio&#x27;</span>] = sh300_df[<span class="string">&#x27;pb_ratio&#x27;</span>].rank(ascending=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            zscore = sh300_df.sum(axis=<span class="number">1</span>).sort_values(ascending=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            g.security = zscore.index.tolist()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> pindex <span class="keyword">in</span> range(len(context.subportfolios)):</span><br><span class="line">            g.security += context.subportfolios[pindex].long_positions.keys()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Remove duplicated positions from the list</span></span><br><span class="line">        g.security = list(set(g.security))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">================================================================================</span></span><br><span class="line"><span class="string">每天交易时</span></span><br><span class="line"><span class="string">================================================================================</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 按分钟回测</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_data</span>(<span class="params">context, data</span>):</span></span><br><span class="line">    <span class="comment"># 15 minutes timer</span></span><br><span class="line">    timer = <span class="number">15</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> context.current_dt.minute % timer != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> (context.current_dt.hour == <span class="number">9</span>) <span class="keyword">and</span> (context.current_dt.minute == <span class="number">30</span>):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> sec <span class="keyword">in</span> g.security:</span><br><span class="line">        current_data = get_current_data()</span><br><span class="line">        <span class="keyword">if</span> current_data[sec].paused <span class="keyword">or</span> current_data[sec].is_st:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        current_price = data[sec].price</span><br><span class="line">        g.turtle.start_running(context, sec, current_price)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">================================================================================</span></span><br><span class="line"><span class="string">每天收盘后</span></span><br><span class="line"><span class="string">================================================================================</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_trading_end</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="keyword">for</span> pindex <span class="keyword">in</span> range(len(context.subportfolios)):</span><br><span class="line">        <span class="keyword">if</span> pindex == <span class="number">0</span>:</span><br><span class="line">            record(cash1=context.subportfolios[pindex].available_cash)</span><br><span class="line">            record(value1=context.subportfolios[pindex].total_value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            record(cash2=context.subportfolios[pindex].available_cash)</span><br><span class="line">            record(value2=context.subportfolios[pindex].total_value)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">================================================================================</span></span><br><span class="line"><span class="string">策略结束后</span></span><br><span class="line"><span class="string">================================================================================</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_strategy_end</span>(<span class="params">context</span>):</span></span><br><span class="line">    x = PrettyTable([<span class="string">&#x27;System&#x27;</span>, <span class="string">&#x27;TotalValue&#x27;</span>, <span class="string">&#x27;Avail Cash&#x27;</span>, <span class="string">&#x27;Number of positions&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> pindex <span class="keyword">in</span> range(len(context.subportfolios)):</span><br><span class="line">        x.add_row([</span><br><span class="line">            <span class="string">f&#x27;System <span class="subst">&#123;pindex&#125;</span>&#x27;</span>,</span><br><span class="line">            context.subportfolios[pindex].total_value,</span><br><span class="line">            context.subportfolios[pindex].available_cash,</span><br><span class="line">            len(context.subportfolios[pindex].long_positions)</span><br><span class="line">        ])</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Last post in 2020. See you, 2020. See you, in 2021.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&quot;/2020/12/26/2020-12-26-turtle-strategy/cover.jpg&quot; class=&quot;&quot; width=&quot;400&quot;&gt;
&lt;p&gt;The Turtle Traders experiment was conducted in the early 1980s by &lt;strong&gt;Richard Dennis&lt;/strong&gt; and &lt;strong&gt;William Eckhardt&lt;/strong&gt; to see whether anyone could be taught how to make money in trading. Therefore, the trading strategy that has been taught to these apprentices is named after this experiment as “&lt;strong&gt;Turtle Strategy&lt;/strong&gt;“.&lt;/p&gt;
&lt;p&gt;In this post, we’re going to quickly go through the turtle strategy itself, and I’m going to experiment with a few things against the backtesting platform that I’m checking out recently: &lt;a href=&quot;https://joinquant.com&quot;&gt;&lt;strong&gt;JoinQuant&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="Quantitative Trading" scheme="http://mikelhsia.github.io/categories/Quantitative-Trading/"/>
    
    
    <category term="Strategy" scheme="http://mikelhsia.github.io/tags/Strategy/"/>
    
    <category term="Momentum" scheme="http://mikelhsia.github.io/tags/Momentum/"/>
    
    <category term="Backtesting" scheme="http://mikelhsia.github.io/tags/Backtesting/"/>
    
  </entry>
  
  <entry>
    <title>【Cont.】 MACD strategy follow up report</title>
    <link href="http://mikelhsia.github.io/2020/12/12/2020-12-12-macd-strategy-follow-up-report/"/>
    <id>http://mikelhsia.github.io/2020/12/12/2020-12-12-macd-strategy-follow-up-report/</id>
    <published>2020-12-12T02:23:14.000Z</published>
    <updated>2020-12-13T02:38:57.978Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2020/12/12/2020-12-12-macd-strategy-follow-up-report/cover_perf.png" class="" width="400"><p>The above line chart shows how we have been doing on the <strong>enhanced</strong> <a href="https://mikelhsia.github.io/2020/10/10/2020-10-10-macd-strategy/#more"><strong>MACD strategy</strong></a> as of today (2020/12/11 EST).</p><p>It’s been 19 trading days since we’ve launched our automatic trading script to trade on TD Ameritrade on 2020/11/17. So far, we have accumulated ~6% of the total investment even with a huge dip on Dec 9th.</p><a id="more"></a><h1 id="MACD-strategy-performance-report-as-of-today"><a href="#MACD-strategy-performance-report-as-of-today" class="headerlink" title="MACD strategy performance report as of today"></a>MACD strategy performance report as of today</h1><div class="table-container"><table><thead><tr><th>-</th><th>Number</th></tr></thead><tbody><tr><td>Current position</td><td>10</td></tr><tr><td>Positive opening position</td><td>7 (out of 10)</td></tr><tr><td>Negative opening position</td><td>3 (out of 10)</td></tr><tr><td>Closed trade</td><td>1</td></tr><tr><td>Current portfolio total return</td><td>6.13%</td></tr></tbody></table></div><p> From the line chart below, you can tell the portfolio trend that we constructed is quite correlated with the trend of the <a href="https://www.nasdaq.com/solutions/nasdaq-index-data-cns">Nasdaq index (.IXIC)</a>. Meaning, we have a quite correlation with the Nasdaq index.</p><img data-src="/2020/12/12/2020-12-12-macd-strategy-follow-up-report/w_nasdaq.png" class="" width="400"><p>In the meantime, if you look at the Dow Jones Index and S&amp;P 500 Index, you’ll see we’re actually doubled in return as of today.<br><img data-src="/2020/12/12/2020-12-12-macd-strategy-follow-up-report/w_djia.png" class="" width="400"><br><img data-src="/2020/12/12/2020-12-12-macd-strategy-follow-up-report/w_s&p.png" class="" width="400"></p><p>Hence, I think we’re doing pretty good so far. Even though the market is still tumbling and the US government hesitated to pull up the economy stimulation for COVID-19, our MACD strategy is still doing ok. Stay tuned for the follow-up report on more detailed analysis until we get enough data to analyze.</p><h1 id="What-I-did"><a href="#What-I-did" class="headerlink" title="What I did"></a>What I did</h1><p>As we all know in <a href="https://mikelhsia.github.io/2020/11/10/2020-11-08-macd-strategy-implementation/#more">my previous article</a>, that Quantopian has disabled their entire service and switched their business to serve enterprise customers (<a href="https://factset.quantopian.com/">as in here</a>), I’ve been struggling to find a good substitution in my backtesting process.</p><p><strong>QuantConnect</strong> seems pretty solid and reliable, and its API documentation is very clear. Even though the way to use their APIs is very different from Quantopian and not intuitive to my sense, but it’s still ok to cope with. However, I’ve been spent days trying to run backtesting on QuantConnect, the speed is insanely slow even with VPN. In the end, I have to give up on it.</p><p>Then I see people also talking about <a href="https://www.quantrocket.com/"><strong>QuantRocket</strong></a>. It’s essentially a python library run inside docker. To run backtesting, you need to spin up this docker image on your local PC or laptop and connect to the docker container. I simply don’t like how it works and complicated. Plus I didn’t find useful API documentation on their website. So again, I gave it up.</p><p><strong>Python backtrader package</strong><br>This looks to me is the most promising solution that I can find so far. It is very flexible and easy to use. If you know python and happen to be a former Quantopian user, you’ll find a sense of familiarity with this python package. The <code>broker</code>, <code>strategy</code>, <code>data</code>, <code>analyzer</code>, <code>indicators</code> modules are very well written and easy to inherit then build upon it. Nevertheless, one single and the most crucial issue that I can’t resolve by myself, where it’s also not one of the issues that <code>backtrader</code> tries to solve: <strong>data source</strong>.</p><p>Several issues spotted during the exploration <code>backtrader</code> module and I still yet to be able to address regarding ingesting data feed in backtrader:</p><ol><li>How to handle stocks that are delisted for good?</li><li>How to handle stocks that are delisted temporarily due to SEC’s command?</li><li>How to merge multiple stock pricing data that are different in the start and end date?</li></ol><p>I’ve been spending ~2 weeks but the progress is limited. Therefore, I turned to the local quantitative platform again since they’ve been existed for years: <a href="https://www.joinquant.com">JoinQuant</a>. This also means, now I’m switching back to China stock market and need to find another broker that has API supports. Maybe <a href="https://openapi.futunn.com/futu-api-doc/intro/opend.html#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D">Futuniuniu</a> in the near future.</p><h1 id="What-I’m-doing"><a href="#What-I’m-doing" class="headerlink" title="What I’m doing"></a>What I’m doing</h1><p>Right now I’m working on one of the conventional trading strategies from history on JoinQuant: <strong>Turtle strategy</strong>.</p><p>Here are a few articles about <strong>Turtle strategy</strong> itself and the history of it:</p><ul><li><a href="https://analyzingalpha.com/turtle-trading">Turtle Trading: History, Strategy &amp; Complete Rules</a></li><li><a href="https://www.businessinsider.com/turtle-trading-rules-trend-following-investing-based-on-20-amp-55-day-highs-2011-8">Turtle trading rules trend-following investing based on 20 amp 55-day highs</a></li></ul><p>It’s an interesting story and fun to read. Also, I believe there’s a lot of things that I can learn from rebuilding this strategy and put them into practice. Hopefully, I can present you with a turtle strategy that looks like:<br><img data-src="/2020/12/12/2020-12-12-macd-strategy-follow-up-report/turtle1.jpg" class="" width="250"></p><p>and not like:<br><img data-src="/2020/12/12/2020-12-12-macd-strategy-follow-up-report/turtle2.jpg" class="" width="250"></p><p>Cheers.</p>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2020/12/12/2020-12-12-macd-strategy-follow-up-report/cover_perf.png&quot; class=&quot;&quot; width=&quot;400&quot;&gt;
&lt;p&gt;The above line chart shows how we have been doing on the &lt;strong&gt;enhanced&lt;/strong&gt; &lt;a href=&quot;https://mikelhsia.github.io/2020/10/10/2020-10-10-macd-strategy/#more&quot;&gt;&lt;strong&gt;MACD strategy&lt;/strong&gt;&lt;/a&gt; as of today (2020/12/11 EST).&lt;/p&gt;
&lt;p&gt;It’s been 19 trading days since we’ve launched our automatic trading script to trade on TD Ameritrade on 2020/11/17. So far, we have accumulated ~6% of the total investment even with a huge dip on Dec 9th.&lt;/p&gt;</summary>
    
    
    
    <category term="Quantitative Trading" scheme="http://mikelhsia.github.io/categories/Quantitative-Trading/"/>
    
    
    <category term="Strategy" scheme="http://mikelhsia.github.io/tags/Strategy/"/>
    
    <category term="Momentum" scheme="http://mikelhsia.github.io/tags/Momentum/"/>
    
  </entry>
  
  <entry>
    <title>【How 2】 Vol. 3. How to produce a quality tradable securities for backtesting</title>
    <link href="http://mikelhsia.github.io/2020/11/26/2020-11-28-how-to-produce-a-quality-tradable-stock-set-for-backtesting/"/>
    <id>http://mikelhsia.github.io/2020/11/26/2020-11-28-how-to-produce-a-quality-tradable-stock-set-for-backtesting/</id>
    <published>2020-11-26T08:55:13.000Z</published>
    <updated>2020-11-29T16:44:44.302Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2020/11/26/2020-11-28-how-to-produce-a-quality-tradable-stock-set-for-backtesting/cover.png" class="" width="500"><p><code>Tradable securities</code> are the securities that are available to be traded on the market that day. Each security could be either add into or remove from this tradable set such as <a href="https://www.merriam-webster.com/dictionary/delist">delisted</a>, company bankrupt, and so on. It’s important for us to obtain this list before we place the order on the day, otherwise, we’re probably going to buy or sell the securities that are not available on the market.</p><p>In this article, I’m going to talk about how I built mine by <strong>reverse engineering</strong> what I have in order to build this tradable securities list. Even though it’s probably not the most accurate one, but could be a start for those who don’t have enough resources to get these tradable securities from elsewhere.</p><a id="more"></a><h1 id="Why-we-need-this-list"><a href="#Why-we-need-this-list" class="headerlink" title="Why we need this list?"></a>Why we need this list?</h1><p>You may ask, what do we need the list for? We could simply use all the stock symbols available on the list in the article <a href="https://mikelhsia.github.io/2020/10/19/2020-10-19-get-all-tradable-tickers/#more">【How 2】 Vol. 1. How 2 get all tradable tickers in US markets</a>, right?</p><p>No. There is one common bias here that needs to be avoided or mitigated to a certain degree:</p><h2 id="Survivor-bias"><a href="#Survivor-bias" class="headerlink" title="Survivor bias"></a>Survivor bias</h2><p>This bias indicates that the result we’re looking at today, actually already went through a series of selection, competition, or elimination.</p><p>For example, we’re analyzing a two-day lookback period and deduced that all the stocks whose symbols start with “A” will very likely to make a positive return this year. When we look back 2 days from <strong>2014-01-09</strong>, we don’t know the existence of stock “AAZ”. The stocks we’re looking at are the <code>survivors</code> from the market competition, inducing us to come to this false conclusion. Hence, on the next day of 2014-01-09, a new stock “ABZ” come to the market. You are very likely to lose more money on the stock as it has “Z” at the end of its symbol that is actually not a good stock, just like the previous market loser “AAZ”.</p><img data-src="/2020/11/26/2020-11-28-how-to-produce-a-quality-tradable-stock-set-for-backtesting/survivor_bias.png" class="" width="500"><p>So using the tradable securities of today to backtest against the historic pricing data would not help us to better predict the future, because we’re looking at the past data through a filtering glasses called “future”.</p><p>You must be smart enough and be able to figure out the data format we need to represent the stocks that are available each historic day on the market by now:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;2014-11-03&#x27;</span>: [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;aacg&#x27;</span>, <span class="string">&#x27;aaic&#x27;</span>, <span class="string">&#x27;aal&#x27;</span>, ... ],</span><br><span class="line">    <span class="string">&#x27;2014-11-04&#x27;</span>: [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;aacg&#x27;</span>, <span class="string">&#x27;aal&#x27;</span>, ... ],</span><br><span class="line">    <span class="string">&#x27;2014-11-05&#x27;</span>: [ <span class="string">&#x27;a&#x27;</span>, ... ],</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Then-the-problem-is-…"><a href="#Then-the-problem-is-…" class="headerlink" title="Then, the problem is …"></a>Then, the problem is …</h1><p>The problem is, I haven’t seen any public data out there that are provided except the dataset <code>QTradableStocksUS()</code> on Quantopian. Also, we can’t use data provided by NASDAQ or NYSE, as this data is not going to help us waiving the <strong>survivor bias</strong> that we mentioned above. Then, how do we produce a somewhat quality tradable stocks set for backtesting?</p><h1 id="Methodology-and-thoughts"><a href="#Methodology-and-thoughts" class="headerlink" title="Methodology and thoughts"></a>Methodology and thoughts</h1><p>I’m going to quickly explain how I built the tradable stocks set based on what I have. If you’re not interested, you can directly go to the bottom of the article to download the tradable stock set since 2014-11-03. If you still have the last piece of conscience in you, please bear with me and read this through …</p><h2 id="Reverse-engineering"><a href="#Reverse-engineering" class="headerlink" title="Reverse-engineering"></a>Reverse-engineering</h2><p>Since there is no public data for the historic tradable stock symbols, I’m thinking maybe we can somewhat confirm the fact that the stock traded publicly on the market that day is included in the tradable securities. So we can say, <strong><em>if a stock has a close price and trading volume that is not zero, this stock must be included in the tradable securities</em></strong>. Therefore, here’s what I’m going to do:</p><h3 id="1-Download-the-historic-price-of-all-stocks-that-I-can-find"><a href="#1-Download-the-historic-price-of-all-stocks-that-I-can-find" class="headerlink" title="1. Download the historic price of all stocks that I can find."></a>1. Download the historic price of all stocks that I can find.</h3><p>Use the below code to download all necessary stock historic daily prices from Tiingo. And, I use <code>multiprocessing</code> package to speed up this process.<br><img data-src="/2020/11/26/2020-11-28-how-to-produce-a-quality-tradable-stock-set-for-backtesting/step1.png" class="" width="800"></p><h3 id="2-Combine-these-historic-prices-on-the-key-“date”-into-one-big-table"><a href="#2-Combine-these-historic-prices-on-the-key-“date”-into-one-big-table" class="headerlink" title="2. Combine these historic prices on the key “date” into one big table."></a>2. Combine these historic prices on the key “date” into one big table.</h3><p>By following the below process, you can get a big table that has the date on the index and the stock symbol in the column.<br><img data-src="/2020/11/26/2020-11-28-how-to-produce-a-quality-tradable-stock-set-for-backtesting/step2-1.png" class="" width="800"><br>The result will look like the table below:<br><img data-src="/2020/11/26/2020-11-28-how-to-produce-a-quality-tradable-stock-set-for-backtesting/step2-2.png" class="" width="800"></p><p>Then one important step that we need to do is to look at the data and see how many data were missing from the source provided. By using the <code>seaborn.heatmap()</code> to visualize the data and find the gap. We’re not going to check all the stocks as there are 14k stocks on my list. So I’m going to inspect stock No. 2000~3000. Here’s the data from 1989 to 2020-11-23:<br><img data-src="/2020/11/26/2020-11-28-how-to-produce-a-quality-tradable-stock-set-for-backtesting/step2-3.png" class="" width="500"></p><p>It seems a lot of data was missing from the beginning. As my backtest won’t include the datetime this long ago, I’m targeting to get data from 2014-11-03 to 2020-11-23. Now the diagram looks like this:<br><img data-src="/2020/11/26/2020-11-28-how-to-produce-a-quality-tradable-stock-set-for-backtesting/step2-4.png" class="" width="500"></p><p>Um… It’s better now. Let’s use this as a base to move on.</p><h3 id="3-Go-through-this-big-table-by-day-and-mark-the-stock-that-has-“Close”-price-and-“Volume”-is-not-zero-as-true"><a href="#3-Go-through-this-big-table-by-day-and-mark-the-stock-that-has-“Close”-price-and-“Volume”-is-not-zero-as-true" class="headerlink" title="3. Go through this big table by day, and mark the stock that has “Close” price and “Volume” is not zero as true."></a>3. Go through this big table by day, and mark the stock that has “Close” price and “Volume” is not zero as true.</h3><p>Here we’re going to produce the positive mark for each stock to see whether we’re going to include it into the tradable securities or not. There is one more thing that needs to be paid attention to: <strong>Data missing rate</strong>. We’re not going to pick the stock that misses daily ‘Close’ price data more than 10% of the time. Because the stock could be delisted for a while due to several reasons. But missing data 10% of the entire time is not normal from what I see.</p><p>So here’s what I do:<br><img data-src="/2020/11/26/2020-11-28-how-to-produce-a-quality-tradable-stock-set-for-backtesting/step3.png" class="" width="800"></p><p>Of course, the <code>missing_rate_threshold</code> can be adjusted as your need. For now, I’m going to keep it to <strong>90</strong> as <strong>90%</strong> of the entire time we observed from 2014-11-03 to 2020-11-23.</p><h3 id="4-Generate-tradable-stock-symbols-by-Timestamp"><a href="#4-Generate-tradable-stock-symbols-by-Timestamp" class="headerlink" title="4. Generate tradable stock symbols by Timestamp"></a>4. Generate tradable stock symbols by Timestamp</h3><p>To get the tradable securities on the day of 2014-11-03, let’s first transform this <code>pd.DataFrame</code> into a listed dictionary. After getting our <code>final_dict</code>, we then generate the <code>pd.Timestamp</code> as an index to retrieve the symbols we need. Lastly, we remove the Nan and Null data with <code>pd.isna()</code> function. Then we’ll get the tradable securities on the day of 2014-11-03.<br></p><h1 id="To-conclude"><a href="#To-conclude" class="headerlink" title="To conclude"></a>To conclude</h1><p>Now we’ve come to the end of this article. I hope putting my train of thought here would make it easier for you to understand. Or leave your comments and let me know where I can explain better. Hope this helps people who are on the same road as I am.</p><hr><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Attach-the-entire-code-here"><a href="#Attach-the-entire-code-here" class="headerlink" title="Attach the entire code here"></a>Attach the entire code here</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line"><span class="comment"># Global variables</span></span><br><span class="line">NUM_OF_PROCESSORS = <span class="number">200</span></span><br><span class="line">STOCK_PRICE_DATA_PATH = <span class="string">&#x27;/Users/michael/Desktop/stocks/&#x27;</span></span><br><span class="line">META_JSON_FILE_PATH = <span class="string">&#x27;[FILE_WHERE_YOUR_STORE_YOUR_TIINGO_META_DATA]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line"><span class="comment"># Get all symbols provided in the meta.json from Tiingo website</span></span><br><span class="line"><span class="keyword">with</span> open(META_JSON_FILE_PATH, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    content = fp.read()</span><br><span class="line">content = json.loads(content)</span><br><span class="line">df = pd.json_normalize(content)</span><br><span class="line">stock_symbol_set = df.ticker.to_list()</span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line"><span class="comment"># Create a table to keep track of which stock has been up to date</span></span><br><span class="line">init_datetime = pd.to_datetime(<span class="number">0</span>)</span><br><span class="line">update_table = pd.Series(</span><br><span class="line">    [init_datetime]*len(stock_symbol_set),</span><br><span class="line">    index=stock_symbol_set</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line"><span class="comment"># Multiprocessing Pool to download pricing data from Tiingo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_historic_price_by_symbol</span>(<span class="params">symbol: str</span>) -&gt; bool:</span></span><br><span class="line">    <span class="keyword">global</span> update_table</span><br><span class="line">    now = datetime.now()</span><br><span class="line">    until_today=now.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(os.path.join(STOCK_PRICE_DATA_PATH, f&#x27;&#123;symbol&#125;.csv&#x27;))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(STOCK_PRICE_DATA_PATH, <span class="string">f&#x27;<span class="subst">&#123;symbol&#125;</span>.csv&#x27;</span>)):</span><br><span class="line">        json = requests.get([YOUR_TIINGO_REQUEST_URL_WITH_SYMBOL_AND_TOKEN])</span><br><span class="line">        <span class="keyword">if</span> json == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        pd.json_normalize(json).to_csv(</span><br><span class="line">            os.path.join(</span><br><span class="line">                STOCK_PRICE_DATA_PATH,</span><br><span class="line">                <span class="string">f&#x27;<span class="subst">&#123;symbol&#125;</span>.csv&#x27;</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        update_table[symbol] = now</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> multiprocessing.Pool(NUM_OF_PROCESSORS) <span class="keyword">as</span> pool:</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> symbol <span class="keyword">in</span> stock_symbol_set:</span><br><span class="line">        results.append(</span><br><span class="line">            pool.apply_async(</span><br><span class="line">                download_historic_price_by_symbol,</span><br><span class="line">                args=(</span><br><span class="line">                    symbol,</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line"></span><br><span class="line">    result_list = [res.get() <span class="keyword">for</span> res <span class="keyword">in</span> results]</span><br><span class="line"></span><br><span class="line">update_table.to_csv(os.path.join(STOCK_PRICE_DATA_PATH, <span class="string">&#x27;.update_table.csv&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line"><span class="comment"># Combine these csv into one big sheet on key &#x27;date&#x27;</span></span><br><span class="line"><span class="comment"># Screen out the stocks that has no data in the csv</span></span><br><span class="line"><span class="comment"># Place the symbol only if it has pricing data,</span></span><br><span class="line"><span class="comment"># and also when it&#x27;s trading volume is greater than 0</span></span><br><span class="line">result_df = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;/Users/michael/Desktop/stocks&#x27;</span></span><br><span class="line">files = os.listdir(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        df = pd.read_csv(os.path.join(path, f))</span><br><span class="line">        <span class="keyword">if</span> len(df) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        df = df[df.volume &gt; <span class="number">0</span>]</span><br><span class="line">        df[<span class="string">&#x27;ticker&#x27;</span>] = f.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        df = df.loc[:, [<span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;ticker&#x27;</span>]]</span><br><span class="line"><span class="comment">#         print(df)</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(f, e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result_df <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        result_df = df</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result_df = pd.merge(result_df, df, on=<span class="string">&#x27;date&#x27;</span>, how=<span class="string">&#x27;outer&#x27;</span>)</span><br><span class="line"></span><br><span class="line">result_df.sort_values(<span class="string">&#x27;date&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">result_df.index = result_df.date.values</span><br><span class="line">result_df.drop(<span class="string">&#x27;date&#x27;</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">result_df.to_csv(<span class="string">&#x27;/Users/michael/Desktop/big_sheet.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line"><span class="comment"># Producing preliminary tradable stock set</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;/Users/michael/Desktop/big_sheet.csv&#x27;</span>)</span><br><span class="line">df.index = pd.to_datetime(df.date.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This means starting from 2014-11-03</span></span><br><span class="line">num = <span class="number">13300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make sure we don&#x27;t erase the stocks that</span></span><br><span class="line"><span class="comment"># delisted during our time span in tradable set</span></span><br><span class="line">missing_rate_threshold = <span class="number">90</span></span><br><span class="line"></span><br><span class="line">total_row = df[num:].shape[<span class="number">0</span>]</span><br><span class="line">missing_row = df[num:].isnull().sum()</span><br><span class="line">rate_of_missing = (total_row - missing_row)/total_row * <span class="number">100</span></span><br><span class="line">final_df = df.loc[:, rate_of_missing &gt; missing_rate_threshold]</span><br><span class="line">final_df = final_df[num:]</span><br><span class="line"></span><br><span class="line">final_df.to_csv(<span class="string">&#x27;/Users/michael/Desktop/tradable_set.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># final_df = pd.read_csv(&#x27;/Users/michael/Desktop/tradable_set.csv&#x27;)</span></span><br><span class="line"><span class="comment"># final_dict = final_df.T.to_dict(&#x27;list&#x27;)</span></span><br><span class="line"><span class="comment"># d = pd.Timestamp(&#x27;2014-11-03&#x27;, tz=&#x27;UTC&#x27;)</span></span><br><span class="line"><span class="comment"># tradable = [s for s in final_df[d if not pd.isna(s)]</span></span><br></pre></td></tr></table></figure><h2 id="Download-the-tradable-securities-set-here"><a href="#Download-the-tradable-securities-set-here" class="headerlink" title="Download the tradable securities set here"></a>Download the tradable securities set here</h2><p>Click <a href="20141103_tradable_set.csv.zip" title="20141103_tradable_set.csv.zip">here</a> to download the file for tradable stock set since <u>2014-11-03</u></p>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2020/11/26/2020-11-28-how-to-produce-a-quality-tradable-stock-set-for-backtesting/cover.png&quot; class=&quot;&quot; width=&quot;500&quot;&gt;
&lt;p&gt;&lt;code&gt;Tradable securities&lt;/code&gt; are the securities that are available to be traded on the market that day. Each security could be either add into or remove from this tradable set such as &lt;a href=&quot;https://www.merriam-webster.com/dictionary/delist&quot;&gt;delisted&lt;/a&gt;, company bankrupt, and so on. It’s important for us to obtain this list before we place the order on the day, otherwise, we’re probably going to buy or sell the securities that are not available on the market.&lt;/p&gt;
&lt;p&gt;In this article, I’m going to talk about how I built mine by &lt;strong&gt;reverse engineering&lt;/strong&gt; what I have in order to build this tradable securities list. Even though it’s probably not the most accurate one, but could be a start for those who don’t have enough resources to get these tradable securities from elsewhere.&lt;/p&gt;</summary>
    
    
    
    <category term="how2" scheme="http://mikelhsia.github.io/categories/how2/"/>
    
    
    <category term="Backtesting" scheme="http://mikelhsia.github.io/tags/Backtesting/"/>
    
    <category term="how2" scheme="http://mikelhsia.github.io/tags/how2/"/>
    
  </entry>
  
  <entry>
    <title>【Cont.】 How to save your silver bullets with MACD strategy?</title>
    <link href="http://mikelhsia.github.io/2020/11/21/2020-11-17-launch-of-macd-strategy/"/>
    <id>http://mikelhsia.github.io/2020/11/21/2020-11-17-launch-of-macd-strategy/</id>
    <published>2020-11-21T15:14:21.000Z</published>
    <updated>2020-11-21T03:52:46.596Z</updated>
    
    <content type="html"><![CDATA[<p>At the beginning of this week (2020-Nov-16th), I have launched my script and traded live on the stock market. Again, having a professional habit of a project manager, I’m here to report how the project goes and what has been done. <a id="more"></a></p><h1 id="Project-brief-and-setup"><a href="#Project-brief-and-setup" class="headerlink" title="Project brief and setup"></a>Project brief and setup</h1><div class="table-container"><table><thead><tr><th>Launch date</th><th>Go live date</th><th>Initial portfolio value</th><th>Cost of time</th><th>Cost of dollars</th></tr></thead><tbody><tr><td>2020/09/18</td><td>2020/11/16</td><td>$42,523.13 (USD)</td><td>1. One week of studying <br> 2. One month of research on Quantopian <br> 3. Three weeks of building the framework and trading script <br> 4. One week of QA and dry run</td><td>$198.00 for one-year <a href="https://api.tiingo.com/">Tiingo data</a></td></tr></tbody></table></div><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><img data-src="/2020/11/21/2020-11-17-launch-of-macd-strategy/return.png" class="" width="800"><h1 id="Take-away-from-QA-and-dry-run"><a href="#Take-away-from-QA-and-dry-run" class="headerlink" title="Take away from QA and dry run"></a>Take away from QA and dry run</h1><ol><li><p>I’ve found out that there’re scenarios that the order placed couldn’t be fulfilled while using the <code>limit order</code>. Therefore, the cash just sitting there doing nothing until triggering another trade, and see we can catch up with another wave. My take here is, since we’re implementing the momentum strategy, meaning the stocks in the list you’re holding should look promising in the short-run. If you’re using the <code>limit order</code> in order to make sure you’re not buying at a higher price, you might miss the chance to stand on the wave and surf. So, I switched to the <code>market order</code>.</p><img data-src="/2020/11/21/2020-11-17-launch-of-macd-strategy/surf.jpg" class="" width="400"></li><li><p>While I’m using <code>apscheduler</code> python library to manage the jobs to be run as cron job, I’m generating the <code>buy_list</code> and <code>sell_list</code> to see what stocks need to be traded every day before the market open. These two lists were passed between jobs as a form of parameters, which I found it’s not ideal as the action buy and sell rely on getting proper return values of another isolated job. Therefore I’m thinking of persisting the results so that the other two jobs will always get the data, even it’s outdated.</p></li></ol><blockquote><p>Just doesn’t seem right to generate public variables and have several jobs to access them without knowing the status of these public variables.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  buy_list = []</span><br><span class="line">  sell_list = []</span><br><span class="line">...</span><br><span class="line">  <span class="comment"># job to process data and generates buy and sell lists</span></span><br><span class="line">  __scheduler.add_job(</span><br><span class="line">      before_trade,</span><br><span class="line">      <span class="string">&#x27;cron&#x27;</span>,</span><br><span class="line">      args=[buy_list, sell_list],</span><br><span class="line">      day_of_week=<span class="string">&#x27;mon-fri&#x27;</span>,</span><br><span class="line">      hour=<span class="number">9</span>,</span><br><span class="line">      minute=<span class="number">0</span>,</span><br><span class="line">      timezone=__est</span><br><span class="line">  )</span><br><span class="line">  <span class="comment"># job to perform buy action according to buy_list</span></span><br><span class="line">  __scheduler.add_job(</span><br><span class="line">      trade_create_open,</span><br><span class="line">      <span class="string">&#x27;cron&#x27;</span>,</span><br><span class="line">      args=[buy_list],</span><br><span class="line">      day_of_week=<span class="string">&#x27;mon-fri&#x27;</span>,</span><br><span class="line">      hour=<span class="number">9</span>,</span><br><span class="line">      minute=<span class="number">35</span>,</span><br><span class="line">      timezone=__est</span><br><span class="line">  )</span><br><span class="line">  <span class="comment"># job to perform sell action according to sell_list</span></span><br><span class="line">  __scheduler.add_job(</span><br><span class="line">      trade_monitor_exit,</span><br><span class="line">      <span class="string">&#x27;cron&#x27;</span>,</span><br><span class="line">      args=[sell_list],</span><br><span class="line">      day_of_week=<span class="string">&#x27;mon-fri&#x27;</span>,</span><br><span class="line">      hour=<span class="number">9</span>,</span><br><span class="line">      minute=<span class="number">30</span>,</span><br><span class="line">      timezone=__est</span><br><span class="line">  )</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>I wouldn’t say the project is a success after 5 days of launching only. Anyone who has made their effort in the stock market would know the fact that, you could lose every penny you have earned for a long time in one single trading day. So instead of calling this project case close, I would rather continue reporting how this strategy goes and perform in the market from time to time.</p><p>But I have to admit that, it does feel good and satisfied to see the portfolio value went up while doing nothing much in the past week. I have fixed a few tiny bugs in the code, looking for my next target strategy, and watched a couple of movies. Also found out my wife was addicted to an old TV show called <a href="https://www.imdb.com/title/tt3228420/"><strong>「You’re the Worst」</strong></a>, which talking about the romance (or say drama…) between a British guy and an American woman. I have watched it with my wife for 10 minutes or so and then thinking …, I probably would have watched it with her if I’m 10 years younger than I am now.<br><img data-src="/2020/11/21/2020-11-17-launch-of-macd-strategy/youre_the_worst.jpg" class="" width="350"></p><p>Further down the road, I’m thinking of adding more tracking stats in the script so that I can capture more detailed information to analyze the performance, risk, exposures, win rate (hit rate), and alpha later on. Please stay tuned and we’ll see.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;At the beginning of this week (2020-Nov-16th), I have launched my script and traded live on the stock market. Again, having a professional habit of a project manager, I’m here to report how the project goes and what has been done.</summary>
    
    
    
    <category term="Quantitative Trading" scheme="http://mikelhsia.github.io/categories/Quantitative-Trading/"/>
    
    
    <category term="Strategy" scheme="http://mikelhsia.github.io/tags/Strategy/"/>
    
    <category term="Momentum" scheme="http://mikelhsia.github.io/tags/Momentum/"/>
    
  </entry>
  
  <entry>
    <title>【How 2】 Vol. 2. How to build an automated stock trading script</title>
    <link href="http://mikelhsia.github.io/2020/11/10/2020-11-08-macd-strategy-implementation/"/>
    <id>http://mikelhsia.github.io/2020/11/10/2020-11-08-macd-strategy-implementation/</id>
    <published>2020-11-09T18:35:54.000Z</published>
    <updated>2020-12-13T02:38:57.978Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2020/11/10/2020-11-08-macd-strategy-implementation/cover.png" class="" width="500"><h1 id="Quick-words"><a href="#Quick-words" class="headerlink" title="Quick words"></a>Quick words</h1><p>This is the Vol. 2 of the <strong>【How 2】 column</strong>.<br>It has been 3 weeks since my previous post. As my <a href="https://mikelhsia.github.io/2020/10/10/2020-10-10-macd-strategy">MACD strategy</a> automated trading script is almost completed, I would like to share this article to document my current research methodology and workflow that I used to capture the new idea from the internet. Hopefully, this can help anyone who’s doing the same as I am doing now, and I can review this in the future to improve my workflow.</p><a id="more"></a><h1 id="Automated-trading-script-project-detail-and-setup-introduction"><a href="#Automated-trading-script-project-detail-and-setup-introduction" class="headerlink" title="Automated trading script project detail and setup introduction"></a>Automated trading script project detail and setup introduction</h1><p>I’ve been learning algo-trading and building my own algo-trading framework (both workflow-wise and coding-wise) for the past 4-5 months. While researching and backtesting the MACD strategy that I posted <a href="https://mikelhsia.github.io/2020/10/10/2020-10-10-macd-strategy">here</a>, I finally gain the confidence to proceed to code and build the automated trading script. In these 3 weeks or so, I’ve tried my best to organize the thoughts and produce a workflow that I think it’s reasonable and efficient that can apply to beginners like me (it’s an occupational habit for a project manager to produce a workflow for everything … :)). There are several stages that I have put together so far:</p><h2 id="1-Tones-of-readings"><a href="#1-Tones-of-readings" class="headerlink" title="1. Tones of readings"></a>1. Tones of readings</h2><p>This is the part that probably consumes the most time. First I’ve been spending time reading articles in the forum, quant platform, and also blogs to gain exotic thoughts that are potential enough to be transformed into code. There are several places that I checked out to find out new thoughts:</p><ul><li><a href="https://analyzingalpha.com/"><strong>analyzingalpha.com</strong></a><ul><li>It’s a blog I like a lot which talks about quant trading and data analysis. Even though it published a new article every two to four weeks, the content usually gives me new thoughts that I can put into my quant strategy.</li></ul></li><li><a href="https://tradingsim.com/blog/category/day-trading/">tradingsim.com</a><ul><li>It’s a blog that talks about trading strategy, especially technical analysis. The <a href="https://mikelhsia.github.io/2020/10/10/2020-10-10-macd-strategy">MACD strategy</a> is originated from here.</li></ul></li><li><a href="https://medium.com/"><strong>medium</strong></a><ul><li>It’s a very well-known media platform that touches everything, from politics to economic or from mental health care to physical training. Even though it doesn’t illustrate the algo-trading strategy in a specific way, it does have tones of materials to read and reflect upon.</li></ul></li><li><a href="https://www.quantopian.com/posts"><strong>Quantopian forum</strong></a> (<em>It’s going to be shut down on Nov, 14th, 2020</em>)<ul><li>It’s probably one of the most well-known quant platforms in recent years. Quantopian backtest platform covers testing data for people to access during backtesting, a full set of web-based backtesting tools, and also a thriving community for professional and non-professional quants to discuss drafted strategy and pick each other’s brain. <strong>And it’s is free!</strong> What else you can ask for more? Sadly, at the end of last week, Quantopian announced the news that it’s going to close down everything by Nov 14th, 2020. There’s no specific reason stated why so, but it is what it is.</li></ul></li><li><a href="https://www.quantconnect.com/forum/"><strong>QuantConnect forum</strong></a> (<em>It’s an alternative after Quantopian is closing</em>)<ul><li>It’s an alternative 3rd party quant platform that I’ve found. It seems good and provides tools for Quantopian users to import their code into their platform. I’m still walking through all tools provided. One thing that I need to vent it out is that their UI/UX in the boot camp and projects is a bit difficult for former Quantopian users like me to comprehend. Still exploring at the moment.</li></ul></li></ul><img data-src="/2020/11/10/2020-11-08-macd-strategy-implementation/reading.jpg" class="" width="400"><h2 id="2-Research-and-backtesting-on-3rd-party-platform"><a href="#2-Research-and-backtesting-on-3rd-party-platform" class="headerlink" title="2. Research and backtesting on 3rd party platform"></a>2. Research and backtesting on 3rd party platform</h2><p>This is the most crucial part of all the stages. You need to transform the ideas into code. <a href="https://www.quantopian.com/">Quantopian</a> and <a href="https://www.quantconnect.com">QuantConnect</a> are the 3rd party platforms that help you to backtest and adjust the params in your algo. In these platforms, you can backtest your algo strategy against the historic pricing data provided, and the backtest will give you a simulated return over the time frame you specified.</p><p>In my experience, the backtest framework is consist of several parts:</p><ul><li>A <strong>stock universe screener</strong> that contains selected stocks, such as high-quality stocks that have high ROE or highly leveraged stocks that have high debt to equity ratio.</li><li><strong>Trading signal generation module</strong> that processes data periodically in order to generate trading signals.</li><li><strong>Trading execution module</strong> that picks the right timing to place buy/sell orders based on the signals generated from the above module.</li><li><strong>Risk management module</strong> (or a <strong>portfolio weight distributor</strong>) that helps manage the risk in various ways: allocating your cash to your target stock by market value, cutting losses if the stock plummeting than expected, … etc..</li></ul><p>Also in this stage, you will accumulate abundant pseudocode and code snippets in <a href="http://ipython.org/notebook.html">Jupyter notebook</a> as part of your research. These snippets can be reused while you’re building your automated script later and can save more time.</p><h2 id="3-Analyze-the-backtest-result-and-optimize"><a href="#3-Analyze-the-backtest-result-and-optimize" class="headerlink" title="3. Analyze the backtest result and optimize"></a>3. Analyze the backtest result and optimize</h2><p>Here are a few major indexes that you need to pay attention to while reviewing your algo results:</p><ul><li>Returns: The final return of the algorithm at the end of the backtest date</li><li>Alpha: Excess market-neutral return that is generated by this strategy</li><li>Beta: Represents an individual stock’s returns against those of the market as a whole</li><li>Sharpe: How much returns can we get if we take one more unit of risk</li><li>Drawdown: Maximum lost in a continuous period</li></ul><p>Therefore, you’re trying to look for a strategy that could give you 1. high return, 2. high alpha, 3. high Sharpe ratio, 4. low beta (not necessary), 5. small drawdown.</p><p>Other than these indexes, one thing you might also need to watch out as well: <strong>win rate</strong>. There’s no formal way of calculating the win rate as far as I know. It basically indicates how effective your strategy compares to the benchmark, usually an index ETF like SPY.</p><div class="table-container"><table><thead><tr><th>Scenario 1</th><th>Scenario 2</th></tr></thead><tbody><tr><td><img data-src="/2020/11/10/2020-11-08-macd-strategy-implementation/win-rate-high.png" class="" width="300"></td><td><img data-src="/2020/11/10/2020-11-08-macd-strategy-implementation/win-rate-low.png" class="" width="300"></td></tr></tbody></table></div><p>In the above example, two scenarios have similar total returns and Sharpe ratios. However, if you look into the diagram, that scenario 1 tends to outperform the benchmark constantly, meaning the portfolio in scenario 1 better hedge the downward risk than the portfolio in scenario 2. This is more of an objective method to compare among portfolios and to find a better strategy that hedges market risk.</p><h2 id="4-Write-a-blog-to-review-the-result"><a href="#4-Write-a-blog-to-review-the-result" class="headerlink" title="4. Write a blog to review the result"></a>4. Write a blog to review the result</h2><p>As a former senior project manager, one thing that I learned from experience is that documentation and records are the most valuable assets in a project. Therefore I’m writing blogs as a means to preserve the documentation. There’s no technical detail in the blog, and they are left in the code and Github, but the background stories and reasoning of decision making can be preserved better in this way. This is not a necessary step in the research workflow.</p><h2 id="5-QA-and-dry-run"><a href="#5-QA-and-dry-run" class="headerlink" title="5. QA and dry run"></a>5. QA and dry run</h2><p>By saying QA or dry run your algo, it means that you have to release your algo into the market and let it run without the actual trading, namely <strong>“paper trading”</strong>. Unfortunately, Quantopian doesn’t provide this service as a tool. There are alternatives that you can try out:</p><ul><li><a href="https://app.alpaca.markets/login">Alpaca</a> is famous for paper trading, and you can build your script on your local machine and connect to Alpaca to perform paper trading. If you want to dry run your algo without committing to any specific platform, this is definitely your choice.</li><li><a href="https://www.quantconnect.com/docs/live-trading/paper-trading">QuantConnect</a> provides a service for paper trading. However, you need to first construct your strategy on their platform using functions and APIs the platform provided.</li></ul><img data-src="/2020/11/10/2020-11-08-macd-strategy-implementation/alpaca_dashboard.png" class="" width="600"><p align="center"><quote><i>Alpaca dashboard</i></quote></p><h2 id="6-Automated-trading-script-It’s-the-real-deal"><a href="#6-Automated-trading-script-It’s-the-real-deal" class="headerlink" title="6. Automated trading script. It’s the real deal!"></a>6. Automated trading script. It’s the real deal!</h2><p>Ok, we’ve been messing around with all the tools/services provided to build our trading strategy that seems profitable. Now it’s time to get your hands dirty and to make something yourself from scratch.</p><p>When building your own automated trading script, there are two major topics that you have to addressed beforehand:</p><ol><li><strong>Does your broker provide external API provisioned for you to call in your script?</strong><ul><li><a href="https://secure.tdameritrade.com/"><strong>TD Ameritrade</strong></a> does have APIs provided and a <a href="https://developer.tdameritrade.com/">developer website</a>. However, I’ve been told that their APIs are not user-friendly enough and the documentation is poorly written. Thankfully, there’s an open-source library <a href="https://github.com/alexgolec/tda-api">tda-api</a> that really helps me out here. This library is still being maintained actively and it does have a small group of contributors helping to improve this library. So I do recommend you look into this library if your broker is TD Ameritrade.</li><li>Another broker is <a href="https://openapi.futunn.com/futu-api-doc/intro/opend.html"><strong>Futuniuniu</strong></a>. It’s a Hong Kong-based broker that allows you to buy/sell stocks traded in the US, HK, and China. Their <a href="https://futunnopen.github.io/futu-api-doc/cpp/trd.html">API document</a> is quite detailed and clear.</li></ul></li><li><strong>Where are you going to get your historic data from?</strong><ul><li>There are tones of free and paid 3rd-party data providers out there such as <em><a href="https://www.quandl.com/">Quandl</a></em>, <em><a href="https://pypi.org/project/yfinance/">yfinance</a></em>, <em><a href="https://iexcloud.io/">IEX Cloud</a></em>, …. I’m using <a href="https://api.tiingo.com/account/api/usage">Tiingo</a> as the price is more approachable for me as a beginner ($99/year for stock pricing and another $99/year for all fundamental data).</li><li><em>PS. Of course, as a professional skinflint, I have tried <a href="https://pypi.org/project/yfinance/">yfinance</a> for a week but finally quit. <a href="https://pypi.org/project/yfinance/">yfinance</a> is essentially a scraper that scrapes the data from <a href="https://finance.yahoo.com/">Yahoo Finance!</a> in realtime. However, I’m requesting fundamental data for over 2000 stocks. Once I got ~2000+ API successful responses, then my IP got blacklisted by <a href="https://finance.yahoo.com/">Yahoo Finance!</a>. So if you’re not requesting thousands of API calls in a short period of time, then <a href="https://pypi.org/project/yfinance/">yfinance</a> is still probably your best choice.</em></li></ul></li></ol><p>After you are able to resolve these two major topics, then you can move on to building your automated trading script.</p><p>I’m choosing <code>python</code> over C, as <code>pandas</code> is still one of the essential libraries to relieve me from managing the data analyzing and transforming. Here’s my setup for my project:</p><ul><li><code>APScheduler</code>: To run scheduled <strong>jobs</strong> such as buy stocks and sell stocks in a specific time in <code>cron</code> format.</li><li><code>multiprocessing</code>: To spawn numerous threads in order to fetch stocks data simultaneously, reducing the total time spent on fetching data.</li><li><code>pandas</code>: To batch-process the data fetched.</li><li><code>datetime</code>, <code>pytz</code>: To control datetime and timezone.</li><li><code>requests</code>: To manage API calls.</li></ul><p>The code was too complex and huge so I won’t post it here. You can comment below if you are interested in a specific part of the code, and I can show you how I do it.</p><h1 id="Final-words"><a href="#Final-words" class="headerlink" title="Final words"></a>Final words</h1><p>These are pretty much what I’ve been doing in these three weeks. At the moment, I’m dry-running my script in the live environment and see if there are any bugs that I can capture before I put this script into practice. I’m also going to open another column to present the results of this automated trading script that I built. Fingers crossed.</p><img data-src="/2020/11/10/2020-11-08-macd-strategy-implementation/fingers_crossed.jpg" class="" width="500">]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2020/11/10/2020-11-08-macd-strategy-implementation/cover.png&quot; class=&quot;&quot; width=&quot;500&quot;&gt;
&lt;h1 id=&quot;Quick-words&quot;&gt;&lt;a href=&quot;#Quick-words&quot; class=&quot;headerlink&quot; title=&quot;Quick words&quot;&gt;&lt;/a&gt;Quick words&lt;/h1&gt;&lt;p&gt;This is the Vol. 2 of the &lt;strong&gt;【How 2】 column&lt;/strong&gt;.&lt;br&gt;It has been 3 weeks since my previous post. As my &lt;a href=&quot;https://mikelhsia.github.io/2020/10/10/2020-10-10-macd-strategy&quot;&gt;MACD strategy&lt;/a&gt; automated trading script is almost completed, I would like to share this article to document my current research methodology and workflow that I used to capture the new idea from the internet. Hopefully, this can help anyone who’s doing the same as I am doing now, and I can review this in the future to improve my workflow.&lt;/p&gt;</summary>
    
    
    
    <category term="How2" scheme="http://mikelhsia.github.io/categories/How2/"/>
    
    
  </entry>
  
  <entry>
    <title>【How 2】 Vol. 1. How 2 get all tradable tickers in US markets</title>
    <link href="http://mikelhsia.github.io/2020/10/19/2020-10-19-get-all-tradable-tickers/"/>
    <id>http://mikelhsia.github.io/2020/10/19/2020-10-19-get-all-tradable-tickers/</id>
    <published>2020-10-19T04:57:54.000Z</published>
    <updated>2020-10-20T07:08:58.886Z</updated>
    
    <content type="html"><![CDATA[<p>Hi everyone, this is the first article for the <strong>【How 2】 column</strong>.</p><p>Every time that I have questions that popped into my mind, I always go Google and try the luck. It would take quite some time to filter the outdated answers, situation not applied answers, …etc. so that I can start forming the answer that help solve my question.</p><p>So, here’s the corner for accumulating all these small notes that would help people who have the same questions of “How to …..”</p><p>Let’s get started.<br><a id="more"></a></p><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>While working on the trading automation bot, there’s one common factor that is essential to acquire for all the stocks that are considered as your potential targets. That is <strong>stock price</strong>. </p><p>There are many third party service and data warehouse that allows you to fetch the stock hloc (high, low, open, close) price through their APIs. The format of these APIs go by:<br><em>yfinance</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yfinance <span class="keyword">as</span> yf</span><br><span class="line"></span><br><span class="line">msft = yf.Ticker(<span class="string">&quot;MSFT&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get historical market data</span></span><br><span class="line">hist = msft.history(period=<span class="string">&quot;max&quot;</span>)</span><br></pre></td></tr></table></figure></p><p><em>tiingo</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">requestResponse = requests.get(<span class="string">&quot;https://api.tiingo.com/tiingo/daily/MSFT/prices?startDate=2019-01-02&amp;token=&lt;your_token&gt;&quot;</span>, headers=headers)</span><br><span class="line">print(requestResponse.json())</span><br></pre></td></tr></table></figure></p><p><em>quandl</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> quandl</span><br><span class="line"></span><br><span class="line">stock_tickers = [</span><br><span class="line">    <span class="string">&#x27;MSFT&#x27;</span>, </span><br><span class="line">]</span><br><span class="line">mydata = quandl.get(stock_tickers, start_date = <span class="string">&#x27;2019-03-19&#x27;</span>, end_date=<span class="string">&#x27;2019-03-21&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mydata.loc[:,(mydata.columns.str.contains(<span class="string">&#x27;Close&#x27;</span>))].T</span><br></pre></td></tr></table></figure></p><p>If you have a pair of good eyes, you’ll notice what we’re trying to tackle here. All the APIs are called by given the <strong>ticker</strong> of the stock.</p><p>Ticker is a brief symbol or code to represent a specific stock/company. So before using your preferable APIs to get the price data, you need to know the ticker of the stock beforehand. As we’re working with code, we would like to get a group or a list of tickers to feed to the code that will automatically start processing the data for us.</p><p>So the question today would be: </p><blockquote><h3 id="“How-to-get-a-list-of-tickers-listed-in-NYSE-or-Nasdaq-”"><a href="#“How-to-get-a-list-of-tickers-listed-in-NYSE-or-Nasdaq-”" class="headerlink" title="“How to get a list of tickers listed in NYSE or Nasdaq?”"></a><em>“How to get a list of tickers listed in NYSE or Nasdaq?”</em></h3></blockquote><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>As stated in the article [<a href="https://quant.stackexchange.com/questions/1640/where-to-download-list-of-all-common-stocks-traded-on-nyse-nasdaq-and-amex">How to get all common stock tickers</a>], that actually Nasdaq is maintaining the list of the listed stocks and all the preliminary data in the text files. So the idea would be get the content from remote FTP, and parse those content into the format we need.</p><img data-src="/2020/10/19/2020-10-19-get-all-tradable-tickers/ftp.png" class="" width="400"><p><strong>Example:</strong><br><strong>nasdaqlisted.txt</strong></p><div class="table-container"><table><thead><tr><th>Symbol</th><th>Security Name</th><th>Market Category</th><th>Test Issue</th><th>Financial Status</th><th>Round Lot Size</th><th>ETF</th><th>NextShares</th></tr></thead><tbody><tr><td>AACG</td><td>ATA Creativity Global - American Depositary Shares, each representing two common shares</td><td>G</td><td>N</td><td>N</td><td>100</td><td>N</td><td>N</td></tr><tr><td>AACQ</td><td>Artius Acquisition Inc. - Class A Common Stock</td><td>S</td><td>N</td><td>N</td><td>100</td><td>N</td><td>N</td></tr></tbody></table></div><p><em>cont…</em></p><p><strong>otherlisted.txt</strong></p><div class="table-container"><table><thead><tr><th>ACT Symbol</th><th>Security Name</th><th>Exchange</th><th>CQS Symbol</th><th>ETF</th><th>Round Lot Size</th><th>Test Issue</th><th>NASDAQ Symbol</th></tr></thead><tbody><tr><td>A</td><td>Agilent Technologies, Inc. Common Stock</td><td>N</td><td>A</td><td>N</td><td>100</td><td>N</td><td>A</td></tr><tr><td>AA</td><td>Alcoa Corporation Common Stock</td><td>N</td><td>AA</td><td>N</td><td>100</td><td>N</td><td>AA</td></tr><tr><td>AAA</td><td>Listed Funds Trust AAF First Priority CLO Bond ETF</td><td>P</td><td>AAA</td><td>Y</td><td>100</td><td>N</td><td>AAA</td></tr></tbody></table></div><p><em>cont…</em></p><p>Apparently, we need a list of tickers. That shouldn’t be hard. However, as this the primitive data maintained by Nasdaq, there are something we need to pay attention to before processing the data.</p><ol><li>We need to screen out the <code>Test Issue</code> stocks that is actually not a real company</li><li>To save time later while we processing the stock fundamental data to find out the better quality stock, we can first remove those companies whose <code>financial status</code> are either bankrupt or deficient.</li><li>We remove the stocks that are not listed in our target exchange</li><li>We remove the stocks that have either <code>.</code> or <code>$</code> in their symbol. These are not the stocks that listed in the market that we’re paying attention to.</li></ol><h2 id="Two-methods-Bash-v-s-python"><a href="#Two-methods-Bash-v-s-python" class="headerlink" title="Two methods: Bash v.s. python"></a>Two methods: Bash v.s. python</h2><h3 id="In-Bash"><a href="#In-Bash" class="headerlink" title="In Bash"></a>In Bash</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[\&quot;<span class="subst">$(echo <span class="string">&quot;<span class="subst">$(</span></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"><span class="subst">    echo -en <span class="string">&quot;<span class="subst">$(</span></span></span></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"><span class="subst"><span class="string"><span class="subst">            curl -s --compressed &#x27;ftp://ftp.nasdaqtrader.com/SymbolDirectory/nasdaqlisted.txt&#x27; | tail -r | tail -n+2 | tail -r | tail -n+2 | perl -pe &#x27;s/ //g&#x27; | tr &#x27;|&#x27; &#x27; &#x27; | awk &#x27;&#123;printf $1<span class="string">&quot; &quot;</span>&#125; &#123;print $4&#125;&#x27;</span></span></span></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"><span class="subst"><span class="string"><span class="subst">        )</span>\n<span class="subst">$(</span></span></span></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"><span class="subst"><span class="string"><span class="subst">            curl -s --compressed &#x27;ftp://ftp.nasdaqtrader.com/SymbolDirectory/otherlisted.txt&#x27;  | tail -r | tail -n+2 | tail -r | tail -n+2 | perl -pe &#x27;s/ //g&#x27; | tr &#x27;|&#x27; &#x27; &#x27; | awk &#x27;&#123;printf $1<span class="string">&quot; &quot;</span>&#125; &#123;print $7&#125;&#x27;</span></span></span></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"><span class="subst"><span class="string"><span class="subst">        )</span>&quot;</span> | grep -v &#x27;Y$&#x27; | awk &#x27;&#123;print $1&#125;&#x27; | grep -v &#x27;[^a-zA-Z]&#x27; | sort</span></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"><span class="subst">    )</span>&quot;</span> | perl -pe &#x27;s/\n/<span class="string">&quot;,&quot;</span>/g&#x27;)</span>\&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="In-Python"><a href="#In-Python" class="headerlink" title="In Python"></a>In Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__get_tradable_tickers</span>() -&gt; list:</span></span><br><span class="line">    <span class="comment"># * Get all the text from Nasdaq</span></span><br><span class="line">    proc = subprocess.Popen([</span><br><span class="line">            <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;--compressed&quot;</span>, <span class="string">&quot;ftp://ftp.nasdaqtrader.com/SymbolDirectory/nasdaqlisted.txt&quot;</span></span><br><span class="line">        ], </span><br><span class="line">        stdout=subprocess.PIPE</span><br><span class="line">    )</span><br><span class="line">    nasdaq_text, err = proc.communicate()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># * Get all the text from Nasdaq</span></span><br><span class="line">    proc = subprocess.Popen([</span><br><span class="line">            <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;--compressed&quot;</span>, <span class="string">&quot;ftp://ftp.nasdaqtrader.com/SymbolDirectory/otherlisted.txt&quot;</span></span><br><span class="line">        ], </span><br><span class="line">        stdout=subprocess.PIPE</span><br><span class="line">    )</span><br><span class="line">    other_text, err = proc.communicate()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># * Convert them into DataFrame</span></span><br><span class="line">    nasdaqlisted = pd.read_csv(StringIO(nasdaq_text.decode(<span class="string">&#x27;utf-8&#x27;</span>)), sep=<span class="string">&#x27;|&#x27;</span>, header=<span class="number">0</span>)</span><br><span class="line">    otherlisted = pd.read_csv(StringIO(other_text.decode(<span class="string">&#x27;utf-8&#x27;</span>)), sep=<span class="string">&#x27;|&#x27;</span>, header=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># * Remove the </span></span><br><span class="line">    <span class="comment"># * 1. test issue stocks, </span></span><br><span class="line">    <span class="comment"># * 2. not in GM market, </span></span><br><span class="line">    <span class="comment"># * 3. financially broke company, </span></span><br><span class="line">    <span class="comment"># * 4. ticker that has &quot;.&quot; or &quot;$&quot; </span></span><br><span class="line">    <span class="comment"># * from the DataFrame</span></span><br><span class="line">    nasdaqlisted = nasdaqlisted[\</span><br><span class="line">        (~nasdaqlisted[<span class="string">&#x27;Test Issue&#x27;</span>].str.contains(<span class="string">&#x27;Y&#x27;</span>, na=<span class="literal">False</span>))&amp;\</span><br><span class="line">        (~nasdaqlisted[<span class="string">&#x27;Symbol&#x27;</span>].str.contains(<span class="string">&#x27;\.|\$&#x27;</span>, na=<span class="literal">False</span>, regex=<span class="literal">True</span>))&amp;\</span><br><span class="line">        (nasdaqlisted[<span class="string">&#x27;Market Category&#x27;</span>].eq(<span class="string">&#x27;G&#x27;</span>))&amp;\</span><br><span class="line">        (nasdaqlisted[<span class="string">&#x27;Financial Status&#x27;</span>].eq(<span class="string">&#x27;N&#x27;</span>))</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># * Remove the </span></span><br><span class="line">    <span class="comment"># * 1. test issue stocks, </span></span><br><span class="line">    <span class="comment"># * 2. not in NYSE, </span></span><br><span class="line">    <span class="comment"># * 3. ticker that has &quot;.&quot; or &quot;$&quot; </span></span><br><span class="line">    <span class="comment"># * from the DataFrame</span></span><br><span class="line">    otherlisted = otherlisted[\</span><br><span class="line">        (~otherlisted[<span class="string">&#x27;Test Issue&#x27;</span>].str.contains(<span class="string">&#x27;Y&#x27;</span>, na=<span class="literal">False</span>))&amp;\</span><br><span class="line">        (~otherlisted[<span class="string">&#x27;ACT Symbol&#x27;</span>].str.contains(<span class="string">&#x27;\.|\$&#x27;</span>, na=<span class="literal">False</span>, regex=<span class="literal">True</span>))&amp;\</span><br><span class="line">        (otherlisted[<span class="string">&#x27;Exchange&#x27;</span>].isin([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;P&#x27;</span>]))</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># * To remove the duplicated tickers by using set</span></span><br><span class="line">    tickers = list(set(nasdaqlisted[<span class="string">&#x27;Symbol&#x27;</span>].values.tolist() + otherlisted[<span class="string">&#x27;ACT Symbol&#x27;</span>].values.tolist()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tickers</span><br></pre></td></tr></table></figure><h1 id="Take-away"><a href="#Take-away" class="headerlink" title="Take away"></a>Take away</h1><p>You can take away as many as possible. The codes in the pictures are free to use.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><ul><li><a href="https://quant.stackexchange.com/questions/1640/where-to-download-list-of-all-common-stocks-traded-on-nyse-nasdaq-and-amex">How to get all common stock tickers</a></li><li><a href="http://bsym.bloomberg.com/sym/">Bloomberg source</a></li><li><a href="http://www.nasdaqtrader.com/trader.aspx?id=symboldirdefs">Nasdaq FTP folder</a></li><li><a href="https://en.wikipedia.org/wiki/NASDAQ">Nasdaq Market tiers &amp; categories</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Hi everyone, this is the first article for the &lt;strong&gt;【How 2】 column&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Every time that I have questions that popped into my mind, I always go Google and try the luck. It would take quite some time to filter the outdated answers, situation not applied answers, …etc. so that I can start forming the answer that help solve my question.&lt;/p&gt;
&lt;p&gt;So, here’s the corner for accumulating all these small notes that would help people who have the same questions of “How to …..”&lt;/p&gt;
&lt;p&gt;Let’s get started.&lt;br&gt;</summary>
    
    
    
    <category term="How2" scheme="http://mikelhsia.github.io/categories/How2/"/>
    
    
    <category term="Investing" scheme="http://mikelhsia.github.io/tags/Investing/"/>
    
    <category term="How2" scheme="http://mikelhsia.github.io/tags/How2/"/>
    
  </entry>
  
  <entry>
    <title>How to save your silver bullets with MACD strategy?</title>
    <link href="http://mikelhsia.github.io/2020/10/10/2020-10-10-macd-strategy/"/>
    <id>http://mikelhsia.github.io/2020/10/10/2020-10-10-macd-strategy/</id>
    <published>2020-10-10T09:36:33.000Z</published>
    <updated>2020-11-10T12:29:59.620Z</updated>
    
    <content type="html"><![CDATA[<style>table th:nth-of-type(1){width: 10%;}table th:nth-of-type(2){width: 45%;}table th:nth-of-type(3){width: 45%;}</style><img data-src="/2020/10/10/2020-10-10-macd-strategy/cover.png" class="" width="500"><p>I’ve been thinking for weeks. As a beginner in automated trading and quant trading, what would be the best practical entry-level strategy that I can automate and practice what I’ve been learning? a.) I don’t need to make a huge fortune out of it. b.) I won’t be able to short stocks and no rights to bid on options. c.) I can bear lost as long as it’s not a huge one. d.) I would like to trade daily in order to have further feedback regarding how to further improve the strategy. After days of research, I believe the MACD strategy would be the one to start with.</p><p><strong>MACD (Moving Average Convergence Divergence)</strong> is a basic indicator strategy for capturing the stock price momentum both upward and downward. The idea of the MACD trading strategy is to buy or sell when the signals were triggered. As easy as that. Even grandma and grandpa can follow simple instructions to profit from the stock market.</p><p>There are several explanations of why momentum strategy such as MACD strategy works:<br><a id="more"></a></p><ol><li>One explanation is that the momentum generated when the stock price soars more than the market expected, then it tends to generate traction to attract more attention from other investors.</li><li>Another explanation is that investors have a different response time to the good news. Therefore the stock price would continue to rise for several days until all investors have digested the news and made the necessary moves (either buy or sell).</li></ol><p>Let’s take this for example:<br>If you see the price of a popular stock starts soaring and many of your friends telling you that they have bought this stock that might increase its price 5% in the next week. Would you buy it?</p><p>This plays a big part in the momentum strategy. The more people are buying and more attention was paid to specific stocks, the more likely the stock price would go up as described in the major economic principle of providing and demand. This is the so-called <strong>FOMO effect (Fear tO Miss Out)</strong></p><img data-src="/2020/10/10/2020-10-10-macd-strategy/fomo.png" class="" width="500"><p>The momentum strategies also have their limits:</p><ol><li>The momentum strategy is too well known so that the return/benefit has been diluted as many investors are participating in this game.</li><li>It’s only a phenomenon based on the <a href="https://mikelhsia.github.io/2020/09/04/the-most-important-thing-illuminated/#more">herding behavior</a> and past history. This strategy won’t be able to predict the future price trend.</li><li>Take the MACD momentum strategy for example, simply using MACD indicators will trigger too many noises and no-profit trades, generating unnecessary trading fees.</li></ol><h1 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h1><p>So we need an additional secondary indicator that helps us remove the noise and decide the trend whether it’s upward or downward. What indicator we should adopt to work together with the MACD strategy?</p><p>Luckily enough, after reading this article <a href="https://tradingsim.com/blog/macd/">MACD – 5 Profitable Trading Strategies</a>, we have found several options to opt-in. Therefore the objective of this article is <u><strong>to dive-in to the details of how to implement these secondary indicators, and how they perform respectively</strong></u>.</p><h1 id="What-is-MACD"><a href="#What-is-MACD" class="headerlink" title="What is MACD?"></a>What is MACD?</h1><p>The history of MACD can be traced back to 1979, Gerald Apple invented the MACD indicator, it was an analytic tool for tracking stock and gold price trend. The MACD was constructed by both short-term and long-term <a href="https://www.investopedia.com/terms/e/ema.asp">EMA (Exponential Moving Average)</a>. If the MACD indicator turns from negative to positive, then it’s a buy-in signal; vise-versa. 12 days for short-term EMA and 26 days for long-term EMA are the common setup of the MACD strategy. Here’s a quick guide of how to calculate MACD indicator:</p><p>$EMA_{Current} = (ClosingPrice - EMA_{PreviousDay}) \times Multiplier + EMA_{PreviousDay}$</p><blockquote><p><em>As we are using 10 days in this exponential moving average example, the weighting multiplier would be calculated as follows:</em></p><p>$Multiplier = \frac{2}{TimePeriods + 1} = \frac{2}{10 + 1} = 18.18\%$</p></blockquote><p>$MACD = EMA_{ShortTerm} - EMA_{LongTerm}$</p><p>$MACD_{Signal} = 9\,day\,EMA\,of\,MACD\newline$</p><p>$MACD_{Hist} = MACD - MACD_{Signal}\newline$</p><h1 id="Let’s-get-started"><a href="#Let’s-get-started" class="headerlink" title="Let’s get started!!"></a>Let’s get started!!</h1><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>On <a href="https://www.quantopian.com">Quantopian platform</a></li><li>Run the backtest in a five-year span, from Jan 2015 to Sep 2020</li><li>Trading once a day</li><li>Maximum 10 stocks in our target portfolio</li><li>Selecting stocks that are high quality as our target assets universe</li><li>Hedge assets such as Gold or VIX related ETF to hedge the downside risk</li></ul><img data-src="/2020/10/10/2020-10-10-macd-strategy/macd.png" class="" width="600"><h2 id="Enter-and-exit-Strategy"><a href="#Enter-and-exit-Strategy" class="headerlink" title="Enter and exit Strategy"></a>Enter and exit Strategy</h2><p>When the $MACD_{Hist}$ is above 0 together when the signal of the secondary indicator is triggered, this indicates that the current $MACD$ line starts trending up above the past 9-day EMA. So once this combined signal reveals, then we enter the position. When the $MACD_{Signal}$ is below 0, then this means the stock price is starting trending low. So we exit the position to capture the return as much as we can compare to the signal using $MACD_{Hist}$ and $MACD_{Signal}$ both below 0.</p><blockquote><p><em>PS:</em><br><em>There’s another exit strategy that is quite popular on the internet, that you could set a certain percentage as your take-profit and stop-loss point. For example, you can exit the position once you’ve hit 10% of profit or lost 10% of the original investment. It seems quite make sense to me in the beginning, so I played with it and tried to incorporate this into my exit strategy. It turned out the results didn’t seem plausible. My assumption would be that this exit strategy doesn’t serve the purpose of capturing the momentum in the MACD strategy, as the stock price could fluctuate before it reaches the timing that the MACD signal predicts.</em></p></blockquote><h2 id="Backtests-and-results-of-combination-with-secondary-trigger-signals"><a href="#Backtests-and-results-of-combination-with-secondary-trigger-signals" class="headerlink" title="Backtests and results of combination with secondary trigger signals"></a>Backtests and results of combination with secondary trigger signals</h2><p>Let’s start pairing the MACD signal with the secondary signal and see how they were implemented:</p><h3 id="1-Relative-Vigor-Index-RVI"><a href="#1-Relative-Vigor-Index-RVI" class="headerlink" title="1. Relative Vigor Index (RVI)"></a>1. Relative Vigor Index (RVI)</h3><p>RVI is not like the other oscillators that evaluating over-buy or over-sell. By looking at the formula below, it’s more of an indicator to tell whether the stock is vigorous enough to be profitable (either long or short the stock). Therefore, a crossover above the RVI signal line indicates that there is probably a bullish trend in the near future. So we can combine RVI with MACD to form a better-confirmed signal.</p><p>$Numerator = \frac{a + 2 \times b + 2 \times c + d}{6}$</p><p>$Denominator = \frac{e + 2 \times f + 2 \times g + h}{6}$</p><p>$RVI = \frac{SMA\,of\,Numerator\,of\,N\,periods}{SMA\,of\,Denominator\,of\,N\,periods}$</p><p>$RVI signal = \frac{RVI + 2 \times i + 2 \times j + k}{6}$</p><p>$where$</p><p>$a = Close−Open$</p><p>$b = Close−Open One Bar Prior to a$</p><p>$c = Close−Open One Bar Prior to b$</p><p>$d = Close−Open One Bar Prior to c$</p><p>$e = High−Low of Bar a$</p><p>$f = High−Low of Bar b$</p><p>$g = High−Low of Bar c$</p><p>$h = High−Low of Bar d$</p><p>$i = RVI Value One Bar Prior$</p><p>$j = RVI Value One Bar Prior to i$</p><p>$k = RVI Value One Bar Prior to j$</p><p>$N = Minutes/Hours/Days/Weeks/Month$</p><h4 id="Code-in-python"><a href="#Code-in-python" class="headerlink" title="Code in python:"></a>Code in python:</h4><img data-src="/2020/10/10/2020-10-10-macd-strategy/rvi.png" class="" width="600"><img data-src="/2020/10/10/2020-10-10-macd-strategy/rvi_signal.png" class="" width="600"><h3 id="2-Money-Flow-Index-MFI"><a href="#2-Money-Flow-Index-MFI" class="headerlink" title="2. Money Flow Index (MFI)"></a>2. Money Flow Index (MFI)</h3><p>Money Flow Index is another type of oscillator (range from 0 to 100) that reflects the changes in both price and volume, comparing to the other oscillators that reflect price only. So this gives us a better idea of whether the target stock is oversold or overbought when the MFI is positioned at both extreme edges. So we combine the MACD signals with MFI to double confirm the trend of the stock price.</p><p>$MoneyFlowIndex = 100 - \frac{100}{1 + MoneyFlowRatio}$</p><p>$where$</p><p>$MoneyFlowRatio = \frac{14 Period\,PositiveMoneyFlow}{14 Period\,NegativeMoneyFlow}$</p><p>$PositiveMoneyFlow = RawMoneyFlow &gt;= 0$</p><p>$NegativeMoneyFlow = RawMoneyFlow &lt; 0$</p><p>$RawMoneyFlow = TypicalPrice \times Volume$</p><p>$TypicalPrice = \frac{High + Low + Close}{3}$</p><h4 id="Code-in-python-1"><a href="#Code-in-python-1" class="headerlink" title="Code in python:"></a>Code in python:</h4><img data-src="/2020/10/10/2020-10-10-macd-strategy/mfi.png" class="" width="600"><h3 id="3-Triple-Exponential-Moving-Average-TEMA"><a href="#3-Triple-Exponential-Moving-Average-TEMA" class="headerlink" title="3. Triple Exponential Moving Average (TEMA)"></a>3. Triple Exponential Moving Average (TEMA)</h3><p>TEMA is a more complex indicator. TEMA smooths the price fluctuations and waives the lagged price impact from the traditional moving average(MA). Compares to EMA, TEMA reduces the influence magnitude of the past few days. Therefore, it works like the traditional moving average to reflect the stock price moving trend by factoring the price movement of the past <em>N</em> periods. We use this to see when the current stock price cross above the TEMA, as a signal of the upward breakthrough.</p><p>$TEMA = 3 \times EMA_1 - 3 \times EMA_2 + EMA_3$</p><p>$where$</p><p>$EMA_1 = Exponential Moving Average (EMA)$</p><p>$EMA_2 = EMA of EMA_1$</p><p>$EMA_3 = EMA of EMA_2$</p><h4 id="Code-in-python-2"><a href="#Code-in-python-2" class="headerlink" title="Code in python:"></a>Code in python:</h4><img data-src="/2020/10/10/2020-10-10-macd-strategy/tema.png" class="" width="600"><h3 id="4-Triple-Exponential-Average-TRIX"><a href="#4-Triple-Exponential-Average-TRIX" class="headerlink" title="4. Triple Exponential Average (TRIX)"></a>4. Triple Exponential Average (TRIX)</h3><p>Similarly to TEMA, TRIX is working surrounding the concept of exponential average. It does have one distinct difference. Unlike TEMA, TRIX represents the change in percentage comparing to the previous day, rather than the stock price EMA itself. Change in percentage would help identify the magnitude of either growth or decline. We are going to adopt this into our buy-in signal when the TRIX line goes above the zero-line.</p><p>$EMA_{1(i)} = EMA(Price, N, 1)$</p><p>$where$</p><p>$Price_{(i)} = Current\,price$</p><p>$EMA_{1(i)} = The\,current\,value\,of\,the\,Exponential\,Moving\,Average$</p><p>$EMA_{2(i)} = EMA(EMA_1, N, i)$</p><p>$EMA_{3(i)} = EMA(EMA_2, N, i)$</p><p>$TRIX_{(i)} = \frac{EMA_{3(i)} - EMA_{3(i-1)}}{EMA_{3(i-1)}}$</p><h4 id="Code-in-python-3"><a href="#Code-in-python-3" class="headerlink" title="Code in python:"></a>Code in python:</h4><img data-src="/2020/10/10/2020-10-10-macd-strategy/trix.png" class="" width="600"><h3 id="5-Awesome-Oscillator"><a href="#5-Awesome-Oscillator" class="headerlink" title="5. Awesome Oscillator"></a>5. Awesome Oscillator</h3><p>According to the article <a href="https://tradingsim.com/blog/awesome-oscillator/">Awesome Oscillator Day Trading Strategies</a>, the awesome oscillator is quite awesome, or to say it’s amazing. First of all, the awesome oscillator is a boundless oscillator, comparing to the traditional oscillator that ranges from +100 to -100. Secondly, it’s less complex in terms of equation computation, as TRIX modified the concept of normal SMA strategy from using the close price to using the middle price in an intraday. To incorporate the awesome oscillator into our MACD trading strategy, we need both MACD and awesome oscillator signals to be triggered in order to enter or close the positions.</p><p>$SMA_{Fast\,Period} = Simple\,Moving\,Average(\frac{(High - Low)}{2}, 5\,periods)$</p><p>$SMA_{Slow\,Period} = Simple\,Moving\,Average(\frac{(High - Low)}{2}, 34\,periods)$</p><p>$Awesome\,Oscillator = SMA_{Fast\,Period} – SMA_{Slow\,Period}$</p><h4 id="Code-in-python-4"><a href="#Code-in-python-4" class="headerlink" title="Code in python:"></a>Code in python:</h4><img data-src="/2020/10/10/2020-10-10-macd-strategy/awesome_scillator.png" class="" width="600"><h3 id="6-Simple-Moving-Average"><a href="#6-Simple-Moving-Average" class="headerlink" title="6. Simple Moving Average"></a>6. Simple Moving Average</h3><p>This strategy was mentioned in the article <a href="https://tradingsim.com/blog/macd/">MACD – 5 Profitable Trading Strategies</a> as a bouns strategy to look at. In this strategy, we enter a position when the MACD signal is triggered, and then we look for the timing with the assistance of the MA line. Meaning, we buy only when the following conditions are met:</p><ol><li>The stock price is above MA most of the time</li><li>MACD has already crossed above the MACD signal line</li><li>The most recent stock price slide and touched the MA line.</li></ol><img data-src="/2020/10/10/2020-10-10-macd-strategy/ma_example.png" class="" width="150"><p>Allegedly, this strategy would get us to buy into the pullbacks of security that still has strong upward momentum.</p><h4 id="Code-in-python-5"><a href="#Code-in-python-5" class="headerlink" title="Code in python:"></a>Code in python:</h4><img data-src="/2020/10/10/2020-10-10-macd-strategy/ma.png" class="" width="600"><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>The long and tedious description section is over!! Now let’s put the result together and see how each strategy performed.</p><div class="table-container"><table><thead><tr><th style="text-align:center">Secondary indicators</th><th style="text-align:center">Diagram</th><th style="text-align:left">Stats</th></tr></thead><tbody><tr><td style="text-align:center">RVI</td><td style="text-align:center"><img data-src="/2020/10/10/2020-10-10-macd-strategy/return_rvi.png" class="" width="300"></td><td style="text-align:left">By looking at the return line chart, we see that our strategy was actually beaten by the market for a long period of time, from the middle of 2015 to the beginning of 2018. Even though we have generated <strong>80%+ return over a five-year span</strong>, this strategy doesn’t look good on the overall Sharpe ratio and max dropdown.</td></tr><tr><td style="text-align:center">MFI</td><td style="text-align:center"><img data-src="/2020/10/10/2020-10-10-macd-strategy/return_mfi.png" class="" width="300"></td><td style="text-align:left">MFI strategy did beat the market most of the time and reaches <strong>100%+ return over 5 years</strong>. It performed slightly better than the RVI strategy. One thing you noticed in the bottom line chart, that the open position and the leverage ratio fluctuate very often. This could be a sign that the strategy generated too many false alarms.</td></tr><tr><td style="text-align:center">TEMA</td><td style="text-align:center"><img data-src="/2020/10/10/2020-10-10-macd-strategy/return_tema.png" class="" width="300"></td><td style="text-align:left">The backtest generated <strong>the highest alpha</strong>, <strong>lowest beta</strong>, and <strong>the smallest max dropdown</strong> among all secondary indicators. It also produces 143%+ return over 5 years. It could be a good choice to automate this into a trading bot program to test as it receives the least impact from the market factors.</td></tr><tr><td style="text-align:center">TRIX</td><td style="text-align:center"><img data-src="/2020/10/10/2020-10-10-macd-strategy/return_trix.png" class="" width="300"></td><td style="text-align:left">As a mutation of the TEMA, TRIX doesn’t perform better than the results generated from TEMA. Change in percentage of EMA might not be able to point out what’s the upward trend. We could play with the TRIX threshold and replace the zero line with other numbers. But I don’t want to do this at the moment, preventing overfitting the model.</td></tr><tr><td style="text-align:center">Awesome Oscillator</td><td style="text-align:center"><img data-src="/2020/10/10/2020-10-10-macd-strategy/return_awesome.png" class="" width="300"></td><td style="text-align:left">This strategy with Awesome Oscillator gives us the highest return and Sharpe ratio. Even though the beta and the max dropdown are both high comparing to the other five strategies, the line chart did clearly represents that this strategy can constantly beat the benchmark(SPY) return.</td></tr><tr><td style="text-align:center">SMA</td><td style="text-align:center"><img data-src="/2020/10/10/2020-10-10-macd-strategy/return_ma.png" class="" width="300"></td><td style="text-align:left">This is the only that strategy doesn’t work like the rest. As clearly pointed out in the explanation of the previous paragraph, that it is the strategy tries to capture the bounce back from the pullbacks instead of capturing the momentum. So I would say this test is not mature enough and can dive into this in the next article.</td></tr></tbody></table></div><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ol><li>The final results don’t seem to be consistent with the author of <a href="https://tradingsim.com/blog/macd/">MACD – 5 Profitable Trading Strategies</a> on the preferred MACD strategy, as he’s doing research on single stock respectively against the technical diagram. Here we’re working with the computer, screening qualified stocks, and letting the program to decide what to buy and when to buy or sell.</li><li>From what we have tested, TEMA and Awesome Oscillator seem to be the best options out of 6 strategies that we have backtested. These two strategies have generated outstanding return and Sharpe ratio, and also be able to beat the benchmark stock SPY.</li><li>As we’re running the stock selection by programmed rules, there could be many stocks that have passed the threshold and qualified to be traded. Since we have only 10 seats in our portfolio, how are we going to select the stock that has the biggest momentum? The MACD nor the rest of the secondary indicators can be used to define the magnitude of the momentum across different stocks. However, it seems that <u><strong>high P/B ratio</strong> tends to receive higher influence from the momentum factor</u>. When ranking the P/B ratio from high to low would generate a higher return and lower risk compared to ranking the P/B ratio from low to high. I will not spend more words on describing this in this article. If anyone is interested in this topic, let me know, and I’ll write more about this.</li></ol><h1 id="Take-away"><a href="#Take-away" class="headerlink" title="Take away"></a>Take away</h1><p>There are still many other variables to play with in order to optimize the strategy. Such as increase the MACD threshold to make sure we don’t run into a short-term reverse, increase the portfolio capacity to waive the sector-specific risk, monitor the MACD breakthrough for several periods to confirm the upward/downward trend before opening a position, … etc.. However, looking from the MVP (minimum viable product) point of view, I believe it’s already good enough to throw this into practice by picking either <u>TEMA</u> or <u>Awesome Oscillator</u> strategies.</p><p>OK. I’m going to write my code to start trading automatically. See you next time.</p><blockquote><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://tradingsim.com/blog/macd/">MACD – 5 Profitable Trading Strategies</a></li><li><a href="https://baike.baidu.com/item/%E7%9B%B8%E5%AF%B9%E6%B4%BB%E5%8A%9B%E6%8C%87%E6%95%B0%E6%8C%87%E6%A0%87">RVI 活力指標</a></li><li><a href="https://tradingsim.com/blog/money-flow-index/">Money Flow Index Strategy</a></li><li><a href="https://www.investopedia.com/terms/m/mfi.asp">Money Flow Index - MFI</a></li><li><a href="https://www.investopedia.com/terms/t/triple-exponential-moving-average.asp">TEMA</a></li><li><a href="https://wiki.mbalib.com/wiki/TRIX%E6%8C%87%E6%A0%87">TRIX wiki</a></li><li><a href="https://www.investopedia.com/terms/t/trix.asp">TRIX investopedia</a></li><li><a href="https://tradingsim.com/blog/awesome-oscillator/">Awesome Oscillator</a></li><li><a href="https://www.fmz.com/strategy/127101">MACD+MA Indicator Combination Strategy</a></li><li><a href="https://www.youtube.com/watch?v=kz_NJERCgm8">Algorithmic Trading Strategy Using MACD and MA</a></li><li><a href="https://www.forbes.com/sites/simonmoore/2019/01/27/a-deeper-look-at-how-momentum-strategies-work/">A deeper look at how momentum strategies work</a></li><li><a href="https://www.investopedia.com/trading/introduction-to-momentum-trading/">Introduction to momentum trading</a></li><li><a href="https://quantpedia.com/strategies/momentum-factor-effect-in-stocks/">Momentum factor effect in stocks</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;style&gt;
table th:nth-of-type(1){
width: 10%;
}
table th:nth-of-type(2){
width: 45%
;
}
table th:nth-of-type(3){
width: 45%;
}
&lt;/style&gt;

&lt;img data-src=&quot;/2020/10/10/2020-10-10-macd-strategy/cover.png&quot; class=&quot;&quot; width=&quot;500&quot;&gt;
&lt;p&gt;I’ve been thinking for weeks. As a beginner in automated trading and quant trading, what would be the best practical entry-level strategy that I can automate and practice what I’ve been learning? a.) I don’t need to make a huge fortune out of it. b.) I won’t be able to short stocks and no rights to bid on options. c.) I can bear lost as long as it’s not a huge one. d.) I would like to trade daily in order to have further feedback regarding how to further improve the strategy. After days of research, I believe the MACD strategy would be the one to start with.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MACD (Moving Average Convergence Divergence)&lt;/strong&gt; is a basic indicator strategy for capturing the stock price momentum both upward and downward. The idea of the MACD trading strategy is to buy or sell when the signals were triggered. As easy as that. Even grandma and grandpa can follow simple instructions to profit from the stock market.&lt;/p&gt;
&lt;p&gt;There are several explanations of why momentum strategy such as MACD strategy works:&lt;br&gt;</summary>
    
    
    
    <category term="Quantitative Trading" scheme="http://mikelhsia.github.io/categories/Quantitative-Trading/"/>
    
    
    <category term="Strategy" scheme="http://mikelhsia.github.io/tags/Strategy/"/>
    
    <category term="Momentum" scheme="http://mikelhsia.github.io/tags/Momentum/"/>
    
    <category term="Research" scheme="http://mikelhsia.github.io/tags/Research/"/>
    
  </entry>
  
  <entry>
    <title>How to grow and protect wealth for 100 years</title>
    <link href="http://mikelhsia.github.io/2020/09/18/2020-09-18-how-to-grow-and-protect-wealth-for-100-years/"/>
    <id>http://mikelhsia.github.io/2020/09/18/2020-09-18-how-to-grow-and-protect-wealth-for-100-years/</id>
    <published>2020-09-17T16:18:35.000Z</published>
    <updated>2020-11-10T05:26:55.069Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2020/09/18/2020-09-18-how-to-grow-and-protect-wealth-for-100-years/cover.png" class="" width="400"><p>In recent days, the financial markets across countries are tumbling. I got complaints from people saying that they lost money on some trades that look promising in the beginning. Also, some friends claimed that they made a small fortune with their unique insight in the turbulent days. Annoyingly enough, that people who made money from these trades tended to brag about how unique vision they possessed, and you can’t ignore the return they have achieved and crave the know-how how they pulled it off.</p><p>If you had enough of these, reading this research paper would make you feel better mentally, (<em>sorry but won’t help you make more money right away</em>) because these guys are just lucky enough to be born in the right era.<br><a id="more"></a></p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The <strong>Artemis Capital Management L.P.</strong> published this <a href="https://docsend.com/view/taygkbn">research paper</a> in January 2020, right before the COVID-10 virus burst out. This paper points out a few misunderstandings that consist of modern investment strategies and performance evaluation:</p><ul><li><strong><a href="https://www.investopedia.com/terms/e/economic-cycle.asp">Economic cycle</a>/<a href="https://www.investopedia.com/terms/b/businesscycle.asp">business cycle</a> is longer than we think it is</strong><br>The macroeconomic suggested that the economic cycle is either six years (<em>internal economic cycle</em>) or 10 years (<em>external economic cycle</em>), indicating that its stock price will rise every 6-10 years if this company stays long enough. Many investment strategies such as <strong>mean reversion strategy</strong> are developed based on this theory. However, the average age of an investment advisor is 52 years old, meaning the modern investment strategies have had been developed, polished, and validated less than four decades. This paper has separated the past ~90 years into four stages, and it’s quite clear that the market performed differently in either stage. This potentially tells us that we’re only looking at a limited time period while we evaluating our portfolio performance.</li></ul><img data-src="/2020/09/18/2020-09-18-how-to-grow-and-protect-wealth-for-100-years/secular_cycle.png" class="" width="700"><ul><li><p><strong>This is not REPEATABLE in the long run</strong><br>As the trading data has been digitized in recent 2-3 decades, for many large quantitative asset managers do not test their strategies in periods without optimal data. Hence their recommended portfolio hasn’t been well validated with historical data, which is risky to the investors.</p></li><li><p><strong>The strategies look profitable simply because we’re living in the right time</strong></p><img data-src="/2020/09/18/2020-09-18-how-to-grow-and-protect-wealth-for-100-years/economics.png" class="" width="700"><p>From the diagrams above, you can tell that we’re at an all-time low in 1. Volatility, 2. Asset Price Trending, and 3. Interest Rates for the recent decade. Therefore, many modern investment strategies generate yield based on the assumption that these core economic indexes won’t move away significantly. So applying the same strategies over 90 years would be extremely risky as the model has not been tested nor been hedged against the economic shifting.<br>To put this in a more simple way to illustrate the seriousness of the consequence, if we adopted <em><a href="https://www.investopedia.com/terms/b/buy-the-dips.asp">Buy-The-Dips</a></em> strategy since 1928 to 1970, you would have been bankrupted <strong><em>THREE TIMES</em></strong>.</p><blockquote><p>In short, Buy-The-Dip is a popular strategy that buys any target stocks after the day that the Stock Market has fallen, expecting a rebound of the market and profiting from the recovery.</p></blockquote></li></ul><img data-src="/2020/09/18/2020-09-18-how-to-grow-and-protect-wealth-for-100-years/buy_the_dip.png" class="" width="700"><h1 id="Allegory"><a href="#Allegory" class="headerlink" title="Allegory"></a>Allegory</h1><img data-src="/2020/09/18/2020-09-18-how-to-grow-and-protect-wealth-for-100-years/serpent&hawk.png" class="" width="400"><p>In this research paper, it uses a very interesting metaphor to describe the market:</p><ul><li><strong>Serpent</strong> represents secular growth. The growth cycle pushes the economic and stock market upward through a combination of demographics, technology, and economic prosperity. At one point, the growth is no longer organic enough, so it has to raise more debt to keep growing. Just like a snake devours itself to grow bigger, but ends up hurt itself.</li><li>Then the <strong>hawk</strong> represents the force that would come down to disrupt and stop the serpent from destroying the organic growth of the cycle. The forces include deflation, debt default, helicopter money, …etc. Once any of these forces come down for the serpent, the stock market would start tumble, cracking a wall of growth and stepping into the time of declination of your portfolio value.</li></ul><p>So what should people do to construct a portfolio that lasts 100 years and mitigates the impact of a hawk?</p><h1 id="The-solution-Dragon-portfolio"><a href="#The-solution-Dragon-portfolio" class="headerlink" title="The solution - Dragon portfolio"></a>The solution - Dragon portfolio</h1><img data-src="/2020/09/18/2020-09-18-how-to-grow-and-protect-wealth-for-100-years/dragon.png" class="" width="400"><h2 id="What-is-dragon-portfolio"><a href="#What-is-dragon-portfolio" class="headerlink" title="What is dragon portfolio"></a>What is dragon portfolio</h2><p>As illustrated above, asset A and asset B are quite similar in terms of the stock price movement, meaning they are correlated. Asset A and C and asset B and C are less correlated to each other. As asset A and asset C have low correlation, the portfolio A + C that has less risk (<em>compares to portfolio A + B</em>) will generate more profits from the portfolio built, whereas the downward price movement of asset A was offset by the slightly upward price movement. To make the outcome much easier to understand, make more money with less risk.</p><img data-src="/2020/09/18/2020-09-18-how-to-grow-and-protect-wealth-for-100-years/central_theory.png" class="" width="1000"><p>The law of cosmic duality proves that, counter-intuitively, a defensive asset can be precious to the total portfolio, even if it fails to make money consistently.<br>So how to build your investment portfolio and also your own retire financial plan? The solution suggested is fairly simple: <em>find assets that can perform when Stocks and Bonds collapse, and boldly own them regardless of short term performance</em>. However, what’s that different from the traditional 60/40 equity bond that helps you hedge the downside risk? The key to superior portfolio returns is to make surprisingly <strong>LARGE</strong> allocations to alternative assets that perform when Stocks and Bonds start sliding.</p><blockquote><p>The centerpiece of the book: <strong>Anti-correlation is worth more than excess return</strong></p></blockquote><img data-src="/2020/09/18/2020-09-18-how-to-grow-and-protect-wealth-for-100-years/dragon_portfolio.png" class="" width="400"><img data-src="/2020/09/18/2020-09-18-how-to-grow-and-protect-wealth-for-100-years/dragon_portfolio_perf.png" class="" width="700"><h2 id="Asset-classifications"><a href="#Asset-classifications" class="headerlink" title="Asset classifications"></a>Asset classifications</h2><p>In the paper, it also introduced each asset class that we can use to construct the dragon portfolio out of them. I will let you read those from the article as it’s redundant to put those words again in this article.</p><ul><li><strong>Serpent assets that profit from secular growth and stability</strong><ul><li>Equity Market</li><li>Real Estate</li><li>Corporate Bonds</li><li>…</li></ul></li><li><strong>Hawk assets that profit from secular change</strong><ul><li>Active Long Volatility</li><li>Commodity Trend Following Strategy</li><li>…</li></ul></li><li><strong>Hawk assets that profit from monetary debasement</strong><ul><li>Gold, Gold ETF</li><li>High-quality Bonds</li></ul></li></ul><h1 id="Challenges-to-construct-the-portfolio-that-protects-your-assets-from-depreciating-in-the-next-100-years"><a href="#Challenges-to-construct-the-portfolio-that-protects-your-assets-from-depreciating-in-the-next-100-years" class="headerlink" title="Challenges to construct the portfolio that protects your assets from depreciating in the next 100 years"></a>Challenges to construct the portfolio that protects your assets from depreciating in the next 100 years</h1><p>As mentioned in the article <a href="https://mikelhsia.github.io/2020/09/04/the-most-important-thing-illuminated/#more">here</a>, that people tend to follow the herd, which called Herd Behavior. As we’re born to be humans, we are biologically programmed to be part of a group. The normal investors are not emotionally strong or brave enough to buy stocks that others think unpromising. It is not intuitive to reallocate gains from a performing asset to something that hasn’t made money in a decade.</p><p>So the challenges would be <strong>social</strong> instead of financial. Say, when you have put over 60% of your assets into bonds and fixed income that generate 1~3% profit annually while you’re friends have made 6~10% per month with equity, the temptation of giving it a shot would be quite substantial for one person to allocate more money in the equity market.</p><p>That is where the nightmare starts….</p><h1 id="Bonus-Interview-with-CIO-and-Founder-of-Artemis-Capital-Management"><a href="#Bonus-Interview-with-CIO-and-Founder-of-Artemis-Capital-Management" class="headerlink" title="Bonus: Interview with CIO and Founder of Artemis Capital Management*"></a>Bonus: Interview with CIO and Founder of Artemis Capital Management*</h1><iframe width=40% src='https://player.youku.com/embed/XNDY3MDQ5MjUwNA==' frameborder=0 'allowfullscreen'></iframe>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2020/09/18/2020-09-18-how-to-grow-and-protect-wealth-for-100-years/cover.png&quot; class=&quot;&quot; width=&quot;400&quot;&gt;
&lt;p&gt;In recent days, the financial markets across countries are tumbling. I got complaints from people saying that they lost money on some trades that look promising in the beginning. Also, some friends claimed that they made a small fortune with their unique insight in the turbulent days. Annoyingly enough, that people who made money from these trades tended to brag about how unique vision they possessed, and you can’t ignore the return they have achieved and crave the know-how how they pulled it off.&lt;/p&gt;
&lt;p&gt;If you had enough of these, reading this research paper would make you feel better mentally, (&lt;em&gt;sorry but won’t help you make more money right away&lt;/em&gt;) because these guys are just lucky enough to be born in the right era.&lt;br&gt;</summary>
    
    
    
    <category term="Readings" scheme="http://mikelhsia.github.io/categories/Readings/"/>
    
    
    <category term="Investing" scheme="http://mikelhsia.github.io/tags/Investing/"/>
    
  </entry>
  
  <entry>
    <title>投資最重要的事 讀後感(The most important thing illuminated)</title>
    <link href="http://mikelhsia.github.io/2020/09/04/2020-09-04-the-most-important-thing-illuminated/"/>
    <id>http://mikelhsia.github.io/2020/09/04/2020-09-04-the-most-important-thing-illuminated/</id>
    <published>2020-09-04T14:33:00.000Z</published>
    <updated>2020-10-20T04:12:52.845Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2020/09/04/2020-09-04-the-most-important-thing-illuminated/cover.jpg" class="" width="200"><p style="text-align:center; color: grey;">    <i>投資最重要的事 - By <b>Howard Marks</b></i></p><p>這本書是今年五月的時候買的。當時COVID-19的疫情還正在全球散佈中，我想利用在家時間多補充點金融相關的知識，所以才買了這本書。<a id="more"></a>本以為這本書包含較多實戰相關的經驗分享，想像自己讀完之後就是大拿，可以跟金融界大老們踏入一樣的思想世界。但是讀完之後，感覺比較像是一本心經，告訴你在進行投資的時候，正確的職業投資者的思維應該是大膽且謹慎，同時有勇氣去相信自己的研究結果，並徹底執行。</p><blockquote><p><strong><em>&lt;就算全世界與我為敵&gt; - 陳琦貞</em></strong><br><em>什麼都不想聽  誰都別問</em><br><em>我早已下定決心  就算全世界與我為敵</em></p></blockquote><h1 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h1><ul><li>第二層思維</li><li>投資與風險的迷思以及錯誤觀點</li><li>經濟繁榮衰退的週期</li><li>總結</li></ul><h1 id="第二層思維"><a href="#第二層思維" class="headerlink" title="第二層思維"></a>第二層思維</h1><h2 id="何謂”第二層思維”"><a href="#何謂”第二層思維”" class="headerlink" title="何謂”第二層思維”?"></a>何謂”第二層思維”?</h2><p>第二層思維指的就是敏銳洞察力。當其他的投資者因為某個新聞或是經濟政策作出了他們的最佳判斷，你是否可以這些投資者共識性的預測進行進一步的預測，並藉此成功獲利。比如說：</p><blockquote><hr><p><em>第一層思維說：這是一家好公司，我要買他們的股票！</em><br><strong><em>第二層思維說：這是一家好公司，看來大家都會買他們的股票。但是這樣會因為需求過高，短時間內推高估價與定價。讓我們賣出股票吧！</em></strong></p><hr><p><em>第一層思維說：股票分析師說，這間公司的利潤會下跌，賣出吧！</em><br><strong><em>第二層思維說：股票分析師說，這間公司的利潤會下跌。但是我看來，利潤下跌的會比預期的少。可能會有意想不到的驚喜而拉升股票。買進吧！</em></strong></p><hr></blockquote><img data-src="/2020/09/04/2020-09-04-the-most-important-thing-illuminated/buy_sell.jpg" class="" width="400"><p>洞察力是可以透過訓練而獲得的。就如同寫代碼寫久了，我們可以預期客戶會遇到什麼樣的情況; 打棒球打久了，可以從投手的姿勢判斷出是什麼樣的球種一樣。當我們遇到一條新聞，我們可以透過歷史的反應，來判斷大多數的投資者會怎麼做，藉此來預判斷我們可以如何從這樣的市場情勢下獲得利益。</p><p>我以前讀過相關的統計相關書籍裡(書名忘記了)，有一個很好的故事來說明第二層思維在投資這方面的領域的重要性：</p><blockquote><p><em>在1986年4月26日，俄羅斯境內的車諾比核電廠正進行的一項試驗造成功率劇增，導致反應爐毀壞，釋放出的輻射線劑量是投在廣島原子彈的400倍以上，烏克蘭、白俄羅斯及俄羅斯境內均遭到嚴重的核污染。當某一個分析員聽到了這個消息，立馬就去研究了車諾比的文件和紀錄，買了馬鈴薯的期貨。為什麼買了馬鈴薯的期貨呢？</em></p><p><em>原來，這位分析員發現了，車諾比附近有大量的馬鈴薯農場，而馬鈴薯又是俄羅斯人的主食。所以當車諾比的核電廠爆炸後，輻射外洩，導致附近的農作物受到輻射污染而無法賣出，只好從國外進口更多的馬鈴薯以供俄羅斯國內的人食用。當年有限的馬鈴薯供給，加上俄羅斯突然劇增的需求，造成期貨市場上馬鈴薯的價格大漲。</em></p></blockquote><img data-src="/2020/09/04/2020-09-04-the-most-important-thing-illuminated/potato.jpg" class="" width="300"><p>當然，第二層思維不僅只是你要了解事情的因果關係，你更需要了解所有相關的知識，花相當多的時間來研究相關的資料以及文獻，才能夠有足夠的知識來進行正確的判斷。而那些不了解第二層思維的投資者，則是本能地對所有的第一手信息進行交易。說到底，是沒經驗的投資者和有經驗的投資者在獲取的信息上的不對稱。</p><p><br></p><h1 id="投資與風險的迷思以及錯誤的觀點"><a href="#投資與風險的迷思以及錯誤的觀點" class="headerlink" title="投資與風險的迷思以及錯誤的觀點"></a>投資與風險的迷思以及錯誤的觀點</h1><h2 id="風險較高的投資意味著？"><a href="#風險較高的投資意味著？" class="headerlink" title="風險較高的投資意味著？"></a>風險較高的投資意味著？</h2><p>許多人投資者認為，要獲得更高的收益，就要承受更高的風險。</p><p>這個概念是沒錯的。但是 $n \rightarrow p \ne p \rightarrow n$ 。承受更高的風險並不代表一定會獲得更高的收益。風險較高的投資意味著：</p><ol><li>你<strong>較有可能</strong>會獲得額外的收益</li><li>你<strong>較有可能</strong>會獲得額外的損失</li></ol><p>以往的傳統風險-收益曲線圖，通常會帶來誤解，讓人覺得，只要承受更大的風險，就會獲得更大的利益。但是在本書中，作者霍華德清楚地說明了，承受更大的風險，只是代表你更有可能獲得或是損失你的收益。而獲得的收益並不一定和你所承受的風險成正比。</p><div class="table-container"><table><thead><tr><th>傳統風險-收益曲線圖</th><th>實際發生的情況</th></tr></thead><tbody><tr><td><img data-src="the-most-important-thing-illuminated/risk_return.png" alt="傳統思維"></td><td><img data-src="the-most-important-thing-illuminated/risk_return2.png" alt="實際情況"></td></tr></tbody></table></div><blockquote><h3 id="風險高不是必然代表收益高"><a href="#風險高不是必然代表收益高" class="headerlink" title="風險高不是必然代表收益高"></a><em>風險高不是必然代表收益高</em></h3></blockquote><h2 id="投資風險主要源自過高的價格"><a href="#投資風險主要源自過高的價格" class="headerlink" title="投資風險主要源自過高的價格"></a>投資風險主要源自過高的價格</h2><p>『買這隻的風險很高喔！最近市場不好，買這隻很可能會大跌…』<br>其實風險並不在於投資的資產價值下跌，而是你在過高的價格買進了某個資產。讓人以過高的價格買進資產的主要原因，往往源自投資者過度樂觀，懷疑不足，以及風險規避不足。</p><p>過去幾年裡，資訊極速進展發達。任何公司或股票相關的信息可以很快地獲知，相關的風險研究隨時隨處都可以看見。投資者中會開始流傳一段”無風險“的神話：</p><ul><li>次級房貸之後，所有的機構都對這種風險有了瞭解，所以不太會再次發生</li><li>風險已經因為全球化而在世界各地分散，而不會地域性的集中</li><li>投資的工具以及平台已經被更廣泛的給到世界各地的投資者接觸並接受，已經不再是精英階層的專利了</li><li>計算機，數學模型，風險模型的發展已經快速發展，將風險慢慢地消滅減少了</li><li>…</li></ul><p>注意，風險是只會被轉移，而不會削減的。所以當你在購買投資產品的時候，你所認為的低風險高收益的產品，其實表面所看見的風險早已經被大型投資機構轉移到你看不見的地方了。</p><p>比如，巴菲特的價值投資法近來也越來越受歡迎。大家都認為，選擇“<strong>高質量</strong>”的公司股票來進行投資，風險一定會更低。但是這所謂的“高質量”公司經常被投資者過度追捧，所以常常會在檯面下被大公司在投資機構之間進行了高價/量大的交易，進而大幅影響了股價，影響了你投資標的的質量。</p><blockquote><h3 id="投資者的工作是以營利為目的並聰明地承擔風險。能夠出色的做到這一點，是最好的投資者與其他投資者之間的區別"><a href="#投資者的工作是以營利為目的並聰明地承擔風險。能夠出色的做到這一點，是最好的投資者與其他投資者之間的區別" class="headerlink" title="投資者的工作是以營利為目的並聰明地承擔風險。能夠出色的做到這一點，是最好的投資者與其他投資者之間的區別"></a><em>投資者的工作是以營利為目的並聰明地承擔風險。能夠出色的做到這一點，是最好的投資者與其他投資者之間的區別</em></h3></blockquote><h1 id="經濟繁榮衰退的週期"><a href="#經濟繁榮衰退的週期" class="headerlink" title="經濟繁榮衰退的週期"></a>經濟繁榮衰退的週期</h1><h2 id="鐘擺"><a href="#鐘擺" class="headerlink" title="鐘擺"></a>鐘擺</h2><p>六年，十年，是投資者公認的一個經濟上的循環。這個週期包含著一個高點，一個低點。但是在低點—&gt;高點—&gt;低點中間，發生了些什麼事情呢？</p><p>這本書裡面很清楚的說明了，其實每個高點低點之間，都是有清楚的一個傾向和信號的。</p><p>信貸擴大（經濟上升）週期：</p><ul><li>經濟進入繁榮期</li><li>資金提供者增多，資本基礎增加</li><li>壞消息極少，因此貸款風險與投資風險似乎已經減少</li><li>風險規避消失</li><li>金融機構開始擴大業務 - 確切的說，提供更多的資本</li><li>金融機構透過降低必要收益（如降息）降低信貸水平，為特定交易提供更多的資本</li><li>最終，資本提供者開始為不具備資格的借貸人和項目提供資本</li></ul><p>開始逆轉。信貸縮減（經濟下降）週期：</p><ul><li>損失導致借款人開始迴避</li><li>風險規避增加，伴隨著利率，信貸限制與條款的提高</li><li>可得資本減少 - 在週期谷底，只有資質好的借款人才能借到資本</li><li>企業迫切需要資本，借款人無法展期債務，導致債務違約及企業破產</li><li>這一連串的過程導致並加劇經濟萎縮</li><li>到了谷底之後，又回到了信貸擴大第一條</li></ul><img data-src="/2020/09/04/2020-09-04-the-most-important-thing-illuminated/plummet.png" class="" width="500"><p>Joel Greenblatt 將這一連串當作一個鐘擺來比喻。多數的時候，鐘擺處於上升或是下降的情況。同時，鐘擺在兩邊端點的時候，擺回的加速度是最快的。這也很好的說明了，為什麼投資者在大衰退的時候總是損失很多。因為人總是對於這麼突然的轉變來不及反應，來不及做風險規避。</p><h2 id="耐心等待機會"><a href="#耐心等待機會" class="headerlink" title="耐心等待機會"></a>耐心等待機會</h2><p>面對在這樣的週期下，書中提到作為專業投資者並不是應該在經濟低靡的時候積極四處尋找投資機會。比起放寬標靶的大小來找尋更多相對好的投資機會，縮小你的準心來精準狙擊每一個機會是更為重要。</p><p>Joel Greenblatt說：專業投資者最難掌握的技能之一，就是：日復一日的工作，卻一無所獲</p><p>書中寫到，巴菲特曾在 Berkshire Hathaway 基金的1997年年報中提到了棒球員泰德. 威廉斯。曾經17次入選全明星賽，生涯打擊率3成44，521支全壘打。重要的是，他的生涯上壘率達48%為大聯盟紀錄。他在『擊球的科學』一書中寫到，他將好球帶分成77個球般大小的區域，並了解在哪個區域才是最佳得擊球區域，只可惜棒球員不能整天期待投手投出最佳位置的球，這個比賽是有三好球三振的。<br><img data-src="/2020/09/04/2020-09-04-the-most-important-thing-illuminated/strike_zone.png" class="" width="300"></p><p>相對於棒球員，投資者在這方面是佔有優勢的。投資者可以一直等待著無限個好球飛進好球帶而不揮棒。我們只需要等一個好球：飛進最佳擊球點的好球。</p><p>有很好的一句話來總結這部分：投資者的工作是抓住迎面而來的機會，而不是憑空創造機會。</p><h2 id="切換進攻與防守"><a href="#切換進攻與防守" class="headerlink" title="切換進攻與防守"></a>切換進攻與防守</h2><p>投資與足球其實共同分享著同一個中心理念：進攻和防守是一體的。在牛市時，我們可以更積極的去尋找被低估的股票來增加收益; 相對的，在熊市的時候，我們則是選擇防守。減低交易的次數，藉由花更多的時間來研究並閱讀，主動提升交易的成功率。</p><p>但是投資不是二選一的選擇題。記得進攻時為防守做好準備，防守時為進攻佈局。</p><blockquote><h3 id="記得：40-的下跌，需要67-的上漲才能回到原點"><a href="#記得：40-的下跌，需要67-的上漲才能回到原點" class="headerlink" title="記得：40% 的下跌，需要67%的上漲才能回到原點"></a><em>記得：40% 的下跌，需要67%的上漲才能回到原點</em></h3></blockquote><h2 id="市場群體走勢"><a href="#市場群體走勢" class="headerlink" title="市場群體走勢"></a>市場群體走勢</h2><p>我們應該如何找出過熱指標，並知道何時應該進攻或是防守呢？世界上的所有學者和經濟學家花了不知幾百年，仍舊在尋找不同的指標，論文，趨勢，事件來更清楚的找出熊市和牛士的分界線，這些研究至今仍在持續地進行中。我們該怎麼辦？<br>書中寫道：</p><blockquote><p><em>我們不可能知道過熱的市場將何時冷卻，也不可能知道市場將何時止跌上漲。</em><br><em>不過，雖然我們不知道將去向哪裡，但我們應該知道自己身處何方。</em><br><em>我們可以透過周邊人的行為推知市場處在週期中的哪個階段</em></p></blockquote><p>翻成白話就是：我們只能靠著多閱讀，多看新聞，去了解情勢來調整我們自己的投資策略。</p><blockquote><h3 id="自求多福吧"><a href="#自求多福吧" class="headerlink" title="自求多福吧~~~"></a><em>自求多福吧~~~</em></h3></blockquote><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><h2 id="需要勇氣"><a href="#需要勇氣" class="headerlink" title="需要勇氣"></a>需要勇氣</h2><p>投資者需要勇氣去挑戰傳統思維及市場大眾。當你找到你確信的低價股票和最佳買進時機，去吧！當你被大眾思維(<em>Herd behavior</em>)所影響了你的決定，那麼你先前所花的時間和所做的研究都會白費並大打折扣，直接影響到你的投資利潤的。</p><h2 id="承認運氣的成分"><a href="#承認運氣的成分" class="headerlink" title="承認運氣的成分"></a>承認運氣的成分</h2><p><strong><em>承認你的投資成功有部分是來自於運氣吧！</em></strong></p><p>除非你有你的投資方程式可以重複地獲取成功，那麼你的部分收益還是部分來自於運氣(其實就是風險)。持續學習和持續實驗，提高你的打擊率。</p><blockquote><p><em>玩俄羅斯轉盤賺來的一千萬美金，其價值不同於靠辛勤努力和嫻熟的技術賺來的一千萬美金</em><br><em>兩者的金額相同，能買相同的東西，對會計師來說，他們完全相同。</em><br><em>但前者的隨機成分比後者高，性質也很不一樣</em><br><em>Fooled by Randomness: The Hidden Role of Chance in Life and in the Markets』 - by Nassim Nicholas Taleb</em></p></blockquote><h2 id="正確的看待風險"><a href="#正確的看待風險" class="headerlink" title="正確的看待風險"></a>正確的看待風險</h2><p>不是無限制的要求高利潤，記得第一節看到的圖片嗎？風險包含了發生機率與影響規模大小。就算遭受風險的機率極小，但遭受的損失也可能是極大的。典型的投資者對於自己收益的態度應該是：</p><blockquote><p>我需要8%。不過，我更樂意得到10%。12%更加不錯，但是我不會想要更多了，因為這樣會加大我無法承受的風險。我不需要獲得20%那麼多。</p></blockquote><p><strong><em>廢話完畢</em></strong></p>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2020/09/04/2020-09-04-the-most-important-thing-illuminated/cover.jpg&quot; class=&quot;&quot; width=&quot;200&quot;&gt;
&lt;p style=&quot;text-align:center; color: grey;&quot;&gt;
    &lt;i&gt;投資最重要的事 - By &lt;b&gt;Howard Marks&lt;/b&gt;&lt;/i&gt;
&lt;/p&gt;


&lt;p&gt;這本書是今年五月的時候買的。當時COVID-19的疫情還正在全球散佈中，我想利用在家時間多補充點金融相關的知識，所以才買了這本書。</summary>
    
    
    
    <category term="Readings" scheme="http://mikelhsia.github.io/categories/Readings/"/>
    
    
    <category term="Investing" scheme="http://mikelhsia.github.io/tags/Investing/"/>
    
  </entry>
  
  <entry>
    <title>An investment strategy that takes you three days a year</title>
    <link href="http://mikelhsia.github.io/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/"/>
    <id>http://mikelhsia.github.io/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/</id>
    <published>2020-08-21T03:57:46.000Z</published>
    <updated>2020-11-10T12:29:59.620Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/cover.jpg" class="" width="400"><blockquote><p><em>This is my first article after 2 months of digging, reading, researching, and backtesting. Here I would like to share the result with people who are interested in it and welcome any thoughts from anyone.</em></p></blockquote><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a name="question"></a><br>Before diving into this article, you can start with reading the following thoughts and see whether these are the situations that you’re facing: <a id="more"></a></p><ul><li><em>My daytime salary is stable, and I want to make some small money by investing in the stock market or ETFs</em></li><li><em>I don’t have a finance background or experience in putting money in the stock market before</em></li><li><em>I don’t want to spend too much time and I don’t have enough time to analyze tens of thousands of stocks myself</em></li><li><em>I know what I should do and how to do it, but buying stocks would literally consume the rest of my day as I don’t want to lose too much money on this.</em></li></ul><p>If you’ve asked these questions to yourself in the middle of the night or during work sometime, this article might help introduce you to some ideas to help you get rid of these thoughts that haunts you.</p><hr><h2 id="Background-Story-Magic-Formula-v-s-Acquirer’s-Multiple"><a href="#Background-Story-Magic-Formula-v-s-Acquirer’s-Multiple" class="headerlink" title="Background Story (Magic Formula v.s. Acquirer’s Multiple)"></a>Background Story (Magic Formula v.s. Acquirer’s Multiple)</h2><p>The Magic Formula was first introduced in the book “<strong><em>The Little Book that Beats the Market</em></strong>“ by <em>Joel Greenblatt</em>.</p><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/tlbtbtm.jpg" class="" width="200"><p>The formula is about using ranking of two fundamental stats: <a href="#terminology"><strong><em>Earnings Yield</em></strong></a> and <a href="#terminology"><strong><em>Return on Capital</em></strong></a> to quickly identify the value stocks/companies. Once we have our candidates picked, then we buy and hold them for a year and re-evaluate the performance of the portfolio annually. By applying these two numbers as your filters, you’ll be able to locate the stocks/companies that make more money (<em>high Return on Capital, or ROC</em>), but in the meantime is undervalued (<em>high Earnings Yield, or EY</em>).</p><p>And then <em>Tobias Carlisle</em> introduced an updated version of the Magic Formula, called Acquirer’s Multiple in his book “<strong><em>The Acquirer’s Multiple</em></strong>“.</p><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/tam.jpg" class="" width="200"><p>As Buffett said, a wonderful company is the one with a high return on equity. The Acquirer’s Multiple uses operating earnings instead of using EBIT. The formula is also inverted. Operating earnings is constructed from the top of the income statement down, whereas EBIT is constructed from the bottom up.</p><p>In short, <em>Greenblatt’s Magic Formula</em> is looking for a company that makes money for each dollar that stakeholders invested, while stakeholders pay as little as possible. This is what Buffet has been practicing as he preached over the years. And <em>Tobias’s Acquirer’s Multiple</em> is to find out the company’s cashflow hidden under the iceberg. The lower the Acquirer’s Multiple, the more value you get for the price you pay and the better the stock.</p><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/ev.png" class="" width="400"><p>In this article, I’m using <a href="https://www.quantopian.com">Quantopian</a> as the platform for constructing my research and backtesting the strategies to find out the result.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote><ul><li><a href="http://redhouse.statementdog.com/archives/1050">價值投資者：喬伊‧葛林布雷 (Joel Greenblatt)的神奇公式:『MAGIC FORMULA』</a> - by <a href="https://redhouse.statementdog.com/archives/author/redhouse"><em>雷浩斯</em></a></li><li><a href="https://www.gurufocus.com/news/818900/tobias-carlisle-greenblatt-builds-a-magic-formula-on-buffettstyle-ideas">Greenblatt builds a magic formula on Buffett style ideas</a> - by <a href="https://www.gurufocus.com/ic/space.php?do=article&amp;uid=200877&amp;author=Robert+Abbott"><em>Robert Abbott</em></a></li><li><a href="https://seekingalpha.com/article/4221743-acquirers-portfolio-year-in-review#:~:text=The%20Acquirer&#39;s%20Multiple%C2%AE%20differs,constructed%20from%20the%20bottom%20up">Acquirer’s portfolio year in review</a> - by <a href="https://seekingalpha.com/author/ryan-boselo"><em>Ryan Boselo</em></a></li><li><a href="https://www.quantopian.com/posts/magic-formula">Magic Formula Strategy in Quantopian</a> - from <a href="https://www.quantopian.com/"><em>Quantopian</em></a></li><li><a href="https://www.quantopian.com/posts/value-investing-in-quantopian-comparing-the-acquirers-multiple-to-the-magic-formula">Comparing the Acquirer’s Multiple to the Magic Formula</a> - from <a href="https://www.quantopian.com/"><em>Quantopian</em></a></li></ul></blockquote><hr><h2 id="Here-comes-the-Meat"><a href="#Here-comes-the-Meat" class="headerlink" title="Here comes the Meat!!"></a>Here comes the Meat!!</h2><h3 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a><strong>Assumptions</strong></h3><ul><li>Establish a threshold of market capitalization of the company (\$100M~\$1B).</li><li>Exclude stocks in the utility and financial sector</li><li>Exclude foreign companies ADR (American Depositary Receipts).</li></ul><h3 id="Formula"><a href="#Formula" class="headerlink" title="Formula"></a><strong>Formula</strong></h3><ul><li>Using <strong>Magic Formula</strong><script type="math/tex; mode=display">Return on Capital = \frac{EBIT}{Net Working Capital + Net Fixed Assets}</script><script type="math/tex; mode=display">Earning Yield = \frac{EBIT}{Enterprise Value}</script><ul><li>We’re going to rank both earning yield and roic (the higher the value, the smaller number the rank)</li><li>Add up these two ranks</li><li>We take the top <em>N</em> stocks that rank the highest (top <em>N</em> smaller rank numbers)</li></ul></li><li>Using <strong>Acquirer’s Multiple</strong><script type="math/tex; mode=display">Acquirer's Multiple = \frac{Enterprise Value}{EBIT + Capital Expenditure}</script><ul><li>We’re going to rank the calculated AM number in <strong>reverse order</strong> (the lower the value, the smaller number th rank)</li><li>We take the top <em>N</em> stocks that rank the highest (top <em>N</em> smaller rank numbers)</li></ul></li></ul><h3 id="Weight-distribution"><a href="#Weight-distribution" class="headerlink" title="Weight distribution"></a><strong>Weight distribution</strong></h3><p>We are going to test how these three different weight distribution methods impact the return of our portfolio, and find out which one would be better.</p><ul><li>Weight evenly</li><li>Weight by rank</li><li>Weight by Market Cap</li></ul><hr><h2 id="Let’s-get-started"><a href="#Let’s-get-started" class="headerlink" title="Let’s get started"></a><strong>Let’s get started</strong></h2><p>Most research and papers have suggested that owning 25~30 stocks would adequately diversify the sector risk of the portfolio. For individual investors like us, owning that many stocks would be too troublesome. I’m thinking of using 12 as the limit. Also, we’re going to rebalance our portfolio once per year, selling losers one week before the year-mark and winners one week after the year mark. This strategy will need to continue over a long-term period (5~10 years). In this backtest, we’re using <code>2011/01/01 ~ 2020/07/30</code> as the backtest period.</p><h3 id="How-to-understand-the-diagram"><a href="#How-to-understand-the-diagram" class="headerlink" title="How to understand the diagram?"></a>How to understand the diagram?</h3><blockquote><ul><li><strong>Blue line</strong>: returns of the algorithm</li><li><strong>Red line</strong>: returns of SPY (S&amp;P 500)</li><li><strong>Returns</strong>: the final return of the algorithm at the end of the backtest date</li><li><strong>Alpha</strong>: Excess market neutral return that is generated by this strategy</li><li><strong>Beta</strong>: Represents an individual stock’s returns against those of the market as a whole</li><li><strong>Sharpe</strong>: How much returns can we get if we take one more unit of risk</li><li><strong>Drawdown</strong>: Maximum lost in a continuous period</li><li><strong>Capacity</strong>: Max number of stocks that we’re going to contain in our portfolio</li></ul></blockquote><h3 id="Scenario-1-Buy-all-and-sell-all-at-the-beginning-of-each-year"><a href="#Scenario-1-Buy-all-and-sell-all-at-the-beginning-of-each-year" class="headerlink" title="Scenario 1: Buy all and sell all at the beginning of each year"></a>Scenario 1: Buy all and sell all at the beginning of each year</h3><p><strong>Magic Formula</strong></p><div class="table-container"><table><thead><tr><th></th><th>Capacity = 12</th><th>Capacity = 25</th></tr></thead><tbody><tr><td>Rank weighted</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/1-m-r-12.png" alt="1-m-r-12.png"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/1-m-r-25.png" alt="1-m-r-25.png"></td></tr><tr><td>Evenly weighted</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/1-m-e-12.png" alt="1-m-e-12.png"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/1-m-e-25.png" alt="1-m-e-25.png"></td></tr><tr><td>Market cap weighted</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/1-m-m-12.png" alt="1-m-m-12.png"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/1-m-m-25.png" alt="1-m-m-25.png"></td></tr></tbody></table></div><p><strong>Acquirer’s Multiple</strong></p><div class="table-container"><table><thead><tr><th></th><th>Capacity = 12</th><th>Capacity = 25</th></tr></thead><tbody><tr><td>Rank weighted</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/1-a-r-12.png" alt="1-a-r-12"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/1-a-r-25.png" alt="1-a-r-25"></td></tr><tr><td>Evenly weighted</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/1-a-e-12.png" alt="1-a-e-12"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/1-a-e-25.png" alt="1-a-e-25"></td></tr><tr><td>Market cap weighted</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/1-a-m-12.png" alt="1-a-m-12"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/1-a-m-25.png" alt="1-a-m-25"></td></tr></tbody></table></div><p><strong>Conclusion</strong></p><ul><li>Big capacity doesn’t really imply a well diversified portfolio. You could include a stock that potentially hurts the return of the portfolio.</li><li>Seems AM does do better than MF in this scenario.</li><li>We can’t tell which weight distribution method is better at the moment.</li><li><code>demean(groupby=Sector())</code> is a built-in factor function in Quantopian IDE. It deducts the mean of industry sector from each stock, removing part of the differences by sector. In the code we added this function, and it did help improve the performance as it has normalized the Sector risk/exposure.</li></ul><h3 id="Scenario-2-Buy-all-and-sell-all-and-use-rolling-data-for-the-past-three-quarters"><a href="#Scenario-2-Buy-all-and-sell-all-and-use-rolling-data-for-the-past-three-quarters" class="headerlink" title="Scenario 2: Buy all and sell all and use rolling data for the past three quarters"></a>Scenario 2: Buy all and sell all and use rolling data for the past three quarters</h3><p>In this scenario, for all the factors such as EV, EBIT, ROIC, …etc, I’m using a three-quarter rolling mean to smooth the data. By doing this, we can mitigate the zig and zag of the quarter numbers and reduce the chances of picking a stock that only stands out in one specific quarter.</p><p><strong>Magic Formula</strong></p><div class="table-container"><table><thead><tr><th></th><th>Capacity = 12</th><th>Capacity = 25</th></tr></thead><tbody><tr><td>Rank weighted</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/2-m-r-12.png" alt="2-m-r-12"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/2-m-r-25.png" alt="2-m-r-25"></td></tr><tr><td>Evenly weighted</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/2-m-e-12.png" alt="2-m-e-12"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/2-m-e-25.png" alt="2-m-e-25"></td></tr><tr><td>Market cap weighted</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/2-m-m-12.png" alt="2-m-m-12"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/2-m-m-25.png" alt="2-m-m-25"></td></tr></tbody></table></div><p><strong>Acquirer’s Multiple</strong></p><div class="table-container"><table><thead><tr><th></th><th>Capacity = 12</th><th>Capacity = 25</th></tr></thead><tbody><tr><td>Rank weighted</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/2-a-r-12.png" alt="2-a-r-12"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/2-a-r-25.png" alt="2-a-r-25"></td></tr><tr><td>Evenly weighted</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/2-a-e-12.png" alt="2-a-e-12"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/2-a-e-25.png" alt="2-a-e-25"></td></tr><tr><td>Market cap weighted</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/2-a-m-12.png" alt="2-a-m-12"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/2-a-m-25.png" alt="2-a-m-25"></td></tr></tbody></table></div><p><strong>Conclusion</strong></p><ul><li>When implementing the rolling rank, I’ve noticed that a lot of stocks are missing EBIT or missing ROIC in their historic data sets, so I dropped those completely. If we had more complete data, the performance of this method might be better.</li><li>While backtesting using the AM method, we can clearly see the return drastically decrease starting in 2016. By looking at the <em>stocks_owned</em> in the diagrams, you’ll see that three stocks disappeared in the middle of the year. After printing out the owned stocks for each period, we found out that the following three stocks: BMR, SWI, and IRC had either changed their symbol or been delisted from the market, resulting in part of our capital being locked down. I tried to figure out a way to update this in either the log or the portfolio capital, but found that this needs to be managed manually.</li><li>Rank weighted distribution is the best option here as it guides us to put more capital in the better quality stocks/companies.</li></ul><h3 id="Scenario-3-Buy-three-stocks-maximum-per-month-Adjust-portfolio-monthly-and-use-rolling-three-quarters-factors"><a href="#Scenario-3-Buy-three-stocks-maximum-per-month-Adjust-portfolio-monthly-and-use-rolling-three-quarters-factors" class="headerlink" title="Scenario 3: Buy three stocks maximum per month + Adjust portfolio monthly and use rolling three quarters factors"></a>Scenario 3: Buy three stocks maximum per month + Adjust portfolio monthly and use rolling three quarters factors</h3><p>In this scenario, we re-balance our portfolio on a monthly basis, and buy the top 3 stocks per month in order to make sure we’re able to pick the top ranked stocks. For theMarket Cap-weighted and Rank-weighted method, I discarded them as you need to adjust your positions every month. This also means, that the number of turnovers would increase quite a lot compared to in an evenly-weighted portfolio. I would rather look into this strategy later than now.</p><p><strong>Magic Formula</strong></p><div class="table-container"><table><thead><tr><th></th><th>Capacity = 12</th><th>Capacity = 25</th></tr></thead><tbody><tr><td>Rank weighted (x)</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/3-m-r-12.png" alt="3-m-r-12"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/3-m-r-25.png" alt="3-m-r-25"></td></tr><tr><td>Evenly weighted</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/3-m-e-12.png" alt="3-m-e-12"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/3-m-e-25.png" alt="3-m-e-25"></td></tr><tr><td>Market cap weighted (x)</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/3-m-m-12.png" alt="3-m-m-12"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/3-m-m-25.png" alt="3-m-m-25"></td></tr></tbody></table></div><p><strong>Acquirer’s Multiple</strong></p><div class="table-container"><table><thead><tr><th></th><th>Capacity = 12</th><th>Capacity = 25</th></tr></thead><tbody><tr><td>Evenly weighted</td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/3-a-e-12.png" alt="3-a-e-12"></td><td><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/3-a-e-25.png" alt="3-a-e-25"></td></tr></tbody></table></div><p><strong>Conclusion</strong></p><ul><li>In this scenario, we saw the <em>stocks_owned</em> line has very frequent movement, meaning we’re trading very frequently.</li></ul><h3 id="Additional-step"><a href="#Additional-step" class="headerlink" title="Additional step"></a>Additional step</h3><p>In the magic formula, we’re actually assuming the <code>EY_rank</code> and <code>roic_rank</code> are weighted equally.</p><script type="math/tex; mode=display">MF\_rank = 0.5 \times EY\_rank + 0.5 \times roic\_rank</script><p>So what we could do is to use a linear regression to find out the relative coefficient of these two independent variables. Once we have these two coefficients, we can better describe the relation between these variables, and better predict the quality of the company with the Magic Formula.</p><script type="math/tex; mode=display">MF\_rank = 0.7 \times EY\_rank + 0.3 \times roic\_rank</script><p>However, after performing an OLS linear regression (<em>it’s a basic type of linear regression in the python built-in statsmodels package </em>) to find out the coefficient of the two independent variables, I found out that the data set is very skewed in terms of the distribution of the daily return of the stock price across stocks. To dive into this topic further, there’re a few more things we can do:</p><ol><li>use <code>log return</code> over <code>daily percentage change</code></li><li>Demean the log return by sector</li></ol><p>But I’ll leave the thoughts here for now.</p><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/ols-1.png" class="" width="600"><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/ols-2.png" class="" width="600"><hr><h2 id="Final-words"><a href="#Final-words" class="headerlink" title="Final words"></a>Final words</h2><p>I’ll probably go with the strategy of <code>Scenario 2, 12 assets max, with rank-weighted distribution</code>. The total return has constantly beaten the S&amp;P 500 index over the years covered in the simulation. Also you got an alpha that is positive, a beta slightly over 1, an ok Sharpe ratio, and annual returns around 30% over 8 years. Even when the big slide of COVID-19 hit the market, this strategy still beat the market and was able to rebound quickly enough back to where it was.</p><img data-src="/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/2-m-r-12.png" class="" width="400"><p><strong>“What can I get out of this research and backtesting?”</strong> you must be wondering. To answer the questions that <a href="#question">we raised in the beginning of the article</a>, I believe this strategy does bring you the benefit that:</p><blockquote><p><em>We only need to spend <strong>1 morning and 2 evenings</strong> in the entire year to complete the trading actions of this Magic Formula strategy.</em></p></blockquote><p>Doesn’t this sound amazing and attractive!?</p><p>Thank you, and let me know if you have any thoughts.</p><hr><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><h3 id="Statistics-that-used-in-the-Magic-Formula"><a href="#Statistics-that-used-in-the-Magic-Formula" class="headerlink" title="Statistics that used in the Magic Formula"></a>Statistics that used in the Magic Formula</h3><p><a name="terminology"></a></p><ul><li>息税前利润(EBIT) = 净利润 + 财务费用 + 所得税费用</li><li>net_profit 净利润(元)</li><li>financial_expense 财务费用(元)</li><li>income_tax_expense 所得税费用(元)</li><li>固定资产净额(Net Fixed Assets) = 固定资产 - 工程物资 - 在建工程 - 固定资产清理<ul><li>fixed_assets 固定资产(元)</li><li>construction_materials 工程物资(元)</li><li>constru_in_process 在建工程(元)</li><li>fixed_assets_liquidation 固定资产清理(元)</li></ul></li><li>净营运资本(Net Working Capital)= 流动资产合计－流动负债合计<ul><li>total_current_assets 流动资产合计(元)</li><li>total_current_liability 流动负债合计(元)</li></ul></li><li>企业价值(Enterprise Value) = 总市值 + 负债合计 – 期末现金及现金等价物余额<ul><li>market_cap 总市值(亿元)</li><li>total_liability 负债合计(元)</li><li>cash_and_equivalents_at_end 期末现金及现金等价物余额(元)<br>Here I also attached the Quantopian code that I used to construct the research this time:</li></ul></li></ul><h3 id="Quantopian-code"><a href="#Quantopian-code" class="headerlink" title="Quantopian code"></a>Quantopian code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> quantopian.pipeline.classifiers.fundamentals <span class="keyword">import</span> Sector</span><br><span class="line"><span class="keyword">from</span> quantopian.algorithm <span class="keyword">import</span> attach_pipeline, pipeline_output, get_open_orders</span><br><span class="line"><span class="keyword">from</span> quantopian.pipeline <span class="keyword">import</span> Pipeline, CustomFactor</span><br><span class="line"><span class="keyword">from</span> quantopian.pipeline.filters <span class="keyword">import</span> QTradableStocksUS</span><br><span class="line"><span class="keyword">from</span> quantopian.pipeline.filters.morningstar <span class="keyword">import</span> IsPrimaryShare</span><br><span class="line"><span class="keyword">from</span> quantopian.pipeline.data <span class="keyword">import</span> Fundamentals</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RiskAdjValue</span>(<span class="params">CustomFactor</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    RiskAdjValue = Average value of past N quarters&#x27; / standard deviation of those values</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    num_of_quarter = <span class="number">3</span></span><br><span class="line">    window_length = <span class="number">65</span> * num_of_quarter</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compute</span>(<span class="params">self, today, assets, out, value, asof_date</span>):</span></span><br><span class="line">        <span class="comment"># asof_date: shape - (number of window, number of stocks)</span></span><br><span class="line">        <span class="comment"># Example:</span></span><br><span class="line">        <span class="comment"># for datetime 1: ([value of stock A, B, C, ...])</span></span><br><span class="line">        <span class="comment"># for datetime 2: ([value of stock A, B, C, ...])</span></span><br><span class="line">        <span class="comment"># for datetime 3: ([value of stock A, B, C, ...])</span></span><br><span class="line">        values = value</span><br><span class="line">        <span class="keyword">for</span> column_ix <span class="keyword">in</span> range(asof_date.shape[<span class="number">1</span>]):</span><br><span class="line">            _, unique_indices = np.unique(asof_date[:, column_ix], return_index=<span class="literal">True</span>)</span><br><span class="line">            quarterly_values = values[unique_indices, column_ix]</span><br><span class="line">            <span class="keyword">if</span> len(quarterly_values) &lt; self.num_of_quarter:</span><br><span class="line">                quarterly_values = np.hstack([</span><br><span class="line">                    np.repeat([np.nan], self.num_of_quarter - len(quarterly_values)),</span><br><span class="line">                    quarterly_values,</span><br><span class="line">                ])</span><br><span class="line">            out[column_ix] = np.nanmean(quarterly_values[-self.num_of_quarter:]) / np.nanstd(quarterly_values[-self.num_of_quarter:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>(<span class="params">context</span>):</span></span><br><span class="line">    <span class="comment"># Use below as weight_distribution method. Didn&#x27;t use Enum as it&#x27;s not in the quantopian import white list</span></span><br><span class="line">    <span class="comment"># context.weight_distribution = &#x27;RANK_WEIGHTED&#x27; | &#x27;EVENLY_WEIGHTED&#x27; | &#x27;MARKET_CAP_WEIGHTED&#x27;</span></span><br><span class="line">    context.weight_distribution = <span class="string">&#x27;MARKET_CAP_WEIGHTED&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># context.formula = &#x27;AM_rank&#x27; | &#x27;MF_rank&#x27;</span></span><br><span class="line">    context.formula = <span class="string">&#x27;MF_rank&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Max stocks in our portfolio</span></span><br><span class="line">    context.capacity = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">    my_pipe = make_pipeline()</span><br><span class="line">    attach_pipeline(my_pipe, <span class="string">&#x27;my_pipeline&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    set_slippage(slippage.FixedSlippage(spread=<span class="number">0.02</span>))</span><br><span class="line">    set_long_only()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#schedule for buying a week after the year start</span></span><br><span class="line">    schedule_function(func=buy_stocks,</span><br><span class="line">                      date_rule=date_rules.month_start(<span class="number">4</span>),</span><br><span class="line">                      time_rule=time_rules.market_open())</span><br><span class="line">    <span class="comment">#schedule for selling losers a week before the year start</span></span><br><span class="line">    schedule_function(func=sell_losers,</span><br><span class="line">                      date_rule=date_rules.month_end(<span class="number">4</span>),</span><br><span class="line">                      time_rule=time_rules.market_open())</span><br><span class="line">    <span class="comment">#schedule for selling winners on the 7th day of year start</span></span><br><span class="line">    schedule_function(func=sell_stocks,</span><br><span class="line">                      date_rule=date_rules.month_start(<span class="number">3</span>),</span><br><span class="line">                      time_rule=time_rules.market_close())</span><br><span class="line">    <span class="comment"># plot record variables</span></span><br><span class="line">    schedule_function(func=record_vars,</span><br><span class="line">                      time_rule=time_rules.market_close(),</span><br><span class="line">                      date_rule=date_rules.every_day())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_stocks</span>(<span class="params">context, data</span>):</span></span><br><span class="line">    today = get_datetime(<span class="string">&#x27;US/Eastern&#x27;</span>)</span><br><span class="line">    stocks_owned = sum(<span class="number">1</span> <span class="keyword">for</span> stock, position <span class="keyword">in</span> context.portfolio.positions.items() <span class="keyword">if</span> position.amount &gt; <span class="number">0</span>)</span><br><span class="line">    open_orders = get_open_orders()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> today.month == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> stock <span class="keyword">in</span> context.output.index:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data.can_trade(stock) <span class="keyword">or</span> stock <span class="keyword">in</span> open_orders:</span><br><span class="line">                print(<span class="string">&quot;= %s not tradable or in the open_orders...&quot;</span>%(stock))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> stocks_owned &gt;= context.capacity:</span><br><span class="line">                print(<span class="string">&quot;= Exceeded the limit&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># Skip stocks already owned</span></span><br><span class="line">            <span class="keyword">if</span> stock <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">                print(<span class="string">&quot;= %s is already in the portfolio&quot;</span>%(stock))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            order_target_percent(stock, context.output.T[stock][<span class="string">&#x27;weight&#x27;</span>])</span><br><span class="line">            print(<span class="string">&quot;+ Buy stocks: %s - weight: %.2f&quot;</span>%(stock, context.output.T[stock][<span class="string">&#x27;weight&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sell_losers</span>(<span class="params">context, data</span>):</span></span><br><span class="line">    today = get_datetime(<span class="string">&#x27;US/Eastern&#x27;</span>)</span><br><span class="line">    open_orders = get_open_orders()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> today.month == <span class="number">12</span> <span class="keyword">and</span> context.portfolio.positions_value != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> stock <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">            <span class="keyword">if</span> data.can_trade(stock) <span class="keyword">and</span> stock <span class="keyword">not</span> <span class="keyword">in</span> open_orders:</span><br><span class="line">                <span class="keyword">if</span> context.portfolio.positions[stock].cost_basis &gt; data.current(stock, <span class="string">&#x27;price&#x27;</span>):</span><br><span class="line">                    order_target_percent(stock, <span class="number">0</span>)</span><br><span class="line">                    print(<span class="string">&quot;- Sell loser stock: %s&quot;</span>%(stock))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">&quot;= Didn&#x27;t sell stock: %s&quot;</span>%(stock))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&quot;= %s is already in the portfolio&quot;</span>%(stock))</span><br><span class="line">                print(open_orders)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sell_stocks</span>(<span class="params">context, data</span>):</span></span><br><span class="line">    open_orders = get_open_orders()</span><br><span class="line">    today = get_datetime(<span class="string">&#x27;US/Eastern&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> today.month == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> stock <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">            <span class="keyword">if</span> data.can_trade(stock) <span class="keyword">and</span> stock <span class="keyword">not</span> <span class="keyword">in</span> open_orders:</span><br><span class="line">                order_target_percent(stock, <span class="number">0</span>)</span><br><span class="line">                print(<span class="string">&quot;- Sell winner stock: %s&quot;</span>%(stock))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&quot;= Didn&#x27;t sell stock: %s&quot;</span>%(stock))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pipeline</span>():</span></span><br><span class="line">    isPrimaryShare = IsPrimaryShare()</span><br><span class="line"></span><br><span class="line">    m &amp;= (Fundamentals.market_cap.latest &gt; <span class="number">1.00e9</span>)</span><br><span class="line">    m &amp;= (Fundamentals.market_cap.latest &lt; <span class="number">1.00e10</span>)</span><br><span class="line">    m &amp;= (Fundamentals.country_id.latest.eq(<span class="string">&#x27;USA&#x27;</span>))</span><br><span class="line">    m &amp;= (isPrimaryShare)</span><br><span class="line">    m &amp;= (</span><br><span class="line">        (Fundamentals.morningstar_sector_code.latest != <span class="number">103</span>) &amp;  <span class="comment"># Financial</span></span><br><span class="line">        (Fundamentals.morningstar_sector_code.latest != <span class="number">207</span>) &amp;  <span class="comment"># Utilities</span></span><br><span class="line">        (Fundamentals.morningstar_sector_code.latest != <span class="number">206</span>) &amp;  <span class="comment"># Healthcare</span></span><br><span class="line">        (Fundamentals.morningstar_sector_code.latest != <span class="number">309</span>) &amp;  <span class="comment"># Energy</span></span><br><span class="line">        (Fundamentals.morningstar_industry_code.latest != <span class="number">20645020</span>) &amp; <span class="comment"># Pharmaceutical Retailers - New</span></span><br><span class="line">        (Fundamentals.morningstar_industry_code.latest != <span class="number">20533080</span>) &amp; <span class="comment"># Pharmaceutical Retailers - Old</span></span><br><span class="line">        (Fundamentals.morningstar_industry_code.latest != <span class="number">10280010</span>) &amp; <span class="comment"># Apparel Retail - New</span></span><br><span class="line">        (Fundamentals.morningstar_industry_code.latest != <span class="number">10217033</span>) &amp; <span class="comment"># Apparel Stores - Old</span></span><br><span class="line">        (Fundamentals.morningstar_industry_group_code != <span class="number">10150</span>) &amp; <span class="comment"># Metals &amp; Mining - New</span></span><br><span class="line">        (Fundamentals.morningstar_industry_group_code != <span class="number">10106</span>) &amp; <span class="comment"># Metals &amp; Mining - Old</span></span><br><span class="line">        (Fundamentals.morningstar_industry_group_code != <span class="number">10160</span>) &amp; <span class="comment"># Coking Coal - New</span></span><br><span class="line">        (Fundamentals.morningstar_industry_group_code != <span class="number">10104</span>)   <span class="comment"># Coal - Old</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    ra_EBIT = RiskAdjValue(</span><br><span class="line">        inputs=[</span><br><span class="line">            Fundamentals.ebit,</span><br><span class="line">            Fundamentals.ebit_asof_date</span><br><span class="line">        ],</span><br><span class="line">        mask=m</span><br><span class="line">    )</span><br><span class="line">    ra_EV = RiskAdjValue(</span><br><span class="line">        inputs=[</span><br><span class="line">            Fundamentals.enterprise_value,</span><br><span class="line">            Fundamentals.enterprise_value_asof_date</span><br><span class="line">        ],</span><br><span class="line">        mask=m</span><br><span class="line">    )</span><br><span class="line">    ra_roic = RiskAdjValue(</span><br><span class="line">        inputs=[</span><br><span class="line">            Fundamentals.roic,</span><br><span class="line">            Fundamentals.roic_asof_date</span><br><span class="line">        ],</span><br><span class="line">        mask=m</span><br><span class="line">    )</span><br><span class="line">    ra_market_cap = RiskAdjValue(</span><br><span class="line">        inputs=[</span><br><span class="line">            Fundamentals.market_cap,</span><br><span class="line">            Fundamentals.market_cap_asof_date</span><br><span class="line">        ],</span><br><span class="line">        mask=m</span><br><span class="line">    )</span><br><span class="line">    ra_cap_exp = RiskAdjValue(</span><br><span class="line">        inputs=[</span><br><span class="line">            Fundamentals.capital_expenditure,</span><br><span class="line">            Fundamentals.capital_expenditure_asof_date</span><br><span class="line">        ],</span><br><span class="line">        mask=m</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Magic Formula</span></span><br><span class="line">    earnings_yield = ra_EBIT / ra_EV</span><br><span class="line">    EY_rank   = earnings_yield.rank(ascending=<span class="literal">False</span>, mask=m)</span><br><span class="line">    roic_rank = ra_roic       .rank(ascending=<span class="literal">False</span>, mask=m)</span><br><span class="line">    MF_rank   = EY_rank + roic_rank</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Acquirer&#x27;s Multiple</span></span><br><span class="line">    ACQ_MULTIPLE = ra_EV / (ra_EBIT + ra_cap_exp)</span><br><span class="line">    AM_rank = ACQ_MULTIPLE.demean(groupby=Sector()).rank(ascending=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Pipeline(</span><br><span class="line">        columns=&#123;</span><br><span class="line">            <span class="string">&#x27;ra_roic&#x27;</span>       : ra_roic,</span><br><span class="line">            <span class="string">&#x27;ra_EBIT&#x27;</span>       : ra_EBIT,</span><br><span class="line">            <span class="string">&#x27;ra_EV&#x27;</span>         : ra_EV,</span><br><span class="line">            <span class="string">&#x27;ra_market_cap&#x27;</span> : ra_market_cap,</span><br><span class="line">            <span class="string">&#x27;MF_rank&#x27;</span>       : MF_rank,</span><br><span class="line">            <span class="string">&#x27;AM_rank&#x27;</span>: AM_rank,</span><br><span class="line">            <span class="string">&#x27;market_cap&#x27;</span>: Fundamentals.market_cap.latest,</span><br><span class="line">        &#125;,</span><br><span class="line">        screen=m</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_trading_start</span>(<span class="params">context, data</span>):</span></span><br><span class="line">    <span class="comment"># Trim the output to the picked stocks</span></span><br><span class="line">    context.output = pipeline_output(<span class="string">&#x27;my_pipeline&#x27;</span>).dropna().sort_values(by=context.formula, ascending=<span class="literal">True</span>).head(context.capacity)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> context.weight_distribution == <span class="string">&#x27;EVENLY_WEIGHTED&#x27;</span>:</span><br><span class="line">        <span class="comment"># Weight evenly</span></span><br><span class="line">        context.output[<span class="string">&#x27;weight&#x27;</span>] = <span class="number">1.0</span> / int(context.capacity)</span><br><span class="line">    <span class="keyword">elif</span> context.weight_distribution == <span class="string">&#x27;RANK_WEIGHTED&#x27;</span>:</span><br><span class="line">        <span class="comment"># weight as rank normalize 0 to 1</span></span><br><span class="line">        <span class="comment"># Weight by rank number</span></span><br><span class="line">        context.output[<span class="string">&#x27;weight&#x27;</span>] = context.output[context.formula] / context.output[context.formula].sum()</span><br><span class="line">    <span class="keyword">elif</span> context.weight_distribution == <span class="string">&#x27;MARKET_CAP_WEIGHTED&#x27;</span>:</span><br><span class="line">        <span class="comment"># Weight by market value</span></span><br><span class="line">        context.output[<span class="string">&#x27;weight&#x27;</span>] = context.output[<span class="string">&#x27;market_cap&#x27;</span>] / context.output[<span class="string">&#x27;market_cap&#x27;</span>].sum()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">record_vars</span>(<span class="params">context, data</span>):</span></span><br><span class="line">    record(leverage=context.account.leverage,</span><br><span class="line">           stocks_owned=len(context.portfolio.positions))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2020/08/21/2020-08-21-magic-formula-vs-Acquirer-Multiples/cover.jpg&quot; class=&quot;&quot; width=&quot;400&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This is my first article after 2 months of digging, reading, researching, and backtesting. Here I would like to share the result with people who are interested in it and welcome any thoughts from anyone.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;&lt;a name=&quot;question&quot;&gt;&lt;/a&gt;&lt;br&gt;Before diving into this article, you can start with reading the following thoughts and see whether these are the situations that you’re facing:</summary>
    
    
    
    <category term="Quantitative Trading" scheme="http://mikelhsia.github.io/categories/Quantitative-Trading/"/>
    
    
    <category term="Strategy" scheme="http://mikelhsia.github.io/tags/Strategy/"/>
    
    <category term="Research" scheme="http://mikelhsia.github.io/tags/Research/"/>
    
  </entry>
  
  <entry>
    <title>Python Django Online Shop Setup</title>
    <link href="http://mikelhsia.github.io/2017/08/18/2018-08-18-Django-online-shop/"/>
    <id>http://mikelhsia.github.io/2017/08/18/2018-08-18-Django-online-shop/</id>
    <published>2017-08-18T04:57:40.000Z</published>
    <updated>2020-08-20T08:31:45.487Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2017/08/18/2018-08-18-Django-online-shop/python-django.png" class="" width="600"><p>Notes about how to utilize Django session to achieve caching user info.</p><a id="more"></a><h1 id="Building-e-commerce-shop"><a href="#Building-e-commerce-shop" class="headerlink" title="Building e-commerce shop"></a>Building e-commerce shop</h1><ul><li>Building Category and Product </li><li>Building Catalog views</li></ul><h2 id="Building-Django-Session"><a href="#Building-Django-Session" class="headerlink" title="Building Django Session"></a>Building Django Session</h2><p>You can set a variable in the session like this:<br><code>request.session[&#39;foo&#39;] = &#39;bar&#39;</code><br>Retrieve a session key:<br><code>request.session.get(&#39;foo&#39;)</code><br>Delete a key you stored in the session:<br><code>del request.session[&#39;foo&#39;]”</code></p><p>Django stores sessions in the database using the Session model of the <code>django.contrib.sessions</code> application.</p><p>Django offers the following options for storing session data:</p><ul><li><em>Database sessions</em>: Session data is stored in the database. This is the default session engine.</li><li><em>File-based sessions</em>: Session data is stored in the file system.</li><li><em>Cached sessions</em>: Session data is stored in a cache backend. You can specify cache backends using the <code>CACHES</code> setting. Storing session data in a cache system offers best performance.</li><li><em>Cached database sessions</em>: Session data is stored in a write-through cache and database. Reads only use the database if the data is not already in the cache.</li><li><em>Cookie-based sessions</em>: Session data is stored in the cookies that are sent to the browser.”</li></ul><p>You can customize sessions with other settings. Here are some of the important session related settings:</p><ul><li><strong>SESSION_COOKIE_AGE</strong>: This is the duration of session cookies in seconds. The default value is 1209600 (2 weeks).</li><li><strong>SESSION_COOKIE_DOMAIN</strong>: This domain is used for session cookies. Set this to .mydomain.com to enable cross-domain cookies.</li><li><strong>SESSION_COOKIE_SECURE</strong>: This is a boolean indicating that the cookie should only be sent if the connection is an HTTPS connection.</li><li><strong>SESSION_EXPIRE_AT_BROWSER_CLOSE</strong>: This is a boolean indicating that the session has to expire when the browser is closed.</li><li><strong>SESSION_SAVE_EVERY_REQUEST</strong>: This is a boolean that, if True, will save the session to the database on every request. The session expiration is also updated each time.”</li></ul><h2 id="Building-shopping-cart-by-using-session"><a href="#Building-shopping-cart-by-using-session" class="headerlink" title="Building shopping cart by using session"></a>Building shopping cart by using session</h2><ul><li>When a cart is needed, we check if a custom session key is set. If no cart is set in the session, we create a new cart and save it in the cart session key.</li><li>For successive requests, we perform the same check and get the cart items from the cart session key. We retrieve the cart items from the session and their related Product objects from the database.</li></ul><h2 id="Context-processors"><a href="#Context-processors" class="headerlink" title="Context processors"></a>Context processors</h2><p>Context processor is a Python function that takes the <code>request</code> object as an argument and returns a dictionarty that gets added to the request context and available to <strong><em>all</em></strong> the templates rendered using <code>RequestContext</code></p><ul><li><code>django.template.context_processors.debug</code>: This sets the Boolean debug and sql_queries variables in the context representing the list of SQL queries executed in the request</li><li><code>django.template.context_processors.request</code>: This sets the request variable in the context</li><li><code>django.contrib.auth.context_processors.auth</code>: This sets the user variable in the request</li><li><code>django.contrib.messages.context_processors.messages</code>: This sets a messages variable in the context containing all messages that have been sent using the messages framework.<br>Django also enables <code>django.template.context_processors.csrf</code> to avoid cross-site request forgery attacks. This context processor is not present in the settings, but it is always enabled and cannot be turned off for security reasons.</li></ul><h2 id="Including-OrderItem-inline-in-the-admin-site"><a href="#Including-OrderItem-inline-in-the-admin-site" class="headerlink" title="Including OrderItem inline in the admin site"></a>Including OrderItem inline in the admin site</h2><h2 id="Creating-customer-orders"><a href="#Creating-customer-orders" class="headerlink" title="Creating customer orders"></a>Creating customer orders</h2>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2017/08/18/2018-08-18-Django-online-shop/python-django.png&quot; class=&quot;&quot; width=&quot;600&quot;&gt;
&lt;p&gt;Notes about how to utilize Django session to achieve caching user info.&lt;/p&gt;</summary>
    
    
    
    <category term="Notes" scheme="http://mikelhsia.github.io/categories/Notes/"/>
    
    
    <category term="Python" scheme="http://mikelhsia.github.io/tags/Python/"/>
    
    <category term="Django" scheme="http://mikelhsia.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python Django Time Hut 4</title>
    <link href="http://mikelhsia.github.io/2017/08/11/2018-08-11-Django-timehut-4/"/>
    <id>http://mikelhsia.github.io/2017/08/11/2018-08-11-Django-timehut-4/</id>
    <published>2017-08-11T04:57:40.000Z</published>
    <updated>2020-08-20T08:31:41.444Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2017/08/11/2018-08-11-Django-timehut-4/python-django.png" class="" width="600"><p>Here are some more ideas from the eBook that could essentially help me to achieve them step by step.</p><a id="more"></a><h2 id="Tracking-User-Actions"><a href="#Tracking-User-Actions" class="headerlink" title="Tracking User Actions"></a>Tracking User Actions</h2><ul><li>Creating many-to-many relationships with an intermediary model</li><li>Building AJAX views</li><li>Creating an activity stream application</li><li>Adding generic relations to models</li><li>Optimizing QuerySets for related objects</li><li>Using signals for denormalizing counts</li><li>Storing item views in Redis</li></ul><h3 id="Building-a-follower-system"><a href="#Building-a-follower-system" class="headerlink" title="Building a follower system"></a>Building a follower system</h3><h4 id="Creating-many-to-many-relationships-with-an-intermediary-model"><a href="#Creating-many-to-many-relationships-with-an-intermediary-model" class="headerlink" title="Creating many-to-many relationships with an intermediary model"></a>Creating many-to-many relationships with an intermediary model</h4><p><code>User.add_to_class(&#39;following&#39;, models.ManyToManyField(&#39;self&#39;, through=Contact, related_name=&#39;followers&#39;, symmetrical=False))</code><br>We can’t alter the User class directly because it belongs to the django.contrib.auth application<br>We are going to take a slightly different approach, by adding this field dynamically to the user model (Monkey-patch)</p><h2 id="tell-Django-to-use-our-custom-intermediary-model-for-the-relationship-by-adding-through-Contact-to-the-ManyToManyField"><a href="#tell-Django-to-use-our-custom-intermediary-model-for-the-relationship-by-adding-through-Contact-to-the-ManyToManyField" class="headerlink" title="- tell Django to use our custom intermediary model for the relationship by adding through=Contact to the ManyToManyField."></a>- tell Django to use our custom intermediary model for the relationship by adding through=Contact to the ManyToManyField.</h2><h2 id="Keep-in-mind-that-in-most-cases-it-is-preferable-to-add-fields-to-the-Profile-model-we-created-before-instead-of-monkey-patching-the-User-model-Django-also-allows-you-to-use-custom-user-models"><a href="#Keep-in-mind-that-in-most-cases-it-is-preferable-to-add-fields-to-the-Profile-model-we-created-before-instead-of-monkey-patching-the-User-model-Django-also-allows-you-to-use-custom-user-models" class="headerlink" title="Keep in mind that in most cases, it is preferable to add fields to the Profile model we created before, instead of monkey-patching the User model. Django also allows you to use custom user models."></a>Keep in mind that in most cases, it is preferable to add fields to the Profile model we created before, instead of monkey-patching the User model. Django also allows you to use custom user models.</h2><p>Django forces the relationship to be symmetrical. In this case, we are setting symmetrical=False to define a non-symmetric relation. This is, if I follow you, it doesn’t mean you automatically follow me.</p><h3 id="Creating-list-and-detail-views-for-user-profiles"><a href="#Creating-list-and-detail-views-for-user-profiles" class="headerlink" title="Creating list and detail views for user profiles"></a>Creating list and detail views for user profiles</h3><h3 id="Building-an-Ajax-view-to-follow-users"><a href="#Building-an-Ajax-view-to-follow-users" class="headerlink" title="Building an Ajax view to follow users"></a>Building an Ajax view to follow users</h3><h4 id="Using-the-contenttypes-framework"><a href="#Using-the-contenttypes-framework" class="headerlink" title="Using the contenttypes framework"></a>Using the contenttypes framework</h4><p>ContentType model</p><ul><li><code>app_label</code>: The name of the application the model belongs to. This is automatically taken from the app_label attribute of the model Meta options. For example, our Image model belongs to the application images.<br>model: The name of the model class.</li><li><code>name</code>: The human-readable name of the model. This is automatically taken from the verbose_name attribute of the model Meta options</li></ul><h4 id="Adding-generic-relations-to-your-models"><a href="#Adding-generic-relations-to-your-models" class="headerlink" title="Adding generic relations to your models"></a>Adding generic relations to your models</h4><h4 id="Avoiding-duplicate-actions-in-the-activity-stream"><a href="#Avoiding-duplicate-actions-in-the-activity-stream" class="headerlink" title="Avoiding duplicate actions in the activity stream"></a>Avoiding duplicate actions in the activity stream</h4><h4 id="Adding-user-actions-to-the-activity-stream"><a href="#Adding-user-actions-to-the-activity-stream" class="headerlink" title="Adding user actions to the activity stream"></a>Adding user actions to the activity stream</h4><ul><li>A user bookmarks an image</li><li>A user likes/unlikes an image</li><li>A user creates an account</li><li>A user follows/unfollows another user<h4 id="Displaying-the-activity-stream"><a href="#Displaying-the-activity-stream" class="headerlink" title="Displaying the activity stream"></a>Displaying the activity stream</h4><h4 id="Optimizing-QuerySets-that-involve-related-objects"><a href="#Optimizing-QuerySets-that-involve-related-objects" class="headerlink" title="Optimizing QuerySets that involve related objects"></a>Optimizing QuerySets that involve related objects</h4></li><li>Using <code>select_related</code>: We are using user__profile to join the profile table too in one single SQL query. If you call select_related() without passing any arguments to it, it will retrieve objects from all ForeignKey relationships. Always limit select_related() to the relationships that will be accessed afterwards.</li><li>Using <code>prefetch_related</code>: select_related() cannot work for many-to-many or many-to-one relationships (ManyToMany or reverse ForeignKey fields). Django offers a different queryset method called prefetch_related that works for many-to-many and many-to-one relations in addition to the relations supported by select_related(). The prefetch_related() method performs a separate lookup for each relationship and joins the results using Python. This method also supports prefetching of GenericRelation and GenericForeignKey.<h4 id="Creating-templates-for-actions"><a href="#Creating-templates-for-actions" class="headerlink" title="Creating templates for actions"></a>Creating templates for actions</h4></li></ul><h3 id="Using-signals-for-denormalizing-counts"><a href="#Using-signals-for-denormalizing-counts" class="headerlink" title="Using signals for denormalizing counts"></a>Using signals for denormalizing counts</h3><p><code>Denormalization</code> is making data redundant in a way that it optimizes read performance. You could improve your queries by denormalizing counts. The drawback is that we have to keep the redundant data updated.</p><h4 id="Working-with-signals-Django-signal-dispatcher"><a href="#Working-with-signals-Django-signal-dispatcher" class="headerlink" title="Working with signals (Django signal dispatcher)"></a>Working with signals (Django signal dispatcher)</h4><p>Django provides several signals for models located at <code>django.db.models.signals</code>. Some of these signals are:</p><ul><li><code>pre_save</code> and <code>post_save</code>: Sent before or after calling the <code>save()</code> method of a model</li><li><code>pre_delete</code> and <code>post_delete</code>: Sent before or after calling the <code>delete()</code> method of a model or queryset</li><li><code>m2m_changed</code>: Sent when a <code>ManyToManyField</code> on a model is changed</li></ul><h4 id="Defining-application-configuration-classes"><a href="#Defining-application-configuration-classes" class="headerlink" title="Defining application configuration classes"></a>Defining application configuration classes</h4><h3 id="Using-Redis-for-storing-item-views"><a href="#Using-Redis-for-storing-item-views" class="headerlink" title="Using Redis for storing item views"></a>Using Redis for storing item views</h3>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2017/08/11/2018-08-11-Django-timehut-4/python-django.png&quot; class=&quot;&quot; width=&quot;600&quot;&gt;
&lt;p&gt;Here are some more ideas from the eBook that could essentially help me to achieve them step by step.&lt;/p&gt;</summary>
    
    
    
    <category term="Notes" scheme="http://mikelhsia.github.io/categories/Notes/"/>
    
    
    <category term="Python" scheme="http://mikelhsia.github.io/tags/Python/"/>
    
    <category term="Django" scheme="http://mikelhsia.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python Django Time Hut 3</title>
    <link href="http://mikelhsia.github.io/2017/08/09/2018-08-09-Django-timehut-3/"/>
    <id>http://mikelhsia.github.io/2017/08/09/2018-08-09-Django-timehut-3/</id>
    <published>2017-08-09T04:57:40.000Z</published>
    <updated>2020-08-20T08:31:37.549Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2017/08/09/2018-08-09-Django-timehut-3/python-django.png" class="" width="600"><p>In this article, I’m putting the thoughts to create a JavaScript bookmarklet to share content from other sites into your website, and you will implement AJAX features into your project using jQuery and Django, which is originally captured from the eBook about Django that I’m reading…<br><a id="more"></a></p><p>This chapter will cover the following points:</p><ul><li>Creating many-to-many relationships</li><li>Customizing behavior for forms</li><li>Using jQuery with Django</li><li>Building a jQuery bookmarklet</li><li>Generating image thumbnails using sorl-thumbnail</li><li>Implementing AJAX views and integrating them with jQuery</li><li>Creating custom decorators for views</li><li>Building AJAX pagination</li></ul><h3 id="Posting-content-from-other-websites"><a href="#Posting-content-from-other-websites" class="headerlink" title="Posting content from other websites"></a>Posting content from other websites</h3><h4 id="Cleaning-form-fields"><a href="#Cleaning-form-fields" class="headerlink" title="Cleaning form fields"></a>Cleaning form fields</h4><h4 id="Overriding-the-save-method-of-a-ModelForm"><a href="#Overriding-the-save-method-of-a-ModelForm" class="headerlink" title="Overriding the save() method of a ModelForm"></a>Overriding the save() method of a ModelForm</h4><h4 id="Building-a-bookmarklet-with-jQuery"><a href="#Building-a-bookmarklet-with-jQuery" class="headerlink" title="Building a bookmarklet with jQuery"></a>Building a bookmarklet with jQuery</h4><h4 id="Building-detail-page-for-image-liked"><a href="#Building-detail-page-for-image-liked" class="headerlink" title="Building detail page for image liked"></a>Building detail page for image liked</h4><h4 id="Adding-Ajax-actions-with-jQuery"><a href="#Adding-Ajax-actions-with-jQuery" class="headerlink" title="Adding Ajax actions with jQuery"></a>Adding Ajax actions with jQuery</h4><ul><li>add() passing an object that is already present in the related object set does not duplicate it and thus</li><li>remove() passing an object that is not in the related object set does nothing</li><li>Another many-to-many manager is clear(), which removes all objects from the related object set</li></ul><p><code>JsonResponse</code> class provided by Django, which returns an HTTP response with an <code>application/json</code> content type, converting the given object into a JSON output.</p><p><strong>Cross-Site Request Forgery in AJAX requests</strong><br>Django allows you to set a custom X-CSRFToken header in your AJAX requests with the value of the CSRF token.</p><p>In order to include the token in all requests, you need to:</p><ol><li>Retrieve the CSRF token form the csrftoken cookie, which is set if CSRF protection is active</li><li>Send the token in the AJAX request using the X-CSRFToken header</li></ol><h4 id="Creating-custom-decorators-for-your-views"><a href="#Creating-custom-decorators-for-your-views" class="headerlink" title="Creating custom decorators for your views"></a>Creating custom decorators for your views</h4><p>We are going to restrict our AJAX views to allow only requests generated via AJAX. The Django Request object provides an <code>is_ajax()</code> method that checks if the request is being made with <code>XMLHttpRequest</code>, which means it is an AJAX request. This value is set in the <code>HTTP_X_REQUESTED_WITH</code> HTTP header, which is included in AJAX requests by most JavaScript libraries.</p><h4 id="Adding-AJAX-pagination-to-your-list-views"><a href="#Adding-AJAX-pagination-to-your-list-views" class="headerlink" title="Adding AJAX pagination to your list views"></a>Adding AJAX pagination to your list views</h4><ul><li><code>empty_page</code>: Allows us to know if the user is in the last page and retrieves an empty page. As soon as we get an empty page we will stop sending additional AJAX requests because we will assume there are no more results.</li><li><code>block_request</code>: Prevents from sending additional requests while an AJAX request is in progress</li></ul>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2017/08/09/2018-08-09-Django-timehut-3/python-django.png&quot; class=&quot;&quot; width=&quot;600&quot;&gt;
&lt;p&gt;In this article, I’m putting the thoughts to create a JavaScript bookmarklet to share content from other sites into your website, and you will implement AJAX features into your project using jQuery and Django, which is originally captured from the eBook about Django that I’m reading…&lt;br&gt;</summary>
    
    
    
    <category term="Notes" scheme="http://mikelhsia.github.io/categories/Notes/"/>
    
    
    <category term="Python" scheme="http://mikelhsia.github.io/tags/Python/"/>
    
    <category term="Django" scheme="http://mikelhsia.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python Django Time Hut 2</title>
    <link href="http://mikelhsia.github.io/2017/08/04/2018-08-05-Django-timehut-2/"/>
    <id>http://mikelhsia.github.io/2017/08/04/2018-08-05-Django-timehut-2/</id>
    <published>2017-08-04T04:57:40.000Z</published>
    <updated>2020-08-20T08:31:30.541Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2017/08/04/2018-08-05-Django-timehut-2/python-django.png" class="" width="600"><p><code>timehut</code> is a django website that display my kiddos’ images and videos and text. This is a blog that notes why I’m building this and what other things that I’m still looking into in order to add more features to this website.<br><a id="more"></a></p><p>Here’s a small story why I’m building this website _(Not launched yet)_. My wife has been putting a lot of effort in storing our kids’ photos and videos in an mobile app called <code>Peekaboo (Time Hut)</code>, which I believe it’s a great place to preserve all the memories. The app also make it very user-friendly for user to view those images and videos via time-stamped catalog.</p><p>Even though it’s fairly easy to upload the images and videos plus inputting the text to describe the context of the images, there’s no way for parents to backup those assets to local machine. So that inspired and motivate me to make a scraper to do so.</p><p>Those assets are saved in the database. In order to provide a way for me or my wife to browse the assets, that’s why we have this <code>timehut</code> website using django website. </p><p>Now, below is more of a memorandum regarding what other features can be added to the existing one.</p><h3 id="Building-a-Social-Website"><a href="#Building-a-Social-Website" class="headerlink" title="Building a Social Website"></a>Building a Social Website</h3><ul><li>Using the authentication framework</li><li>Creating user registration views</li><li>Extending the User model with a custome profile model</li><li>Adding social authentication with python-social-auth</li></ul><h4 id="Creating-a-social-website-project"><a href="#Creating-a-social-website-project" class="headerlink" title="Creating a social website project"></a>Creating a social website project</h4><p>Auth framework consists of the django.contrib.auth application and the following two middleware classes found in the MIDDLEWARE_CLASSES setting of your project:</p><ul><li><strong><code>AuthenticationMiddleware</code></strong>: Associates users with requests using sessions</li><li><strong><code>SessionMiddleware</code></strong>: Handles the current session across requests</li></ul><p>The authentication framework also includes the following models:<br><strong><code>User</code></strong>: A user model with basic fields; the main fields of this model are: <code>username</code>, <code>password</code>, <code>email</code>, <code>first_name</code>, <code>last_name</code>, and <code>is_active</code>.<br><strong><code>Group</code></strong>: A group model to categorize users.<br><strong><code>Permission</code></strong>: Flags to perform certain actions.”</p><h4 id="Using-Django-authentication-views"><a href="#Using-Django-authentication-views" class="headerlink" title="Using Django authentication views"></a>Using Django authentication views</h4><p>Django provides the following views to deal with authentication:</p><ul><li><code>login</code>: Handles a log in form and logs in a user</li><li><code>logout</code>: Logs out a user<ul><li>If you enable <code>auth.views</code> for both frontend user and backedn administrator, then you need to do some twist to make sure the login/logout views are separated.</li></ul></li><li><code>logout_then_login</code>: Logs out a user and redirects him to the log-in page</li></ul><p>Django provides the following views to handle password changes:</p><ul><li><code>password_change</code>: Handles a form to change user password</li><li><code>password_change_done</code>: The success page shown to the user after changing his password</li></ul><p>Django also includes the following views to allow users to reset their password:</p><ul><li><code>password_reset</code>: Allows the user to reset his password. It generates a one-time use link with a token and sends it to the user’s e-mail account.</li><li><code>password_reset_done</code>: Shows the user that the e-mail to reset his password has been sent to his e-mail account.</li><li><code>password_reset_confirm</code>: Lets the user set a new password.</li><li><code>password_reset_complete</code>: The success page shown to the user after he resets their password.”</li></ul><h4 id="User-registration-and-user-profiles"><a href="#User-registration-and-user-profiles" class="headerlink" title="User registration and user profiles"></a>User registration and user profiles</h4><h4 id="Extending-the-User-model"><a href="#Extending-the-User-model" class="headerlink" title="Extending the User model"></a>Extending the User model</h4><ul><li>Extending the User model</li><li>Using a custom User model</li><li>Using the message framework</li></ul><h4 id="Using-a-custom-User-model"><a href="#Using-a-custom-User-model" class="headerlink" title="Using a custom User model"></a>Using a custom User model</h4><p>Django also offers a way to substitute the whole User model with your own custom model. Your user class should inherit from Django’s AbstractUser class, which provides the full implementation of the default user as an abstract model.</p><h4 id="Using-the-messages-framework-middleware"><a href="#Using-the-messages-framework-middleware" class="headerlink" title="Using the messages framework/middleware"></a>Using the messages framework/middleware</h4><p>messages is default Django middleware, and can be imported by using:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import messages</span><br><span class="line">messages.error(request, &#39;Something went wrong&#39;)</span><br></pre></td></tr></table></figure></p><ul><li><code>success()</code>: Success messages to display after an action was successful</li><li><code>info()</code>: Informational messages</li><li>warning(): Something has not yet failed but may fail imminently</li><li><code>error()</code>: An action was not successful or something failed</li><li><code>debug()</code>: Debug messages that will be removed or ignored in a production environment</li></ul><h4 id="Building-a-custom-authentication-backend"><a href="#Building-a-custom-authentication-backend" class="headerlink" title="Building a custom authentication backend"></a>Building a custom authentication backend</h4><p>The AUTHENTICATION_BACKENDS setting includes the list of authentication backends for your project. By default, this setting is set to the following:</p><p><code>(&#39;django.contrib.auth.backends.ModelBackend&#39;,)</code></p><p>The default ModelBackend authenticates users against the database using the User model of django.contrib.auth. This will suit most of your projects. However, you can create custom backend to authenticate your user against other sources like a LDAP directory or any other system.</p><p>An authentication backend is a class provides the following:</p><ul><li>authenticate(): Takes user credentials as parameters. Has to return <code>True</code> if the user has been successfully authenticated, or False otherwise.</li><li>get_user(): Takes a user ID parameter and has to return a User object.</li></ul>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/2017/08/04/2018-08-05-Django-timehut-2/python-django.png&quot; class=&quot;&quot; width=&quot;600&quot;&gt;
&lt;p&gt;&lt;code&gt;timehut&lt;/code&gt; is a django website that display my kiddos’ images and videos and text. This is a blog that notes why I’m building this and what other things that I’m still looking into in order to add more features to this website.&lt;br&gt;</summary>
    
    
    
    <category term="Notes" scheme="http://mikelhsia.github.io/categories/Notes/"/>
    
    
    <category term="Python" scheme="http://mikelhsia.github.io/tags/Python/"/>
    
    <category term="Django" scheme="http://mikelhsia.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python Scrapy folder structure notes</title>
    <link href="http://mikelhsia.github.io/2017/07/15/2017-07-15-python-scrapy/"/>
    <id>http://mikelhsia.github.io/2017/07/15/2017-07-15-python-scrapy/</id>
    <published>2017-07-15T04:57:40.000Z</published>
    <updated>2020-08-20T08:34:51.617Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/2017/07/15/2017-07-15-python-scrapy/scrapy.png" class="" width="500"><p>header_banner_img: </p><h3 id="scrapy-startproject-tutorial"><a href="#scrapy-startproject-tutorial" class="headerlink" title="scrapy startproject tutorial"></a>scrapy startproject tutorial</h3><ul><li><code>scrapy.cfg</code>: 项目的配置文件</li><li><code>project/</code>: 该项目的python模块。之后您将在此加入代码。</li><li><code>project/items.py</code>: 项目中的item文件.</li><li><code>project/pipelines.py</code>: 项目中的pipelines文件.</li><li><code>tutorial/settings.py</code>: 项目的设置文件.</li><li><code>project/spiders/</code>: 放置spider代码的目录.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;img data-src=&quot;/2017/07/15/2017-07-15-python-scrapy/scrapy.png&quot; class=&quot;&quot; width=&quot;500&quot;&gt;
&lt;p&gt;header_banner_img: &lt;/p&gt;
&lt;h3 id=&quot;scrapy-startproject</summary>
      
    
    
    
    <category term="Notes" scheme="http://mikelhsia.github.io/categories/Notes/"/>
    
    
    <category term="Python" scheme="http://mikelhsia.github.io/tags/Python/"/>
    
    <category term="Scrapy" scheme="http://mikelhsia.github.io/tags/Scrapy/"/>
    
  </entry>
  
</feed>
